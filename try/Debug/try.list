
try.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000558c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800571c  0800571c  0001571c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005780  08005780  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005780  08005780  00015780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005788  08005788  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005788  08005788  00015788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800578c  0800578c  0001578c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001c8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000238  20000238  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f22f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002250  00000000  00000000  0002f2cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf8  00000000  00000000  00031520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c00  00000000  00000000  00032218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000210db  00000000  00000000  00032e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000102fb  00000000  00000000  00053ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb47b  00000000  00000000  000641ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f669  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038f8  00000000  00000000  0012f6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005704 	.word	0x08005704

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005704 	.word	0x08005704

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <delay_init>:

static uint16_t fac_us = 0;
static uint32_t fac_ms = 0;

/*初始化*/
void delay_init(void) {
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
#if (!Timebase_Source_is_SysTick)
    fac_ms = 100000;  //作为时基的计数器时钟频率在HAL_InitTick()中被设为了1MHz
    fac_us = fac_ms / 1000;
#else
    fac_ms = SystemCoreClock / 1000;
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <delay_init+0x30>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <delay_init+0x34>)
 800058e:	fba2 2303 	umull	r2, r3, r2, r3
 8000592:	099b      	lsrs	r3, r3, #6
 8000594:	4a09      	ldr	r2, [pc, #36]	; (80005bc <delay_init+0x38>)
 8000596:	6013      	str	r3, [r2, #0]
    fac_us = fac_ms / 1000;
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <delay_init+0x38>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <delay_init+0x34>)
 800059e:	fba2 2303 	umull	r2, r3, r2, r3
 80005a2:	099b      	lsrs	r3, r3, #6
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <delay_init+0x3c>)
 80005a8:	801a      	strh	r2, [r3, #0]
#endif
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	20000000 	.word	0x20000000
 80005b8:	10624dd3 	.word	0x10624dd3
 80005bc:	20000090 	.word	0x20000090
 80005c0:	2000008c 	.word	0x2000008c

080005c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_DMA_Init+0x3c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <MX_DMA_Init+0x3c>)
 80005d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_DMA_Init+0x3c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	2010      	movs	r0, #16
 80005ec:	f000 feb9 	bl	8001362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005f0:	2010      	movs	r0, #16
 80005f2:	f000 fed2 	bl	800139a <HAL_NVIC_EnableIRQ>

}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800

08000604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	; 0x28
 8000608:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	4b3b      	ldr	r3, [pc, #236]	; (800070c <MX_GPIO_Init+0x108>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a3a      	ldr	r2, [pc, #232]	; (800070c <MX_GPIO_Init+0x108>)
 8000624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b38      	ldr	r3, [pc, #224]	; (800070c <MX_GPIO_Init+0x108>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	4b34      	ldr	r3, [pc, #208]	; (800070c <MX_GPIO_Init+0x108>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a33      	ldr	r2, [pc, #204]	; (800070c <MX_GPIO_Init+0x108>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b31      	ldr	r3, [pc, #196]	; (800070c <MX_GPIO_Init+0x108>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	4b2d      	ldr	r3, [pc, #180]	; (800070c <MX_GPIO_Init+0x108>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a2c      	ldr	r2, [pc, #176]	; (800070c <MX_GPIO_Init+0x108>)
 800065c:	f043 0310 	orr.w	r3, r3, #16
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b2a      	ldr	r3, [pc, #168]	; (800070c <MX_GPIO_Init+0x108>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0310 	and.w	r3, r3, #16
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b26      	ldr	r3, [pc, #152]	; (800070c <MX_GPIO_Init+0x108>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a25      	ldr	r2, [pc, #148]	; (800070c <MX_GPIO_Init+0x108>)
 8000678:	f043 0308 	orr.w	r3, r3, #8
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b23      	ldr	r3, [pc, #140]	; (800070c <MX_GPIO_Init+0x108>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0308 	and.w	r3, r3, #8
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2122      	movs	r1, #34	; 0x22
 800068e:	4820      	ldr	r0, [pc, #128]	; (8000710 <MX_GPIO_Init+0x10c>)
 8000690:	f001 fc3c 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069a:	481e      	ldr	r0, [pc, #120]	; (8000714 <MX_GPIO_Init+0x110>)
 800069c:	f001 fc36 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a6:	481c      	ldr	r0, [pc, #112]	; (8000718 <MX_GPIO_Init+0x114>)
 80006a8:	f001 fc30 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80006ac:	2322      	movs	r3, #34	; 0x22
 80006ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2300      	movs	r3, #0
 80006ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	4813      	ldr	r0, [pc, #76]	; (8000710 <MX_GPIO_Init+0x10c>)
 80006c4:	f001 fa86 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2300      	movs	r3, #0
 80006d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	480c      	ldr	r0, [pc, #48]	; (8000714 <MX_GPIO_Init+0x110>)
 80006e2:	f001 fa77 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	4806      	ldr	r0, [pc, #24]	; (8000718 <MX_GPIO_Init+0x114>)
 8000700:	f001 fa68 	bl	8001bd4 <HAL_GPIO_Init>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40020000 	.word	0x40020000
 8000714:	40021000 	.word	0x40021000
 8000718:	40020c00 	.word	0x40020c00

0800071c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 if(htim->Instance==TIM2)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800072c:	d123      	bne.n	8000776 <HAL_TIM_PeriodElapsedCallback+0x5a>
 {
	 //0.1ms
	 if(times<42001)
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f24a 4210 	movw	r2, #42000	; 0xa410
 8000736:	4293      	cmp	r3, r2
 8000738:	dc1d      	bgt.n	8000776 <HAL_TIM_PeriodElapsedCallback+0x5a>
	 {
		 times++;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	4a0f      	ldr	r2, [pc, #60]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000742:	6013      	str	r3, [r2, #0]
		 if(times%5==0&&times>10000)
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000746:	6819      	ldr	r1, [r3, #0]
 8000748:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800074a:	fb83 2301 	smull	r2, r3, r3, r1
 800074e:	105a      	asrs	r2, r3, #1
 8000750:	17cb      	asrs	r3, r1, #31
 8000752:	1ad2      	subs	r2, r2, r3
 8000754:	4613      	mov	r3, r2
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	1aca      	subs	r2, r1, r3
 800075c:	2a00      	cmp	r2, #0
 800075e:	d10a      	bne.n	8000776 <HAL_TIM_PeriodElapsedCallback+0x5a>
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f242 7210 	movw	r2, #10000	; 0x2710
 8000768:	4293      	cmp	r3, r2
 800076a:	dd04      	ble.n	8000776 <HAL_TIM_PeriodElapsedCallback+0x5a>
			 HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_9);
 800076c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000772:	f001 fbe4 	bl	8001f3e <HAL_GPIO_TogglePin>
	 }

 }
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000094 	.word	0x20000094
 8000784:	66666667 	.word	0x66666667
 8000788:	40021000 	.word	0x40021000

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000790:	f000 fc9a 	bl	80010c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000794:	f000 f834 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000798:	f7ff ff34 	bl	8000604 <MX_GPIO_Init>
  MX_DMA_Init();
 800079c:	f7ff ff12 	bl	80005c4 <MX_DMA_Init>
  MX_TIM2_Init();
 80007a0:	f000 f9f4 	bl	8000b8c <MX_TIM2_Init>
  MX_TIM1_Init();
 80007a4:	f000 f952 	bl	8000a4c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80007a8:	f000 fab2 	bl	8000d10 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007ac:	f000 fada 	bl	8000d64 <MX_USART2_UART_Init>
  delay_init();
 80007b0:	f7ff fee8 	bl	8000584 <delay_init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007b4:	480d      	ldr	r0, [pc, #52]	; (80007ec <main+0x60>)
 80007b6:	f002 f8c5 	bl	8002944 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2102      	movs	r1, #2
 80007be:	480c      	ldr	r0, [pc, #48]	; (80007f0 <main+0x64>)
 80007c0:	f001 fba4 	bl	8001f0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2120      	movs	r1, #32
 80007c8:	4809      	ldr	r0, [pc, #36]	; (80007f0 <main+0x64>)
 80007ca:	f001 fb9f 	bl	8001f0c <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007ce:	2100      	movs	r1, #0
 80007d0:	4808      	ldr	r0, [pc, #32]	; (80007f4 <main+0x68>)
 80007d2:	f002 f981 	bl	8002ad8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,1500);
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <main+0x68>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80007de:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_UART_Receive_DMA(&huart2, u2_RX_Buf, RX_BUF_LEN);
 80007e0:	2210      	movs	r2, #16
 80007e2:	4905      	ldr	r1, [pc, #20]	; (80007f8 <main+0x6c>)
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <main+0x70>)
 80007e6:	f003 f9ca 	bl	8003b7e <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <main+0x5e>
 80007ec:	200000f4 	.word	0x200000f4
 80007f0:	40020000 	.word	0x40020000
 80007f4:	200000ac 	.word	0x200000ac
 80007f8:	20000098 	.word	0x20000098
 80007fc:	20000180 	.word	0x20000180

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	; 0x50
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	2230      	movs	r2, #48	; 0x30
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f004 fb02 	bl	8004e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <SystemClock_Config+0xc8>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a26      	ldr	r2, [pc, #152]	; (80008c8 <SystemClock_Config+0xc8>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <SystemClock_Config+0xc8>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <SystemClock_Config+0xcc>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a20      	ldr	r2, [pc, #128]	; (80008cc <SystemClock_Config+0xcc>)
 800084a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <SystemClock_Config+0xcc>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085c:	2301      	movs	r3, #1
 800085e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000860:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000870:	2304      	movs	r3, #4
 8000872:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000874:	23c0      	movs	r3, #192	; 0xc0
 8000876:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000878:	2306      	movs	r3, #6
 800087a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800087c:	2304      	movs	r3, #4
 800087e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	4618      	mov	r0, r3
 8000886:	f001 fb75 	bl	8001f74 <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000890:	f000 f81e 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	230f      	movs	r3, #15
 8000896:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	2302      	movs	r3, #2
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 fdd8 	bl	8002464 <HAL_RCC_ClockConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80008ba:	f000 f809 	bl	80008d0 <Error_Handler>
  }
}
 80008be:	bf00      	nop
 80008c0:	3750      	adds	r7, #80	; 0x50
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <Error_Handler+0x8>
	...

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <HAL_MspInit+0x4c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	4a0f      	ldr	r2, [pc, #60]	; (8000928 <HAL_MspInit+0x4c>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f0:	6453      	str	r3, [r2, #68]	; 0x44
 80008f2:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <HAL_MspInit+0x4c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_MspInit+0x4c>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090c:	6413      	str	r3, [r2, #64]	; 0x40
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <NMI_Handler+0x4>

08000932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <MemManage_Handler+0x4>

0800093e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <UsageFault_Handler+0x4>

0800094a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000978:	f000 fbf8 	bl	800116c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <DMA1_Stream5_IRQHandler+0x10>)
 8000986:	f000 febb 	bl	8001700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200001c4 	.word	0x200001c4

08000994 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <TIM2_IRQHandler+0x10>)
 800099a:	f002 f965 	bl	8002c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000f4 	.word	0x200000f4

080009a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <USART2_IRQHandler+0x10>)
 80009ae:	f003 f917 	bl	8003be0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000180 	.word	0x20000180

080009bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c4:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <_sbrk+0x5c>)
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <_sbrk+0x60>)
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <_sbrk+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d102      	bne.n	80009de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <_sbrk+0x64>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <_sbrk+0x68>)
 80009dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <_sbrk+0x64>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d207      	bcs.n	80009fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009ec:	f004 f9ea 	bl	8004dc4 <__errno>
 80009f0:	4603      	mov	r3, r0
 80009f2:	220c      	movs	r2, #12
 80009f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
 80009fa:	e009      	b.n	8000a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <_sbrk+0x64>)
 8000a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20020000 	.word	0x20020000
 8000a1c:	00000400 	.word	0x00000400
 8000a20:	200000a8 	.word	0x200000a8
 8000a24:	20000238 	.word	0x20000238

08000a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <SystemInit+0x20>)
 8000a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a32:	4a05      	ldr	r2, [pc, #20]	; (8000a48 <SystemInit+0x20>)
 8000a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b096      	sub	sp, #88	; 0x58
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
 8000a7a:	615a      	str	r2, [r3, #20]
 8000a7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2220      	movs	r2, #32
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f004 f9c7 	bl	8004e18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a8a:	4b3e      	ldr	r3, [pc, #248]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000a8c:	4a3e      	ldr	r2, [pc, #248]	; (8000b88 <MX_TIM1_Init+0x13c>)
 8000a8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 8000a90:	4b3c      	ldr	r3, [pc, #240]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000a92:	221f      	movs	r2, #31
 8000a94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a96:	4b3b      	ldr	r3, [pc, #236]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8000a9c:	4b39      	ldr	r3, [pc, #228]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000a9e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000aa2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa4:	4b37      	ldr	r3, [pc, #220]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aaa:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab0:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ab6:	4833      	ldr	r0, [pc, #204]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000ab8:	f001 fef4 	bl	80028a4 <HAL_TIM_Base_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ac2:	f7ff ff05 	bl	80008d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000acc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	482c      	ldr	r0, [pc, #176]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000ad4:	f002 fa92 	bl	8002ffc <HAL_TIM_ConfigClockSource>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ade:	f7ff fef7 	bl	80008d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ae2:	4828      	ldr	r0, [pc, #160]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000ae4:	f001 ff9e 	bl	8002a24 <HAL_TIM_PWM_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000aee:	f7ff feef 	bl	80008d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af2:	2300      	movs	r3, #0
 8000af4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000afa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000afe:	4619      	mov	r1, r3
 8000b00:	4820      	ldr	r0, [pc, #128]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000b02:	f002 fe7b 	bl	80037fc <HAL_TIMEx_MasterConfigSynchronization>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b0c:	f7ff fee0 	bl	80008d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b10:	2360      	movs	r3, #96	; 0x60
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b24:	2300      	movs	r3, #0
 8000b26:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	2200      	movs	r2, #0
 8000b32:	4619      	mov	r1, r3
 8000b34:	4813      	ldr	r0, [pc, #76]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000b36:	f002 f99f 	bl	8002e78 <HAL_TIM_PWM_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b40:	f7ff fec6 	bl	80008d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	4807      	ldr	r0, [pc, #28]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000b68:	f002 fec4 	bl	80038f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000b72:	f7ff fead 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b76:	4803      	ldr	r0, [pc, #12]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000b78:	f000 f890 	bl	8000c9c <HAL_TIM_MspPostInit>

}
 8000b7c:	bf00      	nop
 8000b7e:	3758      	adds	r7, #88	; 0x58
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000ac 	.word	0x200000ac
 8000b88:	40010000 	.word	0x40010000

08000b8c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <MX_TIM2_Init+0x94>)
 8000baa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <MX_TIM2_Init+0x94>)
 8000bb2:	221f      	movs	r2, #31
 8000bb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_TIM2_Init+0x94>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <MX_TIM2_Init+0x94>)
 8000bbe:	2209      	movs	r2, #9
 8000bc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <MX_TIM2_Init+0x94>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <MX_TIM2_Init+0x94>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bce:	4814      	ldr	r0, [pc, #80]	; (8000c20 <MX_TIM2_Init+0x94>)
 8000bd0:	f001 fe68 	bl	80028a4 <HAL_TIM_Base_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000bda:	f7ff fe79 	bl	80008d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	4619      	mov	r1, r3
 8000bea:	480d      	ldr	r0, [pc, #52]	; (8000c20 <MX_TIM2_Init+0x94>)
 8000bec:	f002 fa06 	bl	8002ffc <HAL_TIM_ConfigClockSource>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000bf6:	f7ff fe6b 	bl	80008d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c02:	463b      	mov	r3, r7
 8000c04:	4619      	mov	r1, r3
 8000c06:	4806      	ldr	r0, [pc, #24]	; (8000c20 <MX_TIM2_Init+0x94>)
 8000c08:	f002 fdf8 	bl	80037fc <HAL_TIMEx_MasterConfigSynchronization>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000c12:	f7ff fe5d 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200000f4 	.word	0x200000f4

08000c24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a18      	ldr	r2, [pc, #96]	; (8000c94 <HAL_TIM_Base_MspInit+0x70>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d10e      	bne.n	8000c54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <HAL_TIM_Base_MspInit+0x74>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a16      	ldr	r2, [pc, #88]	; (8000c98 <HAL_TIM_Base_MspInit+0x74>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <HAL_TIM_Base_MspInit+0x74>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c52:	e01a      	b.n	8000c8a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c5c:	d115      	bne.n	8000c8a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <HAL_TIM_Base_MspInit+0x74>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a0c      	ldr	r2, [pc, #48]	; (8000c98 <HAL_TIM_Base_MspInit+0x74>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_TIM_Base_MspInit+0x74>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	201c      	movs	r0, #28
 8000c80:	f000 fb6f 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c84:	201c      	movs	r0, #28
 8000c86:	f000 fb88 	bl	800139a <HAL_NVIC_EnableIRQ>
}
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40010000 	.word	0x40010000
 8000c98:	40023800 	.word	0x40023800

08000c9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <HAL_TIM_MspPostInit+0x68>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d11e      	bne.n	8000cfc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_TIM_MspPostInit+0x6c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <HAL_TIM_MspPostInit+0x6c>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_TIM_MspPostInit+0x6c>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cde:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <HAL_TIM_MspPostInit+0x70>)
 8000cf8:	f000 ff6c 	bl	8001bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000cfc:	bf00      	nop
 8000cfe:	3720      	adds	r7, #32
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40010000 	.word	0x40010000
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020000 	.word	0x40020000

08000d10 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <MX_USART1_UART_Init+0x50>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d48:	f002 fe3a 	bl	80039c0 <HAL_UART_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d52:	f7ff fdbd 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000013c 	.word	0x2000013c
 8000d60:	40011000 	.word	0x40011000

08000d64 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <MX_USART2_UART_Init+0x50>)
 8000d6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d9c:	f002 fe10 	bl	80039c0 <HAL_UART_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000da6:	f7ff fd93 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000180 	.word	0x20000180
 8000db4:	40004400 	.word	0x40004400

08000db8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08c      	sub	sp, #48	; 0x30
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a4d      	ldr	r2, [pc, #308]	; (8000f0c <HAL_UART_MspInit+0x154>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d12d      	bne.n	8000e36 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
 8000dde:	4b4c      	ldr	r3, [pc, #304]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a4b      	ldr	r2, [pc, #300]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000de4:	f043 0310 	orr.w	r3, r3, #16
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b49      	ldr	r3, [pc, #292]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f003 0310 	and.w	r3, r3, #16
 8000df2:	61bb      	str	r3, [r7, #24]
 8000df4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	4b45      	ldr	r3, [pc, #276]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a44      	ldr	r2, [pc, #272]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b42      	ldr	r3, [pc, #264]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e24:	2307      	movs	r3, #7
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4839      	ldr	r0, [pc, #228]	; (8000f14 <HAL_UART_MspInit+0x15c>)
 8000e30:	f000 fed0 	bl	8001bd4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e34:	e066      	b.n	8000f04 <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART2)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a37      	ldr	r2, [pc, #220]	; (8000f18 <HAL_UART_MspInit+0x160>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d161      	bne.n	8000f04 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	4a31      	ldr	r2, [pc, #196]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e50:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	4b2b      	ldr	r3, [pc, #172]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	4a2a      	ldr	r2, [pc, #168]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6c:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e78:	230c      	movs	r3, #12
 8000e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e88:	2307      	movs	r3, #7
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	4820      	ldr	r0, [pc, #128]	; (8000f14 <HAL_UART_MspInit+0x15c>)
 8000e94:	f000 fe9e 	bl	8001bd4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000e98:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000e9a:	4a21      	ldr	r2, [pc, #132]	; (8000f20 <HAL_UART_MspInit+0x168>)
 8000e9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000e9e:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000ea0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ea4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000eb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec0:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ed8:	4810      	ldr	r0, [pc, #64]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000eda:	f000 fa79 	bl	80013d0 <HAL_DMA_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8000ee4:	f7ff fcf4 	bl	80008d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a0c      	ldr	r2, [pc, #48]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000eec:	639a      	str	r2, [r3, #56]	; 0x38
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2026      	movs	r0, #38	; 0x26
 8000efa:	f000 fa32 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000efe:	2026      	movs	r0, #38	; 0x26
 8000f00:	f000 fa4b 	bl	800139a <HAL_NVIC_EnableIRQ>
}
 8000f04:	bf00      	nop
 8000f06:	3730      	adds	r7, #48	; 0x30
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40011000 	.word	0x40011000
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020000 	.word	0x40020000
 8000f18:	40004400 	.word	0x40004400
 8000f1c:	200001c4 	.word	0x200001c4
 8000f20:	40026088 	.word	0x40026088

08000f24 <u1_printf>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void u1_printf(char* fmt, ...) {
 8000f24:	b40f      	push	{r0, r1, r2, r3}
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b0b4      	sub	sp, #208	; 0xd0
 8000f2a:	af00      	add	r7, sp, #0
  uint16_t len;
  va_list ap;
  va_start(ap, fmt);
 8000f2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  uint8_t buf[200];
  vsprintf((char*)buf, fmt, ap);
 8000f34:	463b      	mov	r3, r7
 8000f36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000f3a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f003 ff88 	bl	8004e54 <vsiprintf>
  va_end(ap);
  len = strlen((char*)buf);
 8000f44:	463b      	mov	r3, r7
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff f942 	bl	80001d0 <strlen>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
  HAL_UART_Transmit(&huart1, buf, len, HAL_MAX_DELAY);//若使用了其他UART通道，将对应通道（参数1）修改即可。该函数在（6.补充）中会进行说明。
 8000f52:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8000f56:	4639      	mov	r1, r7
 8000f58:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <u1_printf+0x4c>)
 8000f5e:	f002 fd7c 	bl	8003a5a <HAL_UART_Transmit>
}
 8000f62:	bf00      	nop
 8000f64:	37d0      	adds	r7, #208	; 0xd0
 8000f66:	46bd      	mov	sp, r7
 8000f68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f6c:	b004      	add	sp, #16
 8000f6e:	4770      	bx	lr
 8000f70:	2000013c 	.word	0x2000013c

08000f74 <HAL_UART_RxCpltCallback>:
  va_end(ap);
  len = strlen((char*)buf);
  HAL_UART_Transmit(&huart2, buf, len, HAL_MAX_DELAY);//若使用了其他UART通道，将对应通道（参数1）修改即可。该函数在（6.补充）中会进行说明。
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

if(huart==&huart2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a33      	ldr	r2, [pc, #204]	; (800104c <HAL_UART_RxCpltCallback+0xd8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d15f      	bne.n	8001044 <HAL_UART_RxCpltCallback+0xd0>

{
	u1_printf("received:\n");
 8000f84:	4832      	ldr	r0, [pc, #200]	; (8001050 <HAL_UART_RxCpltCallback+0xdc>)
 8000f86:	f7ff ffcd 	bl	8000f24 <u1_printf>
	HAL_UART_Transmit(&huart1, u2_RX_Buf, RX_BUF_LEN, HAL_MAX_DELAY);
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	2210      	movs	r2, #16
 8000f90:	4930      	ldr	r1, [pc, #192]	; (8001054 <HAL_UART_RxCpltCallback+0xe0>)
 8000f92:	4831      	ldr	r0, [pc, #196]	; (8001058 <HAL_UART_RxCpltCallback+0xe4>)
 8000f94:	f002 fd61 	bl	8003a5a <HAL_UART_Transmit>
	u1_printf("\n");
 8000f98:	4830      	ldr	r0, [pc, #192]	; (800105c <HAL_UART_RxCpltCallback+0xe8>)
 8000f9a:	f7ff ffc3 	bl	8000f24 <u1_printf>
	u1_printf("received:\n");
 8000f9e:	482c      	ldr	r0, [pc, #176]	; (8001050 <HAL_UART_RxCpltCallback+0xdc>)
 8000fa0:	f7ff ffc0 	bl	8000f24 <u1_printf>
	HAL_UART_Transmit(&huart1, u2_RX_Buf, 3, HAL_MAX_DELAY);
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa8:	2203      	movs	r2, #3
 8000faa:	492a      	ldr	r1, [pc, #168]	; (8001054 <HAL_UART_RxCpltCallback+0xe0>)
 8000fac:	482a      	ldr	r0, [pc, #168]	; (8001058 <HAL_UART_RxCpltCallback+0xe4>)
 8000fae:	f002 fd54 	bl	8003a5a <HAL_UART_Transmit>
	u1_printf("\n");
 8000fb2:	482a      	ldr	r0, [pc, #168]	; (800105c <HAL_UART_RxCpltCallback+0xe8>)
 8000fb4:	f7ff ffb6 	bl	8000f24 <u1_printf>
	u1_printf("received:\n");
 8000fb8:	4825      	ldr	r0, [pc, #148]	; (8001050 <HAL_UART_RxCpltCallback+0xdc>)
 8000fba:	f7ff ffb3 	bl	8000f24 <u1_printf>
	HAL_UART_Transmit(&huart1, u2_RX_Buf+3, 3, HAL_MAX_DELAY);
 8000fbe:	4928      	ldr	r1, [pc, #160]	; (8001060 <HAL_UART_RxCpltCallback+0xec>)
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	4824      	ldr	r0, [pc, #144]	; (8001058 <HAL_UART_RxCpltCallback+0xe4>)
 8000fc8:	f002 fd47 	bl	8003a5a <HAL_UART_Transmit>
	u1_printf("\n");
 8000fcc:	4823      	ldr	r0, [pc, #140]	; (800105c <HAL_UART_RxCpltCallback+0xe8>)
 8000fce:	f7ff ffa9 	bl	8000f24 <u1_printf>
	u1_printf("received:\n");
 8000fd2:	481f      	ldr	r0, [pc, #124]	; (8001050 <HAL_UART_RxCpltCallback+0xdc>)
 8000fd4:	f7ff ffa6 	bl	8000f24 <u1_printf>
	HAL_UART_Transmit(&huart1, u2_RX_Buf+6, 1, HAL_MAX_DELAY);
 8000fd8:	4922      	ldr	r1, [pc, #136]	; (8001064 <HAL_UART_RxCpltCallback+0xf0>)
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	2201      	movs	r2, #1
 8000fe0:	481d      	ldr	r0, [pc, #116]	; (8001058 <HAL_UART_RxCpltCallback+0xe4>)
 8000fe2:	f002 fd3a 	bl	8003a5a <HAL_UART_Transmit>
	u1_printf("\n");
 8000fe6:	481d      	ldr	r0, [pc, #116]	; (800105c <HAL_UART_RxCpltCallback+0xe8>)
 8000fe8:	f7ff ff9c 	bl	8000f24 <u1_printf>
	u1_printf("received:\n");
 8000fec:	4818      	ldr	r0, [pc, #96]	; (8001050 <HAL_UART_RxCpltCallback+0xdc>)
 8000fee:	f7ff ff99 	bl	8000f24 <u1_printf>
	HAL_UART_Transmit(&huart1, u2_RX_Buf+8, 3, HAL_MAX_DELAY);
 8000ff2:	491d      	ldr	r1, [pc, #116]	; (8001068 <HAL_UART_RxCpltCallback+0xf4>)
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	4817      	ldr	r0, [pc, #92]	; (8001058 <HAL_UART_RxCpltCallback+0xe4>)
 8000ffc:	f002 fd2d 	bl	8003a5a <HAL_UART_Transmit>
	u1_printf("\n");
 8001000:	4816      	ldr	r0, [pc, #88]	; (800105c <HAL_UART_RxCpltCallback+0xe8>)
 8001002:	f7ff ff8f 	bl	8000f24 <u1_printf>
	u1_printf("received:\n");
 8001006:	4812      	ldr	r0, [pc, #72]	; (8001050 <HAL_UART_RxCpltCallback+0xdc>)
 8001008:	f7ff ff8c 	bl	8000f24 <u1_printf>
	HAL_UART_Transmit(&huart1, u2_RX_Buf+11, 3, HAL_MAX_DELAY);
 800100c:	4917      	ldr	r1, [pc, #92]	; (800106c <HAL_UART_RxCpltCallback+0xf8>)
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	2203      	movs	r2, #3
 8001014:	4810      	ldr	r0, [pc, #64]	; (8001058 <HAL_UART_RxCpltCallback+0xe4>)
 8001016:	f002 fd20 	bl	8003a5a <HAL_UART_Transmit>
	u1_printf("\n");
 800101a:	4810      	ldr	r0, [pc, #64]	; (800105c <HAL_UART_RxCpltCallback+0xe8>)
 800101c:	f7ff ff82 	bl	8000f24 <u1_printf>
	u1_printf("received:\n");
 8001020:	480b      	ldr	r0, [pc, #44]	; (8001050 <HAL_UART_RxCpltCallback+0xdc>)
 8001022:	f7ff ff7f 	bl	8000f24 <u1_printf>
	HAL_UART_Transmit(&huart1, u2_RX_Buf+14, 1, HAL_MAX_DELAY);
 8001026:	4912      	ldr	r1, [pc, #72]	; (8001070 <HAL_UART_RxCpltCallback+0xfc>)
 8001028:	f04f 33ff 	mov.w	r3, #4294967295
 800102c:	2201      	movs	r2, #1
 800102e:	480a      	ldr	r0, [pc, #40]	; (8001058 <HAL_UART_RxCpltCallback+0xe4>)
 8001030:	f002 fd13 	bl	8003a5a <HAL_UART_Transmit>
	u1_printf("\n");
 8001034:	4809      	ldr	r0, [pc, #36]	; (800105c <HAL_UART_RxCpltCallback+0xe8>)
 8001036:	f7ff ff75 	bl	8000f24 <u1_printf>
	HAL_UART_Receive_DMA(&huart2, u2_RX_Buf, RX_BUF_LEN);
 800103a:	2210      	movs	r2, #16
 800103c:	4905      	ldr	r1, [pc, #20]	; (8001054 <HAL_UART_RxCpltCallback+0xe0>)
 800103e:	4803      	ldr	r0, [pc, #12]	; (800104c <HAL_UART_RxCpltCallback+0xd8>)
 8001040:	f002 fd9d 	bl	8003b7e <HAL_UART_Receive_DMA>
}
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000180 	.word	0x20000180
 8001050:	0800571c 	.word	0x0800571c
 8001054:	20000098 	.word	0x20000098
 8001058:	2000013c 	.word	0x2000013c
 800105c:	08005728 	.word	0x08005728
 8001060:	2000009b 	.word	0x2000009b
 8001064:	2000009e 	.word	0x2000009e
 8001068:	200000a0 	.word	0x200000a0
 800106c:	200000a3 	.word	0x200000a3
 8001070:	200000a6 	.word	0x200000a6

08001074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001078:	480d      	ldr	r0, [pc, #52]	; (80010b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800107a:	490e      	ldr	r1, [pc, #56]	; (80010b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800107c:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001090:	4c0b      	ldr	r4, [pc, #44]	; (80010c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800109e:	f7ff fcc3 	bl	8000a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a2:	f003 fe95 	bl	8004dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a6:	f7ff fb71 	bl	800078c <main>
  bx  lr    
 80010aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010b8:	08005790 	.word	0x08005790
  ldr r2, =_sbss
 80010bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010c0:	20000238 	.word	0x20000238

080010c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC_IRQHandler>
	...

080010c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <HAL_Init+0x40>)
 80010d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <HAL_Init+0x40>)
 80010de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a07      	ldr	r2, [pc, #28]	; (8001108 <HAL_Init+0x40>)
 80010ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f92b 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	200f      	movs	r0, #15
 80010f8:	f000 f808 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f7ff fbee 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023c00 	.word	0x40023c00

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x58>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f943 	bl	80013b6 <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00e      	b.n	8001158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d80a      	bhi.n	8001156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f000 f90b 	bl	8001362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <HAL_InitTick+0x5c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000000 	.word	0x20000000
 8001164:	20000008 	.word	0x20000008
 8001168:	20000004 	.word	0x20000004

0800116c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x20>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x24>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_IncTick+0x24>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008
 8001190:	20000224 	.word	0x20000224

08001194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_GetTick+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000224 	.word	0x20000224

080011ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c8:	4013      	ands	r3, r2
 80011ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011de:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	60d3      	str	r3, [r2, #12]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <__NVIC_GetPriorityGrouping+0x18>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	f003 0307 	and.w	r3, r3, #7
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	2b00      	cmp	r3, #0
 8001220:	db0b      	blt.n	800123a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f003 021f 	and.w	r2, r3, #31
 8001228:	4907      	ldr	r1, [pc, #28]	; (8001248 <__NVIC_EnableIRQ+0x38>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	2001      	movs	r0, #1
 8001232:	fa00 f202 	lsl.w	r2, r0, r2
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000e100 	.word	0xe000e100

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	490c      	ldr	r1, [pc, #48]	; (8001298 <__NVIC_SetPriority+0x4c>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4908      	ldr	r1, [pc, #32]	; (800129c <__NVIC_SetPriority+0x50>)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3b04      	subs	r3, #4
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	4313      	orrs	r3, r2
         );
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001318:	d301      	bcc.n	800131e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2301      	movs	r3, #1
 800131c:	e00f      	b.n	800133e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <SysTick_Config+0x40>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001326:	210f      	movs	r1, #15
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f7ff ff8e 	bl	800124c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <SysTick_Config+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <SysTick_Config+0x40>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff29 	bl	80011ac <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff3e 	bl	80011f4 <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff8e 	bl	80012a0 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5d 	bl	800124c <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff31 	bl	8001210 <__NVIC_EnableIRQ>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffa2 	bl	8001308 <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013dc:	f7ff feda 	bl	8001194 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e099      	b.n	8001520 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2202      	movs	r2, #2
 80013f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0201 	bic.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800140c:	e00f      	b.n	800142e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800140e:	f7ff fec1 	bl	8001194 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b05      	cmp	r3, #5
 800141a:	d908      	bls.n	800142e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2220      	movs	r2, #32
 8001420:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2203      	movs	r2, #3
 8001426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e078      	b.n	8001520 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1e8      	bne.n	800140e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	4b38      	ldr	r3, [pc, #224]	; (8001528 <HAL_DMA_Init+0x158>)
 8001448:	4013      	ands	r3, r2
 800144a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800145a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001466:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001472:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	4313      	orrs	r3, r2
 800147e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	2b04      	cmp	r3, #4
 8001486:	d107      	bne.n	8001498 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	4313      	orrs	r3, r2
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	4313      	orrs	r3, r2
 8001496:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f023 0307 	bic.w	r3, r3, #7
 80014ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d117      	bne.n	80014f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00e      	beq.n	80014f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 fb01 	bl	8001adc <DMA_CheckFifoParam>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d008      	beq.n	80014f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2240      	movs	r2, #64	; 0x40
 80014e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014ee:	2301      	movs	r3, #1
 80014f0:	e016      	b.n	8001520 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fab8 	bl	8001a70 <DMA_CalcBaseAndBitshift>
 8001500:	4603      	mov	r3, r0
 8001502:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001508:	223f      	movs	r2, #63	; 0x3f
 800150a:	409a      	lsls	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	f010803f 	.word	0xf010803f

0800152c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001542:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <HAL_DMA_Start_IT+0x26>
 800154e:	2302      	movs	r3, #2
 8001550:	e040      	b.n	80015d4 <HAL_DMA_Start_IT+0xa8>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b01      	cmp	r3, #1
 8001564:	d12f      	bne.n	80015c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2202      	movs	r2, #2
 800156a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2200      	movs	r2, #0
 8001572:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f000 fa4a 	bl	8001a14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001584:	223f      	movs	r2, #63	; 0x3f
 8001586:	409a      	lsls	r2, r3
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0216 	orr.w	r2, r2, #22
 800159a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d007      	beq.n	80015b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0208 	orr.w	r2, r2, #8
 80015b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0201 	orr.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e005      	b.n	80015d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015ce:	2302      	movs	r3, #2
 80015d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015ea:	f7ff fdd3 	bl	8001194 <HAL_GetTick>
 80015ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d008      	beq.n	800160e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2280      	movs	r2, #128	; 0x80
 8001600:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e052      	b.n	80016b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0216 	bic.w	r2, r2, #22
 800161c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800162c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	2b00      	cmp	r3, #0
 8001634:	d103      	bne.n	800163e <HAL_DMA_Abort+0x62>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800163a:	2b00      	cmp	r3, #0
 800163c:	d007      	beq.n	800164e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0208 	bic.w	r2, r2, #8
 800164c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0201 	bic.w	r2, r2, #1
 800165c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800165e:	e013      	b.n	8001688 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001660:	f7ff fd98 	bl	8001194 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b05      	cmp	r3, #5
 800166c:	d90c      	bls.n	8001688 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2220      	movs	r2, #32
 8001672:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2203      	movs	r2, #3
 8001678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e015      	b.n	80016b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1e4      	bne.n	8001660 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169a:	223f      	movs	r2, #63	; 0x3f
 800169c:	409a      	lsls	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d004      	beq.n	80016da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00c      	b.n	80016f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2205      	movs	r2, #5
 80016de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0201 	bic.w	r2, r2, #1
 80016f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800170c:	4b8e      	ldr	r3, [pc, #568]	; (8001948 <HAL_DMA_IRQHandler+0x248>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a8e      	ldr	r2, [pc, #568]	; (800194c <HAL_DMA_IRQHandler+0x24c>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	0a9b      	lsrs	r3, r3, #10
 8001718:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172a:	2208      	movs	r2, #8
 800172c:	409a      	lsls	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4013      	ands	r3, r2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d01a      	beq.n	800176c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d013      	beq.n	800176c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0204 	bic.w	r2, r2, #4
 8001752:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001758:	2208      	movs	r2, #8
 800175a:	409a      	lsls	r2, r3
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001764:	f043 0201 	orr.w	r2, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001770:	2201      	movs	r2, #1
 8001772:	409a      	lsls	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4013      	ands	r3, r2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d012      	beq.n	80017a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00b      	beq.n	80017a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178e:	2201      	movs	r2, #1
 8001790:	409a      	lsls	r2, r3
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179a:	f043 0202 	orr.w	r2, r3, #2
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a6:	2204      	movs	r2, #4
 80017a8:	409a      	lsls	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d012      	beq.n	80017d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00b      	beq.n	80017d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c4:	2204      	movs	r2, #4
 80017c6:	409a      	lsls	r2, r3
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d0:	f043 0204 	orr.w	r2, r3, #4
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017dc:	2210      	movs	r2, #16
 80017de:	409a      	lsls	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d043      	beq.n	8001870 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d03c      	beq.n	8001870 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fa:	2210      	movs	r2, #16
 80017fc:	409a      	lsls	r2, r3
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d018      	beq.n	8001842 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d108      	bne.n	8001830 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	2b00      	cmp	r3, #0
 8001824:	d024      	beq.n	8001870 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	4798      	blx	r3
 800182e:	e01f      	b.n	8001870 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001834:	2b00      	cmp	r3, #0
 8001836:	d01b      	beq.n	8001870 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	4798      	blx	r3
 8001840:	e016      	b.n	8001870 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	2b00      	cmp	r3, #0
 800184e:	d107      	bne.n	8001860 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0208 	bic.w	r2, r2, #8
 800185e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001874:	2220      	movs	r2, #32
 8001876:	409a      	lsls	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4013      	ands	r3, r2
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 808f 	beq.w	80019a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0310 	and.w	r3, r3, #16
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8087 	beq.w	80019a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001896:	2220      	movs	r2, #32
 8001898:	409a      	lsls	r2, r3
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d136      	bne.n	8001918 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0216 	bic.w	r2, r2, #22
 80018b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	695a      	ldr	r2, [r3, #20]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d103      	bne.n	80018da <HAL_DMA_IRQHandler+0x1da>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d007      	beq.n	80018ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0208 	bic.w	r2, r2, #8
 80018e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ee:	223f      	movs	r2, #63	; 0x3f
 80018f0:	409a      	lsls	r2, r3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800190a:	2b00      	cmp	r3, #0
 800190c:	d07e      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	4798      	blx	r3
        }
        return;
 8001916:	e079      	b.n	8001a0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d01d      	beq.n	8001962 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10d      	bne.n	8001950 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	2b00      	cmp	r3, #0
 800193a:	d031      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	4798      	blx	r3
 8001944:	e02c      	b.n	80019a0 <HAL_DMA_IRQHandler+0x2a0>
 8001946:	bf00      	nop
 8001948:	20000000 	.word	0x20000000
 800194c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001954:	2b00      	cmp	r3, #0
 8001956:	d023      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	4798      	blx	r3
 8001960:	e01e      	b.n	80019a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10f      	bne.n	8001990 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0210 	bic.w	r2, r2, #16
 800197e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d032      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d022      	beq.n	80019fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2205      	movs	r2, #5
 80019b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0201 	bic.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	3301      	adds	r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d307      	bcc.n	80019e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f2      	bne.n	80019cc <HAL_DMA_IRQHandler+0x2cc>
 80019e6:	e000      	b.n	80019ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	4798      	blx	r3
 8001a0a:	e000      	b.n	8001a0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a0c:	bf00      	nop
    }
  }
}
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2b40      	cmp	r3, #64	; 0x40
 8001a40:	d108      	bne.n	8001a54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a52:	e007      	b.n	8001a64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	60da      	str	r2, [r3, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	3b10      	subs	r3, #16
 8001a80:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <DMA_CalcBaseAndBitshift+0x64>)
 8001a82:	fba2 2303 	umull	r2, r3, r2, r3
 8001a86:	091b      	lsrs	r3, r3, #4
 8001a88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a8a:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <DMA_CalcBaseAndBitshift+0x68>)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4413      	add	r3, r2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d909      	bls.n	8001ab2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001aa6:	f023 0303 	bic.w	r3, r3, #3
 8001aaa:	1d1a      	adds	r2, r3, #4
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	659a      	str	r2, [r3, #88]	; 0x58
 8001ab0:	e007      	b.n	8001ac2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001aba:	f023 0303 	bic.w	r3, r3, #3
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	aaaaaaab 	.word	0xaaaaaaab
 8001ad8:	08005744 	.word	0x08005744

08001adc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d11f      	bne.n	8001b36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d856      	bhi.n	8001baa <DMA_CheckFifoParam+0xce>
 8001afc:	a201      	add	r2, pc, #4	; (adr r2, 8001b04 <DMA_CheckFifoParam+0x28>)
 8001afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b02:	bf00      	nop
 8001b04:	08001b15 	.word	0x08001b15
 8001b08:	08001b27 	.word	0x08001b27
 8001b0c:	08001b15 	.word	0x08001b15
 8001b10:	08001bab 	.word	0x08001bab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d046      	beq.n	8001bae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b24:	e043      	b.n	8001bae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b2e:	d140      	bne.n	8001bb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b34:	e03d      	b.n	8001bb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b3e:	d121      	bne.n	8001b84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d837      	bhi.n	8001bb6 <DMA_CheckFifoParam+0xda>
 8001b46:	a201      	add	r2, pc, #4	; (adr r2, 8001b4c <DMA_CheckFifoParam+0x70>)
 8001b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4c:	08001b5d 	.word	0x08001b5d
 8001b50:	08001b63 	.word	0x08001b63
 8001b54:	08001b5d 	.word	0x08001b5d
 8001b58:	08001b75 	.word	0x08001b75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b60:	e030      	b.n	8001bc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d025      	beq.n	8001bba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b72:	e022      	b.n	8001bba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b7c:	d11f      	bne.n	8001bbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b82:	e01c      	b.n	8001bbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d903      	bls.n	8001b92 <DMA_CheckFifoParam+0xb6>
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d003      	beq.n	8001b98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b90:	e018      	b.n	8001bc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	73fb      	strb	r3, [r7, #15]
      break;
 8001b96:	e015      	b.n	8001bc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00e      	beq.n	8001bc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ba8:	e00b      	b.n	8001bc2 <DMA_CheckFifoParam+0xe6>
      break;
 8001baa:	bf00      	nop
 8001bac:	e00a      	b.n	8001bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bae:	bf00      	nop
 8001bb0:	e008      	b.n	8001bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bb2:	bf00      	nop
 8001bb4:	e006      	b.n	8001bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bb6:	bf00      	nop
 8001bb8:	e004      	b.n	8001bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bba:	bf00      	nop
 8001bbc:	e002      	b.n	8001bc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001bbe:	bf00      	nop
 8001bc0:	e000      	b.n	8001bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bc2:	bf00      	nop
    }
  } 
  
  return status; 
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop

08001bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b089      	sub	sp, #36	; 0x24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	e16b      	b.n	8001ec8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	f040 815a 	bne.w	8001ec2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d005      	beq.n	8001c26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d130      	bne.n	8001c88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	2203      	movs	r2, #3
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 0201 	and.w	r2, r3, #1
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d017      	beq.n	8001cc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d123      	bne.n	8001d18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	08da      	lsrs	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3208      	adds	r2, #8
 8001cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	220f      	movs	r2, #15
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	08da      	lsrs	r2, r3, #3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3208      	adds	r2, #8
 8001d12:	69b9      	ldr	r1, [r7, #24]
 8001d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	2203      	movs	r2, #3
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0203 	and.w	r2, r3, #3
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80b4 	beq.w	8001ec2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b60      	ldr	r3, [pc, #384]	; (8001ee0 <HAL_GPIO_Init+0x30c>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	4a5f      	ldr	r2, [pc, #380]	; (8001ee0 <HAL_GPIO_Init+0x30c>)
 8001d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d68:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6a:	4b5d      	ldr	r3, [pc, #372]	; (8001ee0 <HAL_GPIO_Init+0x30c>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d76:	4a5b      	ldr	r2, [pc, #364]	; (8001ee4 <HAL_GPIO_Init+0x310>)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	089b      	lsrs	r3, r3, #2
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a52      	ldr	r2, [pc, #328]	; (8001ee8 <HAL_GPIO_Init+0x314>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d02b      	beq.n	8001dfa <HAL_GPIO_Init+0x226>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a51      	ldr	r2, [pc, #324]	; (8001eec <HAL_GPIO_Init+0x318>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d025      	beq.n	8001df6 <HAL_GPIO_Init+0x222>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a50      	ldr	r2, [pc, #320]	; (8001ef0 <HAL_GPIO_Init+0x31c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d01f      	beq.n	8001df2 <HAL_GPIO_Init+0x21e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4f      	ldr	r2, [pc, #316]	; (8001ef4 <HAL_GPIO_Init+0x320>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d019      	beq.n	8001dee <HAL_GPIO_Init+0x21a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4e      	ldr	r2, [pc, #312]	; (8001ef8 <HAL_GPIO_Init+0x324>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <HAL_GPIO_Init+0x216>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4d      	ldr	r2, [pc, #308]	; (8001efc <HAL_GPIO_Init+0x328>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00d      	beq.n	8001de6 <HAL_GPIO_Init+0x212>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4c      	ldr	r2, [pc, #304]	; (8001f00 <HAL_GPIO_Init+0x32c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d007      	beq.n	8001de2 <HAL_GPIO_Init+0x20e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4b      	ldr	r2, [pc, #300]	; (8001f04 <HAL_GPIO_Init+0x330>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_GPIO_Init+0x20a>
 8001dda:	2307      	movs	r3, #7
 8001ddc:	e00e      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001dde:	2308      	movs	r3, #8
 8001de0:	e00c      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001de2:	2306      	movs	r3, #6
 8001de4:	e00a      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001de6:	2305      	movs	r3, #5
 8001de8:	e008      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001dea:	2304      	movs	r3, #4
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001dee:	2303      	movs	r3, #3
 8001df0:	e004      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e002      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	f002 0203 	and.w	r2, r2, #3
 8001e02:	0092      	lsls	r2, r2, #2
 8001e04:	4093      	lsls	r3, r2
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e0c:	4935      	ldr	r1, [pc, #212]	; (8001ee4 <HAL_GPIO_Init+0x310>)
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	089b      	lsrs	r3, r3, #2
 8001e12:	3302      	adds	r3, #2
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e1a:	4b3b      	ldr	r3, [pc, #236]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e3e:	4a32      	ldr	r2, [pc, #200]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e44:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e68:	4a27      	ldr	r2, [pc, #156]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e6e:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e92:	4a1d      	ldr	r2, [pc, #116]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e98:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ebc:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	61fb      	str	r3, [r7, #28]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	2b0f      	cmp	r3, #15
 8001ecc:	f67f ae90 	bls.w	8001bf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
 8001ed4:	3724      	adds	r7, #36	; 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40013800 	.word	0x40013800
 8001ee8:	40020000 	.word	0x40020000
 8001eec:	40020400 	.word	0x40020400
 8001ef0:	40020800 	.word	0x40020800
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40021400 	.word	0x40021400
 8001f00:	40021800 	.word	0x40021800
 8001f04:	40021c00 	.word	0x40021c00
 8001f08:	40013c00 	.word	0x40013c00

08001f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	807b      	strh	r3, [r7, #2]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f1c:	787b      	ldrb	r3, [r7, #1]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f22:	887a      	ldrh	r2, [r7, #2]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f28:	e003      	b.n	8001f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f2a:	887b      	ldrh	r3, [r7, #2]
 8001f2c:	041a      	lsls	r2, r3, #16
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	619a      	str	r2, [r3, #24]
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	460b      	mov	r3, r1
 8001f48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f50:	887a      	ldrh	r2, [r7, #2]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4013      	ands	r3, r2
 8001f56:	041a      	lsls	r2, r3, #16
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	43d9      	mvns	r1, r3
 8001f5c:	887b      	ldrh	r3, [r7, #2]
 8001f5e:	400b      	ands	r3, r1
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	619a      	str	r2, [r3, #24]
}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e267      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d075      	beq.n	800207e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f92:	4b88      	ldr	r3, [pc, #544]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d00c      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f9e:	4b85      	ldr	r3, [pc, #532]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d112      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001faa:	4b82      	ldr	r3, [pc, #520]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fb6:	d10b      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb8:	4b7e      	ldr	r3, [pc, #504]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d05b      	beq.n	800207c <HAL_RCC_OscConfig+0x108>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d157      	bne.n	800207c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e242      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd8:	d106      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x74>
 8001fda:	4b76      	ldr	r3, [pc, #472]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a75      	ldr	r2, [pc, #468]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e01d      	b.n	8002024 <HAL_RCC_OscConfig+0xb0>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0x98>
 8001ff2:	4b70      	ldr	r3, [pc, #448]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a6f      	ldr	r2, [pc, #444]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b6d      	ldr	r3, [pc, #436]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a6c      	ldr	r2, [pc, #432]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e00b      	b.n	8002024 <HAL_RCC_OscConfig+0xb0>
 800200c:	4b69      	ldr	r3, [pc, #420]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a68      	ldr	r2, [pc, #416]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	4b66      	ldr	r3, [pc, #408]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a65      	ldr	r2, [pc, #404]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 800201e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d013      	beq.n	8002054 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff f8b2 	bl	8001194 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002034:	f7ff f8ae 	bl	8001194 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e207      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	4b5b      	ldr	r3, [pc, #364]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0xc0>
 8002052:	e014      	b.n	800207e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff f89e 	bl	8001194 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800205c:	f7ff f89a 	bl	8001194 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e1f3      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206e:	4b51      	ldr	r3, [pc, #324]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0xe8>
 800207a:	e000      	b.n	800207e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d063      	beq.n	8002152 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800208a:	4b4a      	ldr	r3, [pc, #296]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00b      	beq.n	80020ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002096:	4b47      	ldr	r3, [pc, #284]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d11c      	bne.n	80020dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020a2:	4b44      	ldr	r3, [pc, #272]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d116      	bne.n	80020dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ae:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_RCC_OscConfig+0x152>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d001      	beq.n	80020c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e1c7      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c6:	4b3b      	ldr	r3, [pc, #236]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4937      	ldr	r1, [pc, #220]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020da:	e03a      	b.n	8002152 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d020      	beq.n	8002126 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e4:	4b34      	ldr	r3, [pc, #208]	; (80021b8 <HAL_RCC_OscConfig+0x244>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ea:	f7ff f853 	bl	8001194 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f2:	f7ff f84f 	bl	8001194 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e1a8      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002104:	4b2b      	ldr	r3, [pc, #172]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002110:	4b28      	ldr	r3, [pc, #160]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4925      	ldr	r1, [pc, #148]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]
 8002124:	e015      	b.n	8002152 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002126:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <HAL_RCC_OscConfig+0x244>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7ff f832 	bl	8001194 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002134:	f7ff f82e 	bl	8001194 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e187      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002146:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d036      	beq.n	80021cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d016      	beq.n	8002194 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_RCC_OscConfig+0x248>)
 8002168:	2201      	movs	r2, #1
 800216a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216c:	f7ff f812 	bl	8001194 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002174:	f7ff f80e 	bl	8001194 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e167      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x200>
 8002192:	e01b      	b.n	80021cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_RCC_OscConfig+0x248>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219a:	f7fe fffb 	bl	8001194 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a0:	e00e      	b.n	80021c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a2:	f7fe fff7 	bl	8001194 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d907      	bls.n	80021c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e150      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
 80021b4:	40023800 	.word	0x40023800
 80021b8:	42470000 	.word	0x42470000
 80021bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c0:	4b88      	ldr	r3, [pc, #544]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 80021c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1ea      	bne.n	80021a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 8097 	beq.w	8002308 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021de:	4b81      	ldr	r3, [pc, #516]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10f      	bne.n	800220a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	4b7d      	ldr	r3, [pc, #500]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	4a7c      	ldr	r2, [pc, #496]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 80021f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f8:	6413      	str	r3, [r2, #64]	; 0x40
 80021fa:	4b7a      	ldr	r3, [pc, #488]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002206:	2301      	movs	r3, #1
 8002208:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220a:	4b77      	ldr	r3, [pc, #476]	; (80023e8 <HAL_RCC_OscConfig+0x474>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d118      	bne.n	8002248 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002216:	4b74      	ldr	r3, [pc, #464]	; (80023e8 <HAL_RCC_OscConfig+0x474>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a73      	ldr	r2, [pc, #460]	; (80023e8 <HAL_RCC_OscConfig+0x474>)
 800221c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002222:	f7fe ffb7 	bl	8001194 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222a:	f7fe ffb3 	bl	8001194 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e10c      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223c:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <HAL_RCC_OscConfig+0x474>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d106      	bne.n	800225e <HAL_RCC_OscConfig+0x2ea>
 8002250:	4b64      	ldr	r3, [pc, #400]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002254:	4a63      	ldr	r2, [pc, #396]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6713      	str	r3, [r2, #112]	; 0x70
 800225c:	e01c      	b.n	8002298 <HAL_RCC_OscConfig+0x324>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b05      	cmp	r3, #5
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0x30c>
 8002266:	4b5f      	ldr	r3, [pc, #380]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226a:	4a5e      	ldr	r2, [pc, #376]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 800226c:	f043 0304 	orr.w	r3, r3, #4
 8002270:	6713      	str	r3, [r2, #112]	; 0x70
 8002272:	4b5c      	ldr	r3, [pc, #368]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002276:	4a5b      	ldr	r2, [pc, #364]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6713      	str	r3, [r2, #112]	; 0x70
 800227e:	e00b      	b.n	8002298 <HAL_RCC_OscConfig+0x324>
 8002280:	4b58      	ldr	r3, [pc, #352]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002284:	4a57      	ldr	r2, [pc, #348]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002286:	f023 0301 	bic.w	r3, r3, #1
 800228a:	6713      	str	r3, [r2, #112]	; 0x70
 800228c:	4b55      	ldr	r3, [pc, #340]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 800228e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002290:	4a54      	ldr	r2, [pc, #336]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002292:	f023 0304 	bic.w	r3, r3, #4
 8002296:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d015      	beq.n	80022cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a0:	f7fe ff78 	bl	8001194 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a6:	e00a      	b.n	80022be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a8:	f7fe ff74 	bl	8001194 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e0cb      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022be:	4b49      	ldr	r3, [pc, #292]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0ee      	beq.n	80022a8 <HAL_RCC_OscConfig+0x334>
 80022ca:	e014      	b.n	80022f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022cc:	f7fe ff62 	bl	8001194 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d2:	e00a      	b.n	80022ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d4:	f7fe ff5e 	bl	8001194 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e0b5      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ea:	4b3e      	ldr	r3, [pc, #248]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 80022ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1ee      	bne.n	80022d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022f6:	7dfb      	ldrb	r3, [r7, #23]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d105      	bne.n	8002308 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fc:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	4a38      	ldr	r2, [pc, #224]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002306:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80a1 	beq.w	8002454 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002312:	4b34      	ldr	r3, [pc, #208]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b08      	cmp	r3, #8
 800231c:	d05c      	beq.n	80023d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d141      	bne.n	80023aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002326:	4b31      	ldr	r3, [pc, #196]	; (80023ec <HAL_RCC_OscConfig+0x478>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7fe ff32 	bl	8001194 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002334:	f7fe ff2e 	bl	8001194 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e087      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002346:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69da      	ldr	r2, [r3, #28]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	019b      	lsls	r3, r3, #6
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002368:	085b      	lsrs	r3, r3, #1
 800236a:	3b01      	subs	r3, #1
 800236c:	041b      	lsls	r3, r3, #16
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	061b      	lsls	r3, r3, #24
 8002376:	491b      	ldr	r1, [pc, #108]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800237c:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <HAL_RCC_OscConfig+0x478>)
 800237e:	2201      	movs	r2, #1
 8002380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002382:	f7fe ff07 	bl	8001194 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238a:	f7fe ff03 	bl	8001194 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e05c      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239c:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x416>
 80023a8:	e054      	b.n	8002454 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <HAL_RCC_OscConfig+0x478>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7fe fef0 	bl	8001194 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b8:	f7fe feec 	bl	8001194 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e045      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x444>
 80023d6:	e03d      	b.n	8002454 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d107      	bne.n	80023f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e038      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40007000 	.word	0x40007000
 80023ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023f0:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_RCC_OscConfig+0x4ec>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d028      	beq.n	8002450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002408:	429a      	cmp	r2, r3
 800240a:	d121      	bne.n	8002450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d11a      	bne.n	8002450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002420:	4013      	ands	r3, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002426:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002428:	4293      	cmp	r3, r2
 800242a:	d111      	bne.n	8002450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	085b      	lsrs	r3, r3, #1
 8002438:	3b01      	subs	r3, #1
 800243a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800243c:	429a      	cmp	r2, r3
 800243e:	d107      	bne.n	8002450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e000      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800

08002464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0cc      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002478:	4b68      	ldr	r3, [pc, #416]	; (800261c <HAL_RCC_ClockConfig+0x1b8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d90c      	bls.n	80024a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b65      	ldr	r3, [pc, #404]	; (800261c <HAL_RCC_ClockConfig+0x1b8>)
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b63      	ldr	r3, [pc, #396]	; (800261c <HAL_RCC_ClockConfig+0x1b8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0b8      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d020      	beq.n	80024ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b8:	4b59      	ldr	r3, [pc, #356]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	4a58      	ldr	r2, [pc, #352]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024d0:	4b53      	ldr	r3, [pc, #332]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4a52      	ldr	r2, [pc, #328]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024dc:	4b50      	ldr	r3, [pc, #320]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	494d      	ldr	r1, [pc, #308]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d044      	beq.n	8002584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d107      	bne.n	8002512 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	4b47      	ldr	r3, [pc, #284]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d119      	bne.n	8002542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e07f      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d003      	beq.n	8002522 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800251e:	2b03      	cmp	r3, #3
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002522:	4b3f      	ldr	r3, [pc, #252]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d109      	bne.n	8002542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e06f      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002532:	4b3b      	ldr	r3, [pc, #236]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e067      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002542:	4b37      	ldr	r3, [pc, #220]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f023 0203 	bic.w	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	4934      	ldr	r1, [pc, #208]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	4313      	orrs	r3, r2
 8002552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002554:	f7fe fe1e 	bl	8001194 <HAL_GetTick>
 8002558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255a:	e00a      	b.n	8002572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800255c:	f7fe fe1a 	bl	8001194 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	f241 3288 	movw	r2, #5000	; 0x1388
 800256a:	4293      	cmp	r3, r2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e04f      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002572:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 020c 	and.w	r2, r3, #12
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	429a      	cmp	r2, r3
 8002582:	d1eb      	bne.n	800255c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002584:	4b25      	ldr	r3, [pc, #148]	; (800261c <HAL_RCC_ClockConfig+0x1b8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d20c      	bcs.n	80025ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002592:	4b22      	ldr	r3, [pc, #136]	; (800261c <HAL_RCC_ClockConfig+0x1b8>)
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b20      	ldr	r3, [pc, #128]	; (800261c <HAL_RCC_ClockConfig+0x1b8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e032      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4916      	ldr	r1, [pc, #88]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025d6:	4b12      	ldr	r3, [pc, #72]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	490e      	ldr	r1, [pc, #56]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025ea:	f000 f821 	bl	8002630 <HAL_RCC_GetSysClockFreq>
 80025ee:	4602      	mov	r2, r0
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	490a      	ldr	r1, [pc, #40]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 80025fc:	5ccb      	ldrb	r3, [r1, r3]
 80025fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002602:	4a09      	ldr	r2, [pc, #36]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002606:	4b09      	ldr	r3, [pc, #36]	; (800262c <HAL_RCC_ClockConfig+0x1c8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fd7e 	bl	800110c <HAL_InitTick>

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40023c00 	.word	0x40023c00
 8002620:	40023800 	.word	0x40023800
 8002624:	0800572c 	.word	0x0800572c
 8002628:	20000000 	.word	0x20000000
 800262c:	20000004 	.word	0x20000004

08002630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002634:	b094      	sub	sp, #80	; 0x50
 8002636:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	647b      	str	r3, [r7, #68]	; 0x44
 800263c:	2300      	movs	r3, #0
 800263e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002640:	2300      	movs	r3, #0
 8002642:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002648:	4b79      	ldr	r3, [pc, #484]	; (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 030c 	and.w	r3, r3, #12
 8002650:	2b08      	cmp	r3, #8
 8002652:	d00d      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0x40>
 8002654:	2b08      	cmp	r3, #8
 8002656:	f200 80e1 	bhi.w	800281c <HAL_RCC_GetSysClockFreq+0x1ec>
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0x34>
 800265e:	2b04      	cmp	r3, #4
 8002660:	d003      	beq.n	800266a <HAL_RCC_GetSysClockFreq+0x3a>
 8002662:	e0db      	b.n	800281c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002664:	4b73      	ldr	r3, [pc, #460]	; (8002834 <HAL_RCC_GetSysClockFreq+0x204>)
 8002666:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002668:	e0db      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800266a:	4b73      	ldr	r3, [pc, #460]	; (8002838 <HAL_RCC_GetSysClockFreq+0x208>)
 800266c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800266e:	e0d8      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002670:	4b6f      	ldr	r3, [pc, #444]	; (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002678:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800267a:	4b6d      	ldr	r3, [pc, #436]	; (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d063      	beq.n	800274e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002686:	4b6a      	ldr	r3, [pc, #424]	; (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	099b      	lsrs	r3, r3, #6
 800268c:	2200      	movs	r2, #0
 800268e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002690:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002698:	633b      	str	r3, [r7, #48]	; 0x30
 800269a:	2300      	movs	r3, #0
 800269c:	637b      	str	r3, [r7, #52]	; 0x34
 800269e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026a2:	4622      	mov	r2, r4
 80026a4:	462b      	mov	r3, r5
 80026a6:	f04f 0000 	mov.w	r0, #0
 80026aa:	f04f 0100 	mov.w	r1, #0
 80026ae:	0159      	lsls	r1, r3, #5
 80026b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b4:	0150      	lsls	r0, r2, #5
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4621      	mov	r1, r4
 80026bc:	1a51      	subs	r1, r2, r1
 80026be:	6139      	str	r1, [r7, #16]
 80026c0:	4629      	mov	r1, r5
 80026c2:	eb63 0301 	sbc.w	r3, r3, r1
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026d4:	4659      	mov	r1, fp
 80026d6:	018b      	lsls	r3, r1, #6
 80026d8:	4651      	mov	r1, sl
 80026da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026de:	4651      	mov	r1, sl
 80026e0:	018a      	lsls	r2, r1, #6
 80026e2:	4651      	mov	r1, sl
 80026e4:	ebb2 0801 	subs.w	r8, r2, r1
 80026e8:	4659      	mov	r1, fp
 80026ea:	eb63 0901 	sbc.w	r9, r3, r1
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002702:	4690      	mov	r8, r2
 8002704:	4699      	mov	r9, r3
 8002706:	4623      	mov	r3, r4
 8002708:	eb18 0303 	adds.w	r3, r8, r3
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	462b      	mov	r3, r5
 8002710:	eb49 0303 	adc.w	r3, r9, r3
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002722:	4629      	mov	r1, r5
 8002724:	024b      	lsls	r3, r1, #9
 8002726:	4621      	mov	r1, r4
 8002728:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800272c:	4621      	mov	r1, r4
 800272e:	024a      	lsls	r2, r1, #9
 8002730:	4610      	mov	r0, r2
 8002732:	4619      	mov	r1, r3
 8002734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002736:	2200      	movs	r2, #0
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
 800273a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800273c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002740:	f7fd fd9e 	bl	8000280 <__aeabi_uldivmod>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4613      	mov	r3, r2
 800274a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800274c:	e058      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274e:	4b38      	ldr	r3, [pc, #224]	; (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	099b      	lsrs	r3, r3, #6
 8002754:	2200      	movs	r2, #0
 8002756:	4618      	mov	r0, r3
 8002758:	4611      	mov	r1, r2
 800275a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800275e:	623b      	str	r3, [r7, #32]
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
 8002764:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002768:	4642      	mov	r2, r8
 800276a:	464b      	mov	r3, r9
 800276c:	f04f 0000 	mov.w	r0, #0
 8002770:	f04f 0100 	mov.w	r1, #0
 8002774:	0159      	lsls	r1, r3, #5
 8002776:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800277a:	0150      	lsls	r0, r2, #5
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4641      	mov	r1, r8
 8002782:	ebb2 0a01 	subs.w	sl, r2, r1
 8002786:	4649      	mov	r1, r9
 8002788:	eb63 0b01 	sbc.w	fp, r3, r1
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002798:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800279c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027a0:	ebb2 040a 	subs.w	r4, r2, sl
 80027a4:	eb63 050b 	sbc.w	r5, r3, fp
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	00eb      	lsls	r3, r5, #3
 80027b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027b6:	00e2      	lsls	r2, r4, #3
 80027b8:	4614      	mov	r4, r2
 80027ba:	461d      	mov	r5, r3
 80027bc:	4643      	mov	r3, r8
 80027be:	18e3      	adds	r3, r4, r3
 80027c0:	603b      	str	r3, [r7, #0]
 80027c2:	464b      	mov	r3, r9
 80027c4:	eb45 0303 	adc.w	r3, r5, r3
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027d6:	4629      	mov	r1, r5
 80027d8:	028b      	lsls	r3, r1, #10
 80027da:	4621      	mov	r1, r4
 80027dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027e0:	4621      	mov	r1, r4
 80027e2:	028a      	lsls	r2, r1, #10
 80027e4:	4610      	mov	r0, r2
 80027e6:	4619      	mov	r1, r3
 80027e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ea:	2200      	movs	r2, #0
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	61fa      	str	r2, [r7, #28]
 80027f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027f4:	f7fd fd44 	bl	8000280 <__aeabi_uldivmod>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4613      	mov	r3, r2
 80027fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	0c1b      	lsrs	r3, r3, #16
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	3301      	adds	r3, #1
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002810:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002814:	fbb2 f3f3 	udiv	r3, r2, r3
 8002818:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800281a:	e002      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_RCC_GetSysClockFreq+0x204>)
 800281e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002824:	4618      	mov	r0, r3
 8002826:	3750      	adds	r7, #80	; 0x50
 8002828:	46bd      	mov	sp, r7
 800282a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800
 8002834:	00f42400 	.word	0x00f42400
 8002838:	007a1200 	.word	0x007a1200

0800283c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002840:	4b03      	ldr	r3, [pc, #12]	; (8002850 <HAL_RCC_GetHCLKFreq+0x14>)
 8002842:	681b      	ldr	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000000 	.word	0x20000000

08002854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002858:	f7ff fff0 	bl	800283c <HAL_RCC_GetHCLKFreq>
 800285c:	4602      	mov	r2, r0
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	0a9b      	lsrs	r3, r3, #10
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	4903      	ldr	r1, [pc, #12]	; (8002878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800286a:	5ccb      	ldrb	r3, [r1, r3]
 800286c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002870:	4618      	mov	r0, r3
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40023800 	.word	0x40023800
 8002878:	0800573c 	.word	0x0800573c

0800287c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002880:	f7ff ffdc 	bl	800283c <HAL_RCC_GetHCLKFreq>
 8002884:	4602      	mov	r2, r0
 8002886:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	0b5b      	lsrs	r3, r3, #13
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	4903      	ldr	r1, [pc, #12]	; (80028a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002892:	5ccb      	ldrb	r3, [r1, r3]
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40023800 	.word	0x40023800
 80028a0:	0800573c 	.word	0x0800573c

080028a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e041      	b.n	800293a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fe f9aa 	bl	8000c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3304      	adds	r3, #4
 80028e0:	4619      	mov	r1, r3
 80028e2:	4610      	mov	r0, r2
 80028e4:	f000 fc7a 	bl	80031dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b01      	cmp	r3, #1
 8002956:	d001      	beq.n	800295c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e04e      	b.n	80029fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a23      	ldr	r2, [pc, #140]	; (8002a08 <HAL_TIM_Base_Start_IT+0xc4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d022      	beq.n	80029c4 <HAL_TIM_Base_Start_IT+0x80>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002986:	d01d      	beq.n	80029c4 <HAL_TIM_Base_Start_IT+0x80>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a1f      	ldr	r2, [pc, #124]	; (8002a0c <HAL_TIM_Base_Start_IT+0xc8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d018      	beq.n	80029c4 <HAL_TIM_Base_Start_IT+0x80>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a1e      	ldr	r2, [pc, #120]	; (8002a10 <HAL_TIM_Base_Start_IT+0xcc>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d013      	beq.n	80029c4 <HAL_TIM_Base_Start_IT+0x80>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a1c      	ldr	r2, [pc, #112]	; (8002a14 <HAL_TIM_Base_Start_IT+0xd0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00e      	beq.n	80029c4 <HAL_TIM_Base_Start_IT+0x80>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a1b      	ldr	r2, [pc, #108]	; (8002a18 <HAL_TIM_Base_Start_IT+0xd4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d009      	beq.n	80029c4 <HAL_TIM_Base_Start_IT+0x80>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a19      	ldr	r2, [pc, #100]	; (8002a1c <HAL_TIM_Base_Start_IT+0xd8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d004      	beq.n	80029c4 <HAL_TIM_Base_Start_IT+0x80>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a18      	ldr	r2, [pc, #96]	; (8002a20 <HAL_TIM_Base_Start_IT+0xdc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d111      	bne.n	80029e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d010      	beq.n	80029f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 0201 	orr.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e6:	e007      	b.n	80029f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40010000 	.word	0x40010000
 8002a0c:	40000400 	.word	0x40000400
 8002a10:	40000800 	.word	0x40000800
 8002a14:	40000c00 	.word	0x40000c00
 8002a18:	40010400 	.word	0x40010400
 8002a1c:	40014000 	.word	0x40014000
 8002a20:	40001800 	.word	0x40001800

08002a24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e041      	b.n	8002aba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f839 	bl	8002ac2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	4619      	mov	r1, r3
 8002a62:	4610      	mov	r0, r2
 8002a64:	f000 fbba 	bl	80031dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d109      	bne.n	8002afc <HAL_TIM_PWM_Start+0x24>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	bf14      	ite	ne
 8002af4:	2301      	movne	r3, #1
 8002af6:	2300      	moveq	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	e022      	b.n	8002b42 <HAL_TIM_PWM_Start+0x6a>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d109      	bne.n	8002b16 <HAL_TIM_PWM_Start+0x3e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	bf14      	ite	ne
 8002b0e:	2301      	movne	r3, #1
 8002b10:	2300      	moveq	r3, #0
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	e015      	b.n	8002b42 <HAL_TIM_PWM_Start+0x6a>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d109      	bne.n	8002b30 <HAL_TIM_PWM_Start+0x58>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	bf14      	ite	ne
 8002b28:	2301      	movne	r3, #1
 8002b2a:	2300      	moveq	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	e008      	b.n	8002b42 <HAL_TIM_PWM_Start+0x6a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	bf14      	ite	ne
 8002b3c:	2301      	movne	r3, #1
 8002b3e:	2300      	moveq	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e07c      	b.n	8002c44 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d104      	bne.n	8002b5a <HAL_TIM_PWM_Start+0x82>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b58:	e013      	b.n	8002b82 <HAL_TIM_PWM_Start+0xaa>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d104      	bne.n	8002b6a <HAL_TIM_PWM_Start+0x92>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b68:	e00b      	b.n	8002b82 <HAL_TIM_PWM_Start+0xaa>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d104      	bne.n	8002b7a <HAL_TIM_PWM_Start+0xa2>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b78:	e003      	b.n	8002b82 <HAL_TIM_PWM_Start+0xaa>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2201      	movs	r2, #1
 8002b88:	6839      	ldr	r1, [r7, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fe10 	bl	80037b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a2d      	ldr	r2, [pc, #180]	; (8002c4c <HAL_TIM_PWM_Start+0x174>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d004      	beq.n	8002ba4 <HAL_TIM_PWM_Start+0xcc>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a2c      	ldr	r2, [pc, #176]	; (8002c50 <HAL_TIM_PWM_Start+0x178>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d101      	bne.n	8002ba8 <HAL_TIM_PWM_Start+0xd0>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <HAL_TIM_PWM_Start+0xd2>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d007      	beq.n	8002bbe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a22      	ldr	r2, [pc, #136]	; (8002c4c <HAL_TIM_PWM_Start+0x174>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d022      	beq.n	8002c0e <HAL_TIM_PWM_Start+0x136>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd0:	d01d      	beq.n	8002c0e <HAL_TIM_PWM_Start+0x136>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1f      	ldr	r2, [pc, #124]	; (8002c54 <HAL_TIM_PWM_Start+0x17c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d018      	beq.n	8002c0e <HAL_TIM_PWM_Start+0x136>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1d      	ldr	r2, [pc, #116]	; (8002c58 <HAL_TIM_PWM_Start+0x180>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_TIM_PWM_Start+0x136>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1c      	ldr	r2, [pc, #112]	; (8002c5c <HAL_TIM_PWM_Start+0x184>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00e      	beq.n	8002c0e <HAL_TIM_PWM_Start+0x136>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a16      	ldr	r2, [pc, #88]	; (8002c50 <HAL_TIM_PWM_Start+0x178>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d009      	beq.n	8002c0e <HAL_TIM_PWM_Start+0x136>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a18      	ldr	r2, [pc, #96]	; (8002c60 <HAL_TIM_PWM_Start+0x188>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d004      	beq.n	8002c0e <HAL_TIM_PWM_Start+0x136>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a16      	ldr	r2, [pc, #88]	; (8002c64 <HAL_TIM_PWM_Start+0x18c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d111      	bne.n	8002c32 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b06      	cmp	r3, #6
 8002c1e:	d010      	beq.n	8002c42 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c30:	e007      	b.n	8002c42 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40010000 	.word	0x40010000
 8002c50:	40010400 	.word	0x40010400
 8002c54:	40000400 	.word	0x40000400
 8002c58:	40000800 	.word	0x40000800
 8002c5c:	40000c00 	.word	0x40000c00
 8002c60:	40014000 	.word	0x40014000
 8002c64:	40001800 	.word	0x40001800

08002c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d122      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d11b      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0202 	mvn.w	r2, #2
 8002c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fa77 	bl	800319e <HAL_TIM_IC_CaptureCallback>
 8002cb0:	e005      	b.n	8002cbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fa69 	bl	800318a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fa7a 	bl	80031b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d122      	bne.n	8002d18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d11b      	bne.n	8002d18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0204 	mvn.w	r2, #4
 8002ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2202      	movs	r2, #2
 8002cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fa4d 	bl	800319e <HAL_TIM_IC_CaptureCallback>
 8002d04:	e005      	b.n	8002d12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fa3f 	bl	800318a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 fa50 	bl	80031b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d122      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d11b      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0208 	mvn.w	r2, #8
 8002d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2204      	movs	r2, #4
 8002d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fa23 	bl	800319e <HAL_TIM_IC_CaptureCallback>
 8002d58:	e005      	b.n	8002d66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fa15 	bl	800318a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 fa26 	bl	80031b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d122      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b10      	cmp	r3, #16
 8002d86:	d11b      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0210 	mvn.w	r2, #16
 8002d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2208      	movs	r2, #8
 8002d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f9f9 	bl	800319e <HAL_TIM_IC_CaptureCallback>
 8002dac:	e005      	b.n	8002dba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f9eb 	bl	800318a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f9fc 	bl	80031b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d10e      	bne.n	8002dec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d107      	bne.n	8002dec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0201 	mvn.w	r2, #1
 8002de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fd fc98 	bl	800071c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df6:	2b80      	cmp	r3, #128	; 0x80
 8002df8:	d10e      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e04:	2b80      	cmp	r3, #128	; 0x80
 8002e06:	d107      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fdca 	bl	80039ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e22:	2b40      	cmp	r3, #64	; 0x40
 8002e24:	d10e      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e30:	2b40      	cmp	r3, #64	; 0x40
 8002e32:	d107      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f9c1 	bl	80031c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b20      	cmp	r3, #32
 8002e50:	d10e      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d107      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f06f 0220 	mvn.w	r2, #32
 8002e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fd94 	bl	8003998 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e0ae      	b.n	8002ff4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b0c      	cmp	r3, #12
 8002ea2:	f200 809f 	bhi.w	8002fe4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ea6:	a201      	add	r2, pc, #4	; (adr r2, 8002eac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002fe5 	.word	0x08002fe5
 8002eb4:	08002fe5 	.word	0x08002fe5
 8002eb8:	08002fe5 	.word	0x08002fe5
 8002ebc:	08002f21 	.word	0x08002f21
 8002ec0:	08002fe5 	.word	0x08002fe5
 8002ec4:	08002fe5 	.word	0x08002fe5
 8002ec8:	08002fe5 	.word	0x08002fe5
 8002ecc:	08002f63 	.word	0x08002f63
 8002ed0:	08002fe5 	.word	0x08002fe5
 8002ed4:	08002fe5 	.word	0x08002fe5
 8002ed8:	08002fe5 	.word	0x08002fe5
 8002edc:	08002fa3 	.word	0x08002fa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fa18 	bl	800331c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0208 	orr.w	r2, r2, #8
 8002efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0204 	bic.w	r2, r2, #4
 8002f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6999      	ldr	r1, [r3, #24]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	619a      	str	r2, [r3, #24]
      break;
 8002f1e:	e064      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fa68 	bl	80033fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6999      	ldr	r1, [r3, #24]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	021a      	lsls	r2, r3, #8
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	619a      	str	r2, [r3, #24]
      break;
 8002f60:	e043      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fabd 	bl	80034e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0208 	orr.w	r2, r2, #8
 8002f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0204 	bic.w	r2, r2, #4
 8002f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69d9      	ldr	r1, [r3, #28]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	61da      	str	r2, [r3, #28]
      break;
 8002fa0:	e023      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fb11 	bl	80035d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69d9      	ldr	r1, [r3, #28]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	021a      	lsls	r2, r3, #8
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	61da      	str	r2, [r3, #28]
      break;
 8002fe2:	e002      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fe8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_TIM_ConfigClockSource+0x1c>
 8003014:	2302      	movs	r3, #2
 8003016:	e0b4      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x186>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800303e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003050:	d03e      	beq.n	80030d0 <HAL_TIM_ConfigClockSource+0xd4>
 8003052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003056:	f200 8087 	bhi.w	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 800305a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305e:	f000 8086 	beq.w	800316e <HAL_TIM_ConfigClockSource+0x172>
 8003062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003066:	d87f      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003068:	2b70      	cmp	r3, #112	; 0x70
 800306a:	d01a      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0xa6>
 800306c:	2b70      	cmp	r3, #112	; 0x70
 800306e:	d87b      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003070:	2b60      	cmp	r3, #96	; 0x60
 8003072:	d050      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x11a>
 8003074:	2b60      	cmp	r3, #96	; 0x60
 8003076:	d877      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003078:	2b50      	cmp	r3, #80	; 0x50
 800307a:	d03c      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0xfa>
 800307c:	2b50      	cmp	r3, #80	; 0x50
 800307e:	d873      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d058      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x13a>
 8003084:	2b40      	cmp	r3, #64	; 0x40
 8003086:	d86f      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003088:	2b30      	cmp	r3, #48	; 0x30
 800308a:	d064      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x15a>
 800308c:	2b30      	cmp	r3, #48	; 0x30
 800308e:	d86b      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003090:	2b20      	cmp	r3, #32
 8003092:	d060      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x15a>
 8003094:	2b20      	cmp	r3, #32
 8003096:	d867      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003098:	2b00      	cmp	r3, #0
 800309a:	d05c      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x15a>
 800309c:	2b10      	cmp	r3, #16
 800309e:	d05a      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x15a>
 80030a0:	e062      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6899      	ldr	r1, [r3, #8]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f000 fb5d 	bl	8003770 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	609a      	str	r2, [r3, #8]
      break;
 80030ce:	e04f      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	6899      	ldr	r1, [r3, #8]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f000 fb46 	bl	8003770 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030f2:	609a      	str	r2, [r3, #8]
      break;
 80030f4:	e03c      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6859      	ldr	r1, [r3, #4]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	461a      	mov	r2, r3
 8003104:	f000 faba 	bl	800367c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2150      	movs	r1, #80	; 0x50
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fb13 	bl	800373a <TIM_ITRx_SetConfig>
      break;
 8003114:	e02c      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6859      	ldr	r1, [r3, #4]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	461a      	mov	r2, r3
 8003124:	f000 fad9 	bl	80036da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2160      	movs	r1, #96	; 0x60
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fb03 	bl	800373a <TIM_ITRx_SetConfig>
      break;
 8003134:	e01c      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	461a      	mov	r2, r3
 8003144:	f000 fa9a 	bl	800367c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2140      	movs	r1, #64	; 0x40
 800314e:	4618      	mov	r0, r3
 8003150:	f000 faf3 	bl	800373a <TIM_ITRx_SetConfig>
      break;
 8003154:	e00c      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4619      	mov	r1, r3
 8003160:	4610      	mov	r0, r2
 8003162:	f000 faea 	bl	800373a <TIM_ITRx_SetConfig>
      break;
 8003166:	e003      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
      break;
 800316c:	e000      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800316e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003180:	7bfb      	ldrb	r3, [r7, #15]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a40      	ldr	r2, [pc, #256]	; (80032f0 <TIM_Base_SetConfig+0x114>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d013      	beq.n	800321c <TIM_Base_SetConfig+0x40>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fa:	d00f      	beq.n	800321c <TIM_Base_SetConfig+0x40>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a3d      	ldr	r2, [pc, #244]	; (80032f4 <TIM_Base_SetConfig+0x118>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00b      	beq.n	800321c <TIM_Base_SetConfig+0x40>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a3c      	ldr	r2, [pc, #240]	; (80032f8 <TIM_Base_SetConfig+0x11c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d007      	beq.n	800321c <TIM_Base_SetConfig+0x40>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a3b      	ldr	r2, [pc, #236]	; (80032fc <TIM_Base_SetConfig+0x120>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_Base_SetConfig+0x40>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a3a      	ldr	r2, [pc, #232]	; (8003300 <TIM_Base_SetConfig+0x124>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d108      	bne.n	800322e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a2f      	ldr	r2, [pc, #188]	; (80032f0 <TIM_Base_SetConfig+0x114>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d02b      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323c:	d027      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a2c      	ldr	r2, [pc, #176]	; (80032f4 <TIM_Base_SetConfig+0x118>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d023      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a2b      	ldr	r2, [pc, #172]	; (80032f8 <TIM_Base_SetConfig+0x11c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d01f      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a2a      	ldr	r2, [pc, #168]	; (80032fc <TIM_Base_SetConfig+0x120>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d01b      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a29      	ldr	r2, [pc, #164]	; (8003300 <TIM_Base_SetConfig+0x124>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d017      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a28      	ldr	r2, [pc, #160]	; (8003304 <TIM_Base_SetConfig+0x128>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d013      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a27      	ldr	r2, [pc, #156]	; (8003308 <TIM_Base_SetConfig+0x12c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00f      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a26      	ldr	r2, [pc, #152]	; (800330c <TIM_Base_SetConfig+0x130>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00b      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a25      	ldr	r2, [pc, #148]	; (8003310 <TIM_Base_SetConfig+0x134>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d007      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a24      	ldr	r2, [pc, #144]	; (8003314 <TIM_Base_SetConfig+0x138>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d003      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a23      	ldr	r2, [pc, #140]	; (8003318 <TIM_Base_SetConfig+0x13c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d108      	bne.n	80032a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a0a      	ldr	r2, [pc, #40]	; (80032f0 <TIM_Base_SetConfig+0x114>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d003      	beq.n	80032d4 <TIM_Base_SetConfig+0xf8>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a0c      	ldr	r2, [pc, #48]	; (8003300 <TIM_Base_SetConfig+0x124>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d103      	bne.n	80032dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	615a      	str	r2, [r3, #20]
}
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40010000 	.word	0x40010000
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40000800 	.word	0x40000800
 80032fc:	40000c00 	.word	0x40000c00
 8003300:	40010400 	.word	0x40010400
 8003304:	40014000 	.word	0x40014000
 8003308:	40014400 	.word	0x40014400
 800330c:	40014800 	.word	0x40014800
 8003310:	40001800 	.word	0x40001800
 8003314:	40001c00 	.word	0x40001c00
 8003318:	40002000 	.word	0x40002000

0800331c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	f023 0201 	bic.w	r2, r3, #1
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0303 	bic.w	r3, r3, #3
 8003352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	4313      	orrs	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f023 0302 	bic.w	r3, r3, #2
 8003364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a20      	ldr	r2, [pc, #128]	; (80033f4 <TIM_OC1_SetConfig+0xd8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d003      	beq.n	8003380 <TIM_OC1_SetConfig+0x64>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a1f      	ldr	r2, [pc, #124]	; (80033f8 <TIM_OC1_SetConfig+0xdc>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d10c      	bne.n	800339a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f023 0308 	bic.w	r3, r3, #8
 8003386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f023 0304 	bic.w	r3, r3, #4
 8003398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a15      	ldr	r2, [pc, #84]	; (80033f4 <TIM_OC1_SetConfig+0xd8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d003      	beq.n	80033aa <TIM_OC1_SetConfig+0x8e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a14      	ldr	r2, [pc, #80]	; (80033f8 <TIM_OC1_SetConfig+0xdc>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d111      	bne.n	80033ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	621a      	str	r2, [r3, #32]
}
 80033e8:	bf00      	nop
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	40010000 	.word	0x40010000
 80033f8:	40010400 	.word	0x40010400

080033fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	f023 0210 	bic.w	r2, r3, #16
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f023 0320 	bic.w	r3, r3, #32
 8003446:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	4313      	orrs	r3, r2
 8003452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a22      	ldr	r2, [pc, #136]	; (80034e0 <TIM_OC2_SetConfig+0xe4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d003      	beq.n	8003464 <TIM_OC2_SetConfig+0x68>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a21      	ldr	r2, [pc, #132]	; (80034e4 <TIM_OC2_SetConfig+0xe8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d10d      	bne.n	8003480 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800346a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800347e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a17      	ldr	r2, [pc, #92]	; (80034e0 <TIM_OC2_SetConfig+0xe4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d003      	beq.n	8003490 <TIM_OC2_SetConfig+0x94>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a16      	ldr	r2, [pc, #88]	; (80034e4 <TIM_OC2_SetConfig+0xe8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d113      	bne.n	80034b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003496:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800349e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	621a      	str	r2, [r3, #32]
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40010000 	.word	0x40010000
 80034e4:	40010400 	.word	0x40010400

080034e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0303 	bic.w	r3, r3, #3
 800351e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	4313      	orrs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a21      	ldr	r2, [pc, #132]	; (80035c8 <TIM_OC3_SetConfig+0xe0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d003      	beq.n	800354e <TIM_OC3_SetConfig+0x66>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a20      	ldr	r2, [pc, #128]	; (80035cc <TIM_OC3_SetConfig+0xe4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d10d      	bne.n	800356a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a16      	ldr	r2, [pc, #88]	; (80035c8 <TIM_OC3_SetConfig+0xe0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d003      	beq.n	800357a <TIM_OC3_SetConfig+0x92>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a15      	ldr	r2, [pc, #84]	; (80035cc <TIM_OC3_SetConfig+0xe4>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d113      	bne.n	80035a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	621a      	str	r2, [r3, #32]
}
 80035bc:	bf00      	nop
 80035be:	371c      	adds	r7, #28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	40010000 	.word	0x40010000
 80035cc:	40010400 	.word	0x40010400

080035d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800361a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	031b      	lsls	r3, r3, #12
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a12      	ldr	r2, [pc, #72]	; (8003674 <TIM_OC4_SetConfig+0xa4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d003      	beq.n	8003638 <TIM_OC4_SetConfig+0x68>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a11      	ldr	r2, [pc, #68]	; (8003678 <TIM_OC4_SetConfig+0xa8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d109      	bne.n	800364c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800363e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	019b      	lsls	r3, r3, #6
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	621a      	str	r2, [r3, #32]
}
 8003666:	bf00      	nop
 8003668:	371c      	adds	r7, #28
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40010000 	.word	0x40010000
 8003678:	40010400 	.word	0x40010400

0800367c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f023 0201 	bic.w	r2, r3, #1
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f023 030a 	bic.w	r3, r3, #10
 80036b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4313      	orrs	r3, r2
 80036c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	621a      	str	r2, [r3, #32]
}
 80036ce:	bf00      	nop
 80036d0:	371c      	adds	r7, #28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036da:	b480      	push	{r7}
 80036dc:	b087      	sub	sp, #28
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	f023 0210 	bic.w	r2, r3, #16
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003704:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	031b      	lsls	r3, r3, #12
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003716:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	621a      	str	r2, [r3, #32]
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003750:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	f043 0307 	orr.w	r3, r3, #7
 800375c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	609a      	str	r2, [r3, #8]
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003770:	b480      	push	{r7}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800378a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	021a      	lsls	r2, r3, #8
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	431a      	orrs	r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4313      	orrs	r3, r2
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	609a      	str	r2, [r3, #8]
}
 80037a4:	bf00      	nop
 80037a6:	371c      	adds	r7, #28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f003 031f 	and.w	r3, r3, #31
 80037c2:	2201      	movs	r2, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a1a      	ldr	r2, [r3, #32]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	401a      	ands	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a1a      	ldr	r2, [r3, #32]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	f003 031f 	and.w	r3, r3, #31
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	fa01 f303 	lsl.w	r3, r1, r3
 80037e8:	431a      	orrs	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	621a      	str	r2, [r3, #32]
}
 80037ee:	bf00      	nop
 80037f0:	371c      	adds	r7, #28
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
	...

080037fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003810:	2302      	movs	r3, #2
 8003812:	e05a      	b.n	80038ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a21      	ldr	r2, [pc, #132]	; (80038d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d022      	beq.n	800389e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003860:	d01d      	beq.n	800389e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a1d      	ldr	r2, [pc, #116]	; (80038dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d018      	beq.n	800389e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a1b      	ldr	r2, [pc, #108]	; (80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d013      	beq.n	800389e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a1a      	ldr	r2, [pc, #104]	; (80038e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00e      	beq.n	800389e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a18      	ldr	r2, [pc, #96]	; (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d009      	beq.n	800389e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a17      	ldr	r2, [pc, #92]	; (80038ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d004      	beq.n	800389e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a15      	ldr	r2, [pc, #84]	; (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d10c      	bne.n	80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40010000 	.word	0x40010000
 80038dc:	40000400 	.word	0x40000400
 80038e0:	40000800 	.word	0x40000800
 80038e4:	40000c00 	.word	0x40000c00
 80038e8:	40010400 	.word	0x40010400
 80038ec:	40014000 	.word	0x40014000
 80038f0:	40001800 	.word	0x40001800

080038f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800390c:	2302      	movs	r3, #2
 800390e:	e03d      	b.n	800398c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4313      	orrs	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e03f      	b.n	8003a52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fd f9e6 	bl	8000db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2224      	movs	r2, #36	; 0x24
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 ff69 	bl	80048dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b08a      	sub	sp, #40	; 0x28
 8003a5e:	af02      	add	r7, sp, #8
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	603b      	str	r3, [r7, #0]
 8003a66:	4613      	mov	r3, r2
 8003a68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b20      	cmp	r3, #32
 8003a78:	d17c      	bne.n	8003b74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <HAL_UART_Transmit+0x2c>
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e075      	b.n	8003b76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_UART_Transmit+0x3e>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e06e      	b.n	8003b76 <HAL_UART_Transmit+0x11c>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2221      	movs	r2, #33	; 0x21
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aae:	f7fd fb71 	bl	8001194 <HAL_GetTick>
 8003ab2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	88fa      	ldrh	r2, [r7, #6]
 8003ab8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	88fa      	ldrh	r2, [r7, #6]
 8003abe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac8:	d108      	bne.n	8003adc <HAL_UART_Transmit+0x82>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d104      	bne.n	8003adc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	61bb      	str	r3, [r7, #24]
 8003ada:	e003      	b.n	8003ae4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003aec:	e02a      	b.n	8003b44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2200      	movs	r2, #0
 8003af6:	2180      	movs	r1, #128	; 0x80
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 fc21 	bl	8004340 <UART_WaitOnFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e036      	b.n	8003b76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10b      	bne.n	8003b26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	3302      	adds	r3, #2
 8003b22:	61bb      	str	r3, [r7, #24]
 8003b24:	e007      	b.n	8003b36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	781a      	ldrb	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	3301      	adds	r3, #1
 8003b34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1cf      	bne.n	8003aee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2200      	movs	r2, #0
 8003b56:	2140      	movs	r1, #64	; 0x40
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fbf1 	bl	8004340 <UART_WaitOnFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e006      	b.n	8003b76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	e000      	b.n	8003b76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b74:	2302      	movs	r3, #2
  }
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3720      	adds	r7, #32
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b084      	sub	sp, #16
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d11d      	bne.n	8003bd4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_UART_Receive_DMA+0x26>
 8003b9e:	88fb      	ldrh	r3, [r7, #6]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e016      	b.n	8003bd6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_UART_Receive_DMA+0x38>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e00f      	b.n	8003bd6 <HAL_UART_Receive_DMA+0x58>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68b9      	ldr	r1, [r7, #8]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 fc26 	bl	800441c <UART_Start_Receive_DMA>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	e000      	b.n	8003bd6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003bd4:	2302      	movs	r3, #2
  }
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b0ba      	sub	sp, #232	; 0xe8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003c1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10f      	bne.n	8003c46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d009      	beq.n	8003c46 <HAL_UART_IRQHandler+0x66>
 8003c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fd91 	bl	8004766 <UART_Receive_IT>
      return;
 8003c44:	e256      	b.n	80040f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 80de 	beq.w	8003e0c <HAL_UART_IRQHandler+0x22c>
 8003c50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d106      	bne.n	8003c6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c60:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80d1 	beq.w	8003e0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <HAL_UART_IRQHandler+0xae>
 8003c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f043 0201 	orr.w	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <HAL_UART_IRQHandler+0xd2>
 8003c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f043 0202 	orr.w	r2, r3, #2
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <HAL_UART_IRQHandler+0xf6>
 8003cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f043 0204 	orr.w	r2, r3, #4
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d011      	beq.n	8003d06 <HAL_UART_IRQHandler+0x126>
 8003ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d105      	bne.n	8003cfa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f043 0208 	orr.w	r2, r3, #8
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 81ed 	beq.w	80040ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_UART_IRQHandler+0x14e>
 8003d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fd1c 	bl	8004766 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d38:	2b40      	cmp	r3, #64	; 0x40
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d103      	bne.n	8003d5a <HAL_UART_IRQHandler+0x17a>
 8003d52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d04f      	beq.n	8003dfa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fc24 	bl	80045a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6a:	2b40      	cmp	r3, #64	; 0x40
 8003d6c:	d141      	bne.n	8003df2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3314      	adds	r3, #20
 8003d74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3314      	adds	r3, #20
 8003d96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003da6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003db2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1d9      	bne.n	8003d6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d013      	beq.n	8003dea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	4a7d      	ldr	r2, [pc, #500]	; (8003fbc <HAL_UART_IRQHandler+0x3dc>)
 8003dc8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fd fc74 	bl	80016bc <HAL_DMA_Abort_IT>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d016      	beq.n	8003e08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003de4:	4610      	mov	r0, r2
 8003de6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de8:	e00e      	b.n	8003e08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f99a 	bl	8004124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df0:	e00a      	b.n	8003e08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f996 	bl	8004124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df8:	e006      	b.n	8003e08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f992 	bl	8004124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e06:	e170      	b.n	80040ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e08:	bf00      	nop
    return;
 8003e0a:	e16e      	b.n	80040ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	f040 814a 	bne.w	80040aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1a:	f003 0310 	and.w	r3, r3, #16
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 8143 	beq.w	80040aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 813c 	beq.w	80040aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e32:	2300      	movs	r3, #0
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e52:	2b40      	cmp	r3, #64	; 0x40
 8003e54:	f040 80b4 	bne.w	8003fc0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 8140 	beq.w	80040ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e76:	429a      	cmp	r2, r3
 8003e78:	f080 8139 	bcs.w	80040ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e82:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e8e:	f000 8088 	beq.w	8003fa2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	330c      	adds	r3, #12
 8003e98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ea0:	e853 3f00 	ldrex	r3, [r3]
 8003ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	330c      	adds	r3, #12
 8003eba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ebe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ec2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003eca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ed6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1d9      	bne.n	8003e92 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3314      	adds	r3, #20
 8003ee4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ee8:	e853 3f00 	ldrex	r3, [r3]
 8003eec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003eee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ef0:	f023 0301 	bic.w	r3, r3, #1
 8003ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3314      	adds	r3, #20
 8003efe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e1      	bne.n	8003ede <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3314      	adds	r3, #20
 8003f20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3314      	adds	r3, #20
 8003f3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e3      	bne.n	8003f1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	330c      	adds	r3, #12
 8003f66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f6a:	e853 3f00 	ldrex	r3, [r3]
 8003f6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f72:	f023 0310 	bic.w	r3, r3, #16
 8003f76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	330c      	adds	r3, #12
 8003f80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f84:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e3      	bne.n	8003f60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fd fb1d 	bl	80015dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f8c0 	bl	8004138 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fb8:	e099      	b.n	80040ee <HAL_UART_IRQHandler+0x50e>
 8003fba:	bf00      	nop
 8003fbc:	0800466f 	.word	0x0800466f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 808b 	beq.w	80040f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003fdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 8086 	beq.w	80040f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	330c      	adds	r3, #12
 8003fec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ffc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800400a:	647a      	str	r2, [r7, #68]	; 0x44
 800400c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004010:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e3      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3314      	adds	r3, #20
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	623b      	str	r3, [r7, #32]
   return(result);
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3314      	adds	r3, #20
 800403e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004042:	633a      	str	r2, [r7, #48]	; 0x30
 8004044:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e3      	bne.n	800401e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	330c      	adds	r3, #12
 800406a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	60fb      	str	r3, [r7, #12]
   return(result);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 0310 	bic.w	r3, r3, #16
 800407a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	330c      	adds	r3, #12
 8004084:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004088:	61fa      	str	r2, [r7, #28]
 800408a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	69b9      	ldr	r1, [r7, #24]
 800408e:	69fa      	ldr	r2, [r7, #28]
 8004090:	e841 2300 	strex	r3, r2, [r1]
 8004094:	617b      	str	r3, [r7, #20]
   return(result);
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e3      	bne.n	8004064 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800409c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040a0:	4619      	mov	r1, r3
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f848 	bl	8004138 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040a8:	e023      	b.n	80040f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d009      	beq.n	80040ca <HAL_UART_IRQHandler+0x4ea>
 80040b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fae7 	bl	8004696 <UART_Transmit_IT>
    return;
 80040c8:	e014      	b.n	80040f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00e      	beq.n	80040f4 <HAL_UART_IRQHandler+0x514>
 80040d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d008      	beq.n	80040f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 fb27 	bl	8004736 <UART_EndTransmit_IT>
    return;
 80040e8:	e004      	b.n	80040f4 <HAL_UART_IRQHandler+0x514>
    return;
 80040ea:	bf00      	nop
 80040ec:	e002      	b.n	80040f4 <HAL_UART_IRQHandler+0x514>
      return;
 80040ee:	bf00      	nop
 80040f0:	e000      	b.n	80040f4 <HAL_UART_IRQHandler+0x514>
      return;
 80040f2:	bf00      	nop
  }
}
 80040f4:	37e8      	adds	r7, #232	; 0xe8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop

080040fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b09c      	sub	sp, #112	; 0x70
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d172      	bne.n	8004252 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800416c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416e:	2200      	movs	r2, #0
 8004170:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	330c      	adds	r3, #12
 8004178:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800417c:	e853 3f00 	ldrex	r3, [r3]
 8004180:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004188:	66bb      	str	r3, [r7, #104]	; 0x68
 800418a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	330c      	adds	r3, #12
 8004190:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004192:	65ba      	str	r2, [r7, #88]	; 0x58
 8004194:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004196:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004198:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800419a:	e841 2300 	strex	r3, r2, [r1]
 800419e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1e5      	bne.n	8004172 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3314      	adds	r3, #20
 80041ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b8:	f023 0301 	bic.w	r3, r3, #1
 80041bc:	667b      	str	r3, [r7, #100]	; 0x64
 80041be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3314      	adds	r3, #20
 80041c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80041c6:	647a      	str	r2, [r7, #68]	; 0x44
 80041c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e5      	bne.n	80041a6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3314      	adds	r3, #20
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	623b      	str	r3, [r7, #32]
   return(result);
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041f0:	663b      	str	r3, [r7, #96]	; 0x60
 80041f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3314      	adds	r3, #20
 80041f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041fa:	633a      	str	r2, [r7, #48]	; 0x30
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004202:	e841 2300 	strex	r3, r2, [r1]
 8004206:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1e5      	bne.n	80041da <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800420e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	2b01      	cmp	r3, #1
 800421c:	d119      	bne.n	8004252 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800421e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	330c      	adds	r3, #12
 8004224:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	e853 3f00 	ldrex	r3, [r3]
 800422c:	60fb      	str	r3, [r7, #12]
   return(result);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f023 0310 	bic.w	r3, r3, #16
 8004234:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	330c      	adds	r3, #12
 800423c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800423e:	61fa      	str	r2, [r7, #28]
 8004240:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004242:	69b9      	ldr	r1, [r7, #24]
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	e841 2300 	strex	r3, r2, [r1]
 800424a:	617b      	str	r3, [r7, #20]
   return(result);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1e5      	bne.n	800421e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	2b01      	cmp	r3, #1
 8004258:	d106      	bne.n	8004268 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800425a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800425e:	4619      	mov	r1, r3
 8004260:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004262:	f7ff ff69 	bl	8004138 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004266:	e002      	b.n	800426e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004268:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800426a:	f7fc fe83 	bl	8000f74 <HAL_UART_RxCpltCallback>
}
 800426e:	bf00      	nop
 8004270:	3770      	adds	r7, #112	; 0x70
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004282:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	2b01      	cmp	r3, #1
 800428a:	d108      	bne.n	800429e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004290:	085b      	lsrs	r3, r3, #1
 8004292:	b29b      	uxth	r3, r3
 8004294:	4619      	mov	r1, r3
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f7ff ff4e 	bl	8004138 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800429c:	e002      	b.n	80042a4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f7ff ff36 	bl	8004110 <HAL_UART_RxHalfCpltCallback>
}
 80042a4:	bf00      	nop
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c8:	2b80      	cmp	r3, #128	; 0x80
 80042ca:	bf0c      	ite	eq
 80042cc:	2301      	moveq	r3, #1
 80042ce:	2300      	movne	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b21      	cmp	r3, #33	; 0x21
 80042de:	d108      	bne.n	80042f2 <UART_DMAError+0x46>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2200      	movs	r2, #0
 80042ea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80042ec:	68b8      	ldr	r0, [r7, #8]
 80042ee:	f000 f933 	bl	8004558 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fc:	2b40      	cmp	r3, #64	; 0x40
 80042fe:	bf0c      	ite	eq
 8004300:	2301      	moveq	r3, #1
 8004302:	2300      	movne	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b22      	cmp	r3, #34	; 0x22
 8004312:	d108      	bne.n	8004326 <UART_DMAError+0x7a>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2200      	movs	r2, #0
 800431e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004320:	68b8      	ldr	r0, [r7, #8]
 8004322:	f000 f941 	bl	80045a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f043 0210 	orr.w	r2, r3, #16
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004332:	68b8      	ldr	r0, [r7, #8]
 8004334:	f7ff fef6 	bl	8004124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004338:	bf00      	nop
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b090      	sub	sp, #64	; 0x40
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	4613      	mov	r3, r2
 800434e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004350:	e050      	b.n	80043f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004358:	d04c      	beq.n	80043f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800435a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800435c:	2b00      	cmp	r3, #0
 800435e:	d007      	beq.n	8004370 <UART_WaitOnFlagUntilTimeout+0x30>
 8004360:	f7fc ff18 	bl	8001194 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800436c:	429a      	cmp	r2, r3
 800436e:	d241      	bcs.n	80043f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	330c      	adds	r3, #12
 8004376:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437a:	e853 3f00 	ldrex	r3, [r3]
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	330c      	adds	r3, #12
 800438e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004390:	637a      	str	r2, [r7, #52]	; 0x34
 8004392:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004394:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004398:	e841 2300 	strex	r3, r2, [r1]
 800439c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800439e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1e5      	bne.n	8004370 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3314      	adds	r3, #20
 80043aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	e853 3f00 	ldrex	r3, [r3]
 80043b2:	613b      	str	r3, [r7, #16]
   return(result);
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f023 0301 	bic.w	r3, r3, #1
 80043ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3314      	adds	r3, #20
 80043c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043c4:	623a      	str	r2, [r7, #32]
 80043c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c8:	69f9      	ldr	r1, [r7, #28]
 80043ca:	6a3a      	ldr	r2, [r7, #32]
 80043cc:	e841 2300 	strex	r3, r2, [r1]
 80043d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1e5      	bne.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e00f      	b.n	8004414 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4013      	ands	r3, r2
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	429a      	cmp	r2, r3
 8004402:	bf0c      	ite	eq
 8004404:	2301      	moveq	r3, #1
 8004406:	2300      	movne	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	429a      	cmp	r2, r3
 8004410:	d09f      	beq.n	8004352 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3740      	adds	r7, #64	; 0x40
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b098      	sub	sp, #96	; 0x60
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	4613      	mov	r3, r2
 8004428:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	88fa      	ldrh	r2, [r7, #6]
 8004434:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2222      	movs	r2, #34	; 0x22
 8004440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	4a40      	ldr	r2, [pc, #256]	; (800454c <UART_Start_Receive_DMA+0x130>)
 800444a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	4a3f      	ldr	r2, [pc, #252]	; (8004550 <UART_Start_Receive_DMA+0x134>)
 8004452:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	4a3e      	ldr	r2, [pc, #248]	; (8004554 <UART_Start_Receive_DMA+0x138>)
 800445a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	2200      	movs	r2, #0
 8004462:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004464:	f107 0308 	add.w	r3, r7, #8
 8004468:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3304      	adds	r3, #4
 8004474:	4619      	mov	r1, r3
 8004476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	f7fd f856 	bl	800152c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d019      	beq.n	80044da <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	330c      	adds	r3, #12
 80044ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	330c      	adds	r3, #12
 80044c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044c6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80044c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80044cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80044d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e5      	bne.n	80044a6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3314      	adds	r3, #20
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	e853 3f00 	ldrex	r3, [r3]
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	657b      	str	r3, [r7, #84]	; 0x54
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3314      	adds	r3, #20
 80044f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044fa:	63ba      	str	r2, [r7, #56]	; 0x38
 80044fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1e5      	bne.n	80044da <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3314      	adds	r3, #20
 8004514:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	617b      	str	r3, [r7, #20]
   return(result);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004524:	653b      	str	r3, [r7, #80]	; 0x50
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3314      	adds	r3, #20
 800452c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800452e:	627a      	str	r2, [r7, #36]	; 0x24
 8004530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6a39      	ldr	r1, [r7, #32]
 8004534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	61fb      	str	r3, [r7, #28]
   return(result);
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e5      	bne.n	800450e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3760      	adds	r7, #96	; 0x60
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	08004151 	.word	0x08004151
 8004550:	08004277 	.word	0x08004277
 8004554:	080042ad 	.word	0x080042ad

08004558 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004558:	b480      	push	{r7}
 800455a:	b089      	sub	sp, #36	; 0x24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	330c      	adds	r3, #12
 8004566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	e853 3f00 	ldrex	r3, [r3]
 800456e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004576:	61fb      	str	r3, [r7, #28]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	61ba      	str	r2, [r7, #24]
 8004582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004584:	6979      	ldr	r1, [r7, #20]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	e841 2300 	strex	r3, r2, [r1]
 800458c:	613b      	str	r3, [r7, #16]
   return(result);
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e5      	bne.n	8004560 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800459c:	bf00      	nop
 800459e:	3724      	adds	r7, #36	; 0x24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b095      	sub	sp, #84	; 0x54
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	330c      	adds	r3, #12
 80045b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ba:	e853 3f00 	ldrex	r3, [r3]
 80045be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	330c      	adds	r3, #12
 80045ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045d0:	643a      	str	r2, [r7, #64]	; 0x40
 80045d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045d8:	e841 2300 	strex	r3, r2, [r1]
 80045dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1e5      	bne.n	80045b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3314      	adds	r3, #20
 80045ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	e853 3f00 	ldrex	r3, [r3]
 80045f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f023 0301 	bic.w	r3, r3, #1
 80045fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3314      	adds	r3, #20
 8004602:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004604:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004606:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800460a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800460c:	e841 2300 	strex	r3, r2, [r1]
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e5      	bne.n	80045e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	2b01      	cmp	r3, #1
 800461e:	d119      	bne.n	8004654 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f023 0310 	bic.w	r3, r3, #16
 8004636:	647b      	str	r3, [r7, #68]	; 0x44
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	330c      	adds	r3, #12
 800463e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004640:	61ba      	str	r2, [r7, #24]
 8004642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6979      	ldr	r1, [r7, #20]
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	613b      	str	r3, [r7, #16]
   return(result);
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e5      	bne.n	8004620 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004662:	bf00      	nop
 8004664:	3754      	adds	r7, #84	; 0x54
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f7ff fd4b 	bl	8004124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800468e:	bf00      	nop
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004696:	b480      	push	{r7}
 8004698:	b085      	sub	sp, #20
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b21      	cmp	r3, #33	; 0x21
 80046a8:	d13e      	bne.n	8004728 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b2:	d114      	bne.n	80046de <UART_Transmit_IT+0x48>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d110      	bne.n	80046de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	1c9a      	adds	r2, r3, #2
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	621a      	str	r2, [r3, #32]
 80046dc:	e008      	b.n	80046f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	1c59      	adds	r1, r3, #1
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6211      	str	r1, [r2, #32]
 80046e8:	781a      	ldrb	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	4619      	mov	r1, r3
 80046fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10f      	bne.n	8004724 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004712:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004722:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	e000      	b.n	800472a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004728:	2302      	movs	r3, #2
  }
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800474c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7ff fcd0 	bl	80040fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b08c      	sub	sp, #48	; 0x30
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b22      	cmp	r3, #34	; 0x22
 8004778:	f040 80ab 	bne.w	80048d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004784:	d117      	bne.n	80047b6 <UART_Receive_IT+0x50>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d113      	bne.n	80047b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800478e:	2300      	movs	r3, #0
 8004790:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004796:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	1c9a      	adds	r2, r3, #2
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	629a      	str	r2, [r3, #40]	; 0x28
 80047b4:	e026      	b.n	8004804 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047bc:	2300      	movs	r3, #0
 80047be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c8:	d007      	beq.n	80047da <UART_Receive_IT+0x74>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10a      	bne.n	80047e8 <UART_Receive_IT+0x82>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	e008      	b.n	80047fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004808:	b29b      	uxth	r3, r3
 800480a:	3b01      	subs	r3, #1
 800480c:	b29b      	uxth	r3, r3
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	4619      	mov	r1, r3
 8004812:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004814:	2b00      	cmp	r3, #0
 8004816:	d15a      	bne.n	80048ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0220 	bic.w	r2, r2, #32
 8004826:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004836:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695a      	ldr	r2, [r3, #20]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0201 	bic.w	r2, r2, #1
 8004846:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	2b01      	cmp	r3, #1
 8004856:	d135      	bne.n	80048c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	330c      	adds	r3, #12
 8004864:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	613b      	str	r3, [r7, #16]
   return(result);
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f023 0310 	bic.w	r3, r3, #16
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	330c      	adds	r3, #12
 800487c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800487e:	623a      	str	r2, [r7, #32]
 8004880:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	69f9      	ldr	r1, [r7, #28]
 8004884:	6a3a      	ldr	r2, [r7, #32]
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	61bb      	str	r3, [r7, #24]
   return(result);
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e5      	bne.n	800485e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0310 	and.w	r3, r3, #16
 800489c:	2b10      	cmp	r3, #16
 800489e:	d10a      	bne.n	80048b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ba:	4619      	mov	r1, r3
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff fc3b 	bl	8004138 <HAL_UARTEx_RxEventCallback>
 80048c2:	e002      	b.n	80048ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7fc fb55 	bl	8000f74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e002      	b.n	80048d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e000      	b.n	80048d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80048d2:	2302      	movs	r3, #2
  }
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3730      	adds	r7, #48	; 0x30
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048e0:	b0c0      	sub	sp, #256	; 0x100
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f8:	68d9      	ldr	r1, [r3, #12]
 80048fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	ea40 0301 	orr.w	r3, r0, r1
 8004904:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	431a      	orrs	r2, r3
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	431a      	orrs	r2, r3
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004934:	f021 010c 	bic.w	r1, r1, #12
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004942:	430b      	orrs	r3, r1
 8004944:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004956:	6999      	ldr	r1, [r3, #24]
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	ea40 0301 	orr.w	r3, r0, r1
 8004962:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4b8f      	ldr	r3, [pc, #572]	; (8004ba8 <UART_SetConfig+0x2cc>)
 800496c:	429a      	cmp	r2, r3
 800496e:	d005      	beq.n	800497c <UART_SetConfig+0xa0>
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	4b8d      	ldr	r3, [pc, #564]	; (8004bac <UART_SetConfig+0x2d0>)
 8004978:	429a      	cmp	r2, r3
 800497a:	d104      	bne.n	8004986 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800497c:	f7fd ff7e 	bl	800287c <HAL_RCC_GetPCLK2Freq>
 8004980:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004984:	e003      	b.n	800498e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004986:	f7fd ff65 	bl	8002854 <HAL_RCC_GetPCLK1Freq>
 800498a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004998:	f040 810c 	bne.w	8004bb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800499c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049a0:	2200      	movs	r2, #0
 80049a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049ae:	4622      	mov	r2, r4
 80049b0:	462b      	mov	r3, r5
 80049b2:	1891      	adds	r1, r2, r2
 80049b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80049b6:	415b      	adcs	r3, r3
 80049b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049be:	4621      	mov	r1, r4
 80049c0:	eb12 0801 	adds.w	r8, r2, r1
 80049c4:	4629      	mov	r1, r5
 80049c6:	eb43 0901 	adc.w	r9, r3, r1
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049de:	4690      	mov	r8, r2
 80049e0:	4699      	mov	r9, r3
 80049e2:	4623      	mov	r3, r4
 80049e4:	eb18 0303 	adds.w	r3, r8, r3
 80049e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049ec:	462b      	mov	r3, r5
 80049ee:	eb49 0303 	adc.w	r3, r9, r3
 80049f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	18db      	adds	r3, r3, r3
 8004a0e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a10:	4613      	mov	r3, r2
 8004a12:	eb42 0303 	adc.w	r3, r2, r3
 8004a16:	657b      	str	r3, [r7, #84]	; 0x54
 8004a18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a20:	f7fb fc2e 	bl	8000280 <__aeabi_uldivmod>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4b61      	ldr	r3, [pc, #388]	; (8004bb0 <UART_SetConfig+0x2d4>)
 8004a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a2e:	095b      	lsrs	r3, r3, #5
 8004a30:	011c      	lsls	r4, r3, #4
 8004a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a44:	4642      	mov	r2, r8
 8004a46:	464b      	mov	r3, r9
 8004a48:	1891      	adds	r1, r2, r2
 8004a4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a4c:	415b      	adcs	r3, r3
 8004a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a54:	4641      	mov	r1, r8
 8004a56:	eb12 0a01 	adds.w	sl, r2, r1
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	eb43 0b01 	adc.w	fp, r3, r1
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a74:	4692      	mov	sl, r2
 8004a76:	469b      	mov	fp, r3
 8004a78:	4643      	mov	r3, r8
 8004a7a:	eb1a 0303 	adds.w	r3, sl, r3
 8004a7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a82:	464b      	mov	r3, r9
 8004a84:	eb4b 0303 	adc.w	r3, fp, r3
 8004a88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	18db      	adds	r3, r3, r3
 8004aa4:	643b      	str	r3, [r7, #64]	; 0x40
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	eb42 0303 	adc.w	r3, r2, r3
 8004aac:	647b      	str	r3, [r7, #68]	; 0x44
 8004aae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ab2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ab6:	f7fb fbe3 	bl	8000280 <__aeabi_uldivmod>
 8004aba:	4602      	mov	r2, r0
 8004abc:	460b      	mov	r3, r1
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4b3b      	ldr	r3, [pc, #236]	; (8004bb0 <UART_SetConfig+0x2d4>)
 8004ac2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	2264      	movs	r2, #100	; 0x64
 8004aca:	fb02 f303 	mul.w	r3, r2, r3
 8004ace:	1acb      	subs	r3, r1, r3
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ad6:	4b36      	ldr	r3, [pc, #216]	; (8004bb0 <UART_SetConfig+0x2d4>)
 8004ad8:	fba3 2302 	umull	r2, r3, r3, r2
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ae4:	441c      	add	r4, r3
 8004ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aea:	2200      	movs	r2, #0
 8004aec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004af0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004af4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004af8:	4642      	mov	r2, r8
 8004afa:	464b      	mov	r3, r9
 8004afc:	1891      	adds	r1, r2, r2
 8004afe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b00:	415b      	adcs	r3, r3
 8004b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b08:	4641      	mov	r1, r8
 8004b0a:	1851      	adds	r1, r2, r1
 8004b0c:	6339      	str	r1, [r7, #48]	; 0x30
 8004b0e:	4649      	mov	r1, r9
 8004b10:	414b      	adcs	r3, r1
 8004b12:	637b      	str	r3, [r7, #52]	; 0x34
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b20:	4659      	mov	r1, fp
 8004b22:	00cb      	lsls	r3, r1, #3
 8004b24:	4651      	mov	r1, sl
 8004b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b2a:	4651      	mov	r1, sl
 8004b2c:	00ca      	lsls	r2, r1, #3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	4619      	mov	r1, r3
 8004b32:	4603      	mov	r3, r0
 8004b34:	4642      	mov	r2, r8
 8004b36:	189b      	adds	r3, r3, r2
 8004b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b3c:	464b      	mov	r3, r9
 8004b3e:	460a      	mov	r2, r1
 8004b40:	eb42 0303 	adc.w	r3, r2, r3
 8004b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	18db      	adds	r3, r3, r3
 8004b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b62:	4613      	mov	r3, r2
 8004b64:	eb42 0303 	adc.w	r3, r2, r3
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b72:	f7fb fb85 	bl	8000280 <__aeabi_uldivmod>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <UART_SetConfig+0x2d4>)
 8004b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b80:	095b      	lsrs	r3, r3, #5
 8004b82:	2164      	movs	r1, #100	; 0x64
 8004b84:	fb01 f303 	mul.w	r3, r1, r3
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	3332      	adds	r3, #50	; 0x32
 8004b8e:	4a08      	ldr	r2, [pc, #32]	; (8004bb0 <UART_SetConfig+0x2d4>)
 8004b90:	fba2 2303 	umull	r2, r3, r2, r3
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	f003 0207 	and.w	r2, r3, #7
 8004b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4422      	add	r2, r4
 8004ba2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ba4:	e105      	b.n	8004db2 <UART_SetConfig+0x4d6>
 8004ba6:	bf00      	nop
 8004ba8:	40011000 	.word	0x40011000
 8004bac:	40011400 	.word	0x40011400
 8004bb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bc6:	4642      	mov	r2, r8
 8004bc8:	464b      	mov	r3, r9
 8004bca:	1891      	adds	r1, r2, r2
 8004bcc:	6239      	str	r1, [r7, #32]
 8004bce:	415b      	adcs	r3, r3
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bd6:	4641      	mov	r1, r8
 8004bd8:	1854      	adds	r4, r2, r1
 8004bda:	4649      	mov	r1, r9
 8004bdc:	eb43 0501 	adc.w	r5, r3, r1
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	f04f 0300 	mov.w	r3, #0
 8004be8:	00eb      	lsls	r3, r5, #3
 8004bea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bee:	00e2      	lsls	r2, r4, #3
 8004bf0:	4614      	mov	r4, r2
 8004bf2:	461d      	mov	r5, r3
 8004bf4:	4643      	mov	r3, r8
 8004bf6:	18e3      	adds	r3, r4, r3
 8004bf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bfc:	464b      	mov	r3, r9
 8004bfe:	eb45 0303 	adc.w	r3, r5, r3
 8004c02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c22:	4629      	mov	r1, r5
 8004c24:	008b      	lsls	r3, r1, #2
 8004c26:	4621      	mov	r1, r4
 8004c28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	008a      	lsls	r2, r1, #2
 8004c30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c34:	f7fb fb24 	bl	8000280 <__aeabi_uldivmod>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4b60      	ldr	r3, [pc, #384]	; (8004dc0 <UART_SetConfig+0x4e4>)
 8004c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	011c      	lsls	r4, r3, #4
 8004c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c58:	4642      	mov	r2, r8
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	1891      	adds	r1, r2, r2
 8004c5e:	61b9      	str	r1, [r7, #24]
 8004c60:	415b      	adcs	r3, r3
 8004c62:	61fb      	str	r3, [r7, #28]
 8004c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c68:	4641      	mov	r1, r8
 8004c6a:	1851      	adds	r1, r2, r1
 8004c6c:	6139      	str	r1, [r7, #16]
 8004c6e:	4649      	mov	r1, r9
 8004c70:	414b      	adcs	r3, r1
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c80:	4659      	mov	r1, fp
 8004c82:	00cb      	lsls	r3, r1, #3
 8004c84:	4651      	mov	r1, sl
 8004c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c8a:	4651      	mov	r1, sl
 8004c8c:	00ca      	lsls	r2, r1, #3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	4619      	mov	r1, r3
 8004c92:	4603      	mov	r3, r0
 8004c94:	4642      	mov	r2, r8
 8004c96:	189b      	adds	r3, r3, r2
 8004c98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c9c:	464b      	mov	r3, r9
 8004c9e:	460a      	mov	r2, r1
 8004ca0:	eb42 0303 	adc.w	r3, r2, r3
 8004ca4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	008b      	lsls	r3, r1, #2
 8004cc4:	4641      	mov	r1, r8
 8004cc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cca:	4641      	mov	r1, r8
 8004ccc:	008a      	lsls	r2, r1, #2
 8004cce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cd2:	f7fb fad5 	bl	8000280 <__aeabi_uldivmod>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4b39      	ldr	r3, [pc, #228]	; (8004dc0 <UART_SetConfig+0x4e4>)
 8004cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce0:	095b      	lsrs	r3, r3, #5
 8004ce2:	2164      	movs	r1, #100	; 0x64
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	3332      	adds	r3, #50	; 0x32
 8004cee:	4a34      	ldr	r2, [pc, #208]	; (8004dc0 <UART_SetConfig+0x4e4>)
 8004cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cfa:	441c      	add	r4, r3
 8004cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d00:	2200      	movs	r2, #0
 8004d02:	673b      	str	r3, [r7, #112]	; 0x70
 8004d04:	677a      	str	r2, [r7, #116]	; 0x74
 8004d06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d0a:	4642      	mov	r2, r8
 8004d0c:	464b      	mov	r3, r9
 8004d0e:	1891      	adds	r1, r2, r2
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	415b      	adcs	r3, r3
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d1a:	4641      	mov	r1, r8
 8004d1c:	1851      	adds	r1, r2, r1
 8004d1e:	6039      	str	r1, [r7, #0]
 8004d20:	4649      	mov	r1, r9
 8004d22:	414b      	adcs	r3, r1
 8004d24:	607b      	str	r3, [r7, #4]
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d32:	4659      	mov	r1, fp
 8004d34:	00cb      	lsls	r3, r1, #3
 8004d36:	4651      	mov	r1, sl
 8004d38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d3c:	4651      	mov	r1, sl
 8004d3e:	00ca      	lsls	r2, r1, #3
 8004d40:	4610      	mov	r0, r2
 8004d42:	4619      	mov	r1, r3
 8004d44:	4603      	mov	r3, r0
 8004d46:	4642      	mov	r2, r8
 8004d48:	189b      	adds	r3, r3, r2
 8004d4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d4c:	464b      	mov	r3, r9
 8004d4e:	460a      	mov	r2, r1
 8004d50:	eb42 0303 	adc.w	r3, r2, r3
 8004d54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004d60:	667a      	str	r2, [r7, #100]	; 0x64
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d6e:	4649      	mov	r1, r9
 8004d70:	008b      	lsls	r3, r1, #2
 8004d72:	4641      	mov	r1, r8
 8004d74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d78:	4641      	mov	r1, r8
 8004d7a:	008a      	lsls	r2, r1, #2
 8004d7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d80:	f7fb fa7e 	bl	8000280 <__aeabi_uldivmod>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <UART_SetConfig+0x4e4>)
 8004d8a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	2164      	movs	r1, #100	; 0x64
 8004d92:	fb01 f303 	mul.w	r3, r1, r3
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	3332      	adds	r3, #50	; 0x32
 8004d9c:	4a08      	ldr	r2, [pc, #32]	; (8004dc0 <UART_SetConfig+0x4e4>)
 8004d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	f003 020f 	and.w	r2, r3, #15
 8004da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4422      	add	r2, r4
 8004db0:	609a      	str	r2, [r3, #8]
}
 8004db2:	bf00      	nop
 8004db4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004db8:	46bd      	mov	sp, r7
 8004dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dbe:	bf00      	nop
 8004dc0:	51eb851f 	.word	0x51eb851f

08004dc4 <__errno>:
 8004dc4:	4b01      	ldr	r3, [pc, #4]	; (8004dcc <__errno+0x8>)
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	2000000c 	.word	0x2000000c

08004dd0 <__libc_init_array>:
 8004dd0:	b570      	push	{r4, r5, r6, lr}
 8004dd2:	4d0d      	ldr	r5, [pc, #52]	; (8004e08 <__libc_init_array+0x38>)
 8004dd4:	4c0d      	ldr	r4, [pc, #52]	; (8004e0c <__libc_init_array+0x3c>)
 8004dd6:	1b64      	subs	r4, r4, r5
 8004dd8:	10a4      	asrs	r4, r4, #2
 8004dda:	2600      	movs	r6, #0
 8004ddc:	42a6      	cmp	r6, r4
 8004dde:	d109      	bne.n	8004df4 <__libc_init_array+0x24>
 8004de0:	4d0b      	ldr	r5, [pc, #44]	; (8004e10 <__libc_init_array+0x40>)
 8004de2:	4c0c      	ldr	r4, [pc, #48]	; (8004e14 <__libc_init_array+0x44>)
 8004de4:	f000 fc8e 	bl	8005704 <_init>
 8004de8:	1b64      	subs	r4, r4, r5
 8004dea:	10a4      	asrs	r4, r4, #2
 8004dec:	2600      	movs	r6, #0
 8004dee:	42a6      	cmp	r6, r4
 8004df0:	d105      	bne.n	8004dfe <__libc_init_array+0x2e>
 8004df2:	bd70      	pop	{r4, r5, r6, pc}
 8004df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df8:	4798      	blx	r3
 8004dfa:	3601      	adds	r6, #1
 8004dfc:	e7ee      	b.n	8004ddc <__libc_init_array+0xc>
 8004dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e02:	4798      	blx	r3
 8004e04:	3601      	adds	r6, #1
 8004e06:	e7f2      	b.n	8004dee <__libc_init_array+0x1e>
 8004e08:	08005788 	.word	0x08005788
 8004e0c:	08005788 	.word	0x08005788
 8004e10:	08005788 	.word	0x08005788
 8004e14:	0800578c 	.word	0x0800578c

08004e18 <memset>:
 8004e18:	4402      	add	r2, r0
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d100      	bne.n	8004e22 <memset+0xa>
 8004e20:	4770      	bx	lr
 8004e22:	f803 1b01 	strb.w	r1, [r3], #1
 8004e26:	e7f9      	b.n	8004e1c <memset+0x4>

08004e28 <_vsiprintf_r>:
 8004e28:	b500      	push	{lr}
 8004e2a:	b09b      	sub	sp, #108	; 0x6c
 8004e2c:	9100      	str	r1, [sp, #0]
 8004e2e:	9104      	str	r1, [sp, #16]
 8004e30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e34:	9105      	str	r1, [sp, #20]
 8004e36:	9102      	str	r1, [sp, #8]
 8004e38:	4905      	ldr	r1, [pc, #20]	; (8004e50 <_vsiprintf_r+0x28>)
 8004e3a:	9103      	str	r1, [sp, #12]
 8004e3c:	4669      	mov	r1, sp
 8004e3e:	f000 f86f 	bl	8004f20 <_svfiprintf_r>
 8004e42:	9b00      	ldr	r3, [sp, #0]
 8004e44:	2200      	movs	r2, #0
 8004e46:	701a      	strb	r2, [r3, #0]
 8004e48:	b01b      	add	sp, #108	; 0x6c
 8004e4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e4e:	bf00      	nop
 8004e50:	ffff0208 	.word	0xffff0208

08004e54 <vsiprintf>:
 8004e54:	4613      	mov	r3, r2
 8004e56:	460a      	mov	r2, r1
 8004e58:	4601      	mov	r1, r0
 8004e5a:	4802      	ldr	r0, [pc, #8]	; (8004e64 <vsiprintf+0x10>)
 8004e5c:	6800      	ldr	r0, [r0, #0]
 8004e5e:	f7ff bfe3 	b.w	8004e28 <_vsiprintf_r>
 8004e62:	bf00      	nop
 8004e64:	2000000c 	.word	0x2000000c

08004e68 <__ssputs_r>:
 8004e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e6c:	688e      	ldr	r6, [r1, #8]
 8004e6e:	429e      	cmp	r6, r3
 8004e70:	4682      	mov	sl, r0
 8004e72:	460c      	mov	r4, r1
 8004e74:	4690      	mov	r8, r2
 8004e76:	461f      	mov	r7, r3
 8004e78:	d838      	bhi.n	8004eec <__ssputs_r+0x84>
 8004e7a:	898a      	ldrh	r2, [r1, #12]
 8004e7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e80:	d032      	beq.n	8004ee8 <__ssputs_r+0x80>
 8004e82:	6825      	ldr	r5, [r4, #0]
 8004e84:	6909      	ldr	r1, [r1, #16]
 8004e86:	eba5 0901 	sub.w	r9, r5, r1
 8004e8a:	6965      	ldr	r5, [r4, #20]
 8004e8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e94:	3301      	adds	r3, #1
 8004e96:	444b      	add	r3, r9
 8004e98:	106d      	asrs	r5, r5, #1
 8004e9a:	429d      	cmp	r5, r3
 8004e9c:	bf38      	it	cc
 8004e9e:	461d      	movcc	r5, r3
 8004ea0:	0553      	lsls	r3, r2, #21
 8004ea2:	d531      	bpl.n	8004f08 <__ssputs_r+0xa0>
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	f000 fb63 	bl	8005570 <_malloc_r>
 8004eaa:	4606      	mov	r6, r0
 8004eac:	b950      	cbnz	r0, 8004ec4 <__ssputs_r+0x5c>
 8004eae:	230c      	movs	r3, #12
 8004eb0:	f8ca 3000 	str.w	r3, [sl]
 8004eb4:	89a3      	ldrh	r3, [r4, #12]
 8004eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eba:	81a3      	strh	r3, [r4, #12]
 8004ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec4:	6921      	ldr	r1, [r4, #16]
 8004ec6:	464a      	mov	r2, r9
 8004ec8:	f000 fabe 	bl	8005448 <memcpy>
 8004ecc:	89a3      	ldrh	r3, [r4, #12]
 8004ece:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed6:	81a3      	strh	r3, [r4, #12]
 8004ed8:	6126      	str	r6, [r4, #16]
 8004eda:	6165      	str	r5, [r4, #20]
 8004edc:	444e      	add	r6, r9
 8004ede:	eba5 0509 	sub.w	r5, r5, r9
 8004ee2:	6026      	str	r6, [r4, #0]
 8004ee4:	60a5      	str	r5, [r4, #8]
 8004ee6:	463e      	mov	r6, r7
 8004ee8:	42be      	cmp	r6, r7
 8004eea:	d900      	bls.n	8004eee <__ssputs_r+0x86>
 8004eec:	463e      	mov	r6, r7
 8004eee:	6820      	ldr	r0, [r4, #0]
 8004ef0:	4632      	mov	r2, r6
 8004ef2:	4641      	mov	r1, r8
 8004ef4:	f000 fab6 	bl	8005464 <memmove>
 8004ef8:	68a3      	ldr	r3, [r4, #8]
 8004efa:	1b9b      	subs	r3, r3, r6
 8004efc:	60a3      	str	r3, [r4, #8]
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	4433      	add	r3, r6
 8004f02:	6023      	str	r3, [r4, #0]
 8004f04:	2000      	movs	r0, #0
 8004f06:	e7db      	b.n	8004ec0 <__ssputs_r+0x58>
 8004f08:	462a      	mov	r2, r5
 8004f0a:	f000 fba5 	bl	8005658 <_realloc_r>
 8004f0e:	4606      	mov	r6, r0
 8004f10:	2800      	cmp	r0, #0
 8004f12:	d1e1      	bne.n	8004ed8 <__ssputs_r+0x70>
 8004f14:	6921      	ldr	r1, [r4, #16]
 8004f16:	4650      	mov	r0, sl
 8004f18:	f000 fabe 	bl	8005498 <_free_r>
 8004f1c:	e7c7      	b.n	8004eae <__ssputs_r+0x46>
	...

08004f20 <_svfiprintf_r>:
 8004f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f24:	4698      	mov	r8, r3
 8004f26:	898b      	ldrh	r3, [r1, #12]
 8004f28:	061b      	lsls	r3, r3, #24
 8004f2a:	b09d      	sub	sp, #116	; 0x74
 8004f2c:	4607      	mov	r7, r0
 8004f2e:	460d      	mov	r5, r1
 8004f30:	4614      	mov	r4, r2
 8004f32:	d50e      	bpl.n	8004f52 <_svfiprintf_r+0x32>
 8004f34:	690b      	ldr	r3, [r1, #16]
 8004f36:	b963      	cbnz	r3, 8004f52 <_svfiprintf_r+0x32>
 8004f38:	2140      	movs	r1, #64	; 0x40
 8004f3a:	f000 fb19 	bl	8005570 <_malloc_r>
 8004f3e:	6028      	str	r0, [r5, #0]
 8004f40:	6128      	str	r0, [r5, #16]
 8004f42:	b920      	cbnz	r0, 8004f4e <_svfiprintf_r+0x2e>
 8004f44:	230c      	movs	r3, #12
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4c:	e0d1      	b.n	80050f2 <_svfiprintf_r+0x1d2>
 8004f4e:	2340      	movs	r3, #64	; 0x40
 8004f50:	616b      	str	r3, [r5, #20]
 8004f52:	2300      	movs	r3, #0
 8004f54:	9309      	str	r3, [sp, #36]	; 0x24
 8004f56:	2320      	movs	r3, #32
 8004f58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f60:	2330      	movs	r3, #48	; 0x30
 8004f62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800510c <_svfiprintf_r+0x1ec>
 8004f66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f6a:	f04f 0901 	mov.w	r9, #1
 8004f6e:	4623      	mov	r3, r4
 8004f70:	469a      	mov	sl, r3
 8004f72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f76:	b10a      	cbz	r2, 8004f7c <_svfiprintf_r+0x5c>
 8004f78:	2a25      	cmp	r2, #37	; 0x25
 8004f7a:	d1f9      	bne.n	8004f70 <_svfiprintf_r+0x50>
 8004f7c:	ebba 0b04 	subs.w	fp, sl, r4
 8004f80:	d00b      	beq.n	8004f9a <_svfiprintf_r+0x7a>
 8004f82:	465b      	mov	r3, fp
 8004f84:	4622      	mov	r2, r4
 8004f86:	4629      	mov	r1, r5
 8004f88:	4638      	mov	r0, r7
 8004f8a:	f7ff ff6d 	bl	8004e68 <__ssputs_r>
 8004f8e:	3001      	adds	r0, #1
 8004f90:	f000 80aa 	beq.w	80050e8 <_svfiprintf_r+0x1c8>
 8004f94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f96:	445a      	add	r2, fp
 8004f98:	9209      	str	r2, [sp, #36]	; 0x24
 8004f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 80a2 	beq.w	80050e8 <_svfiprintf_r+0x1c8>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8004faa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fae:	f10a 0a01 	add.w	sl, sl, #1
 8004fb2:	9304      	str	r3, [sp, #16]
 8004fb4:	9307      	str	r3, [sp, #28]
 8004fb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fba:	931a      	str	r3, [sp, #104]	; 0x68
 8004fbc:	4654      	mov	r4, sl
 8004fbe:	2205      	movs	r2, #5
 8004fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fc4:	4851      	ldr	r0, [pc, #324]	; (800510c <_svfiprintf_r+0x1ec>)
 8004fc6:	f7fb f90b 	bl	80001e0 <memchr>
 8004fca:	9a04      	ldr	r2, [sp, #16]
 8004fcc:	b9d8      	cbnz	r0, 8005006 <_svfiprintf_r+0xe6>
 8004fce:	06d0      	lsls	r0, r2, #27
 8004fd0:	bf44      	itt	mi
 8004fd2:	2320      	movmi	r3, #32
 8004fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fd8:	0711      	lsls	r1, r2, #28
 8004fda:	bf44      	itt	mi
 8004fdc:	232b      	movmi	r3, #43	; 0x2b
 8004fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8004fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8004fe8:	d015      	beq.n	8005016 <_svfiprintf_r+0xf6>
 8004fea:	9a07      	ldr	r2, [sp, #28]
 8004fec:	4654      	mov	r4, sl
 8004fee:	2000      	movs	r0, #0
 8004ff0:	f04f 0c0a 	mov.w	ip, #10
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ffa:	3b30      	subs	r3, #48	; 0x30
 8004ffc:	2b09      	cmp	r3, #9
 8004ffe:	d94e      	bls.n	800509e <_svfiprintf_r+0x17e>
 8005000:	b1b0      	cbz	r0, 8005030 <_svfiprintf_r+0x110>
 8005002:	9207      	str	r2, [sp, #28]
 8005004:	e014      	b.n	8005030 <_svfiprintf_r+0x110>
 8005006:	eba0 0308 	sub.w	r3, r0, r8
 800500a:	fa09 f303 	lsl.w	r3, r9, r3
 800500e:	4313      	orrs	r3, r2
 8005010:	9304      	str	r3, [sp, #16]
 8005012:	46a2      	mov	sl, r4
 8005014:	e7d2      	b.n	8004fbc <_svfiprintf_r+0x9c>
 8005016:	9b03      	ldr	r3, [sp, #12]
 8005018:	1d19      	adds	r1, r3, #4
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	9103      	str	r1, [sp, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	bfbb      	ittet	lt
 8005022:	425b      	neglt	r3, r3
 8005024:	f042 0202 	orrlt.w	r2, r2, #2
 8005028:	9307      	strge	r3, [sp, #28]
 800502a:	9307      	strlt	r3, [sp, #28]
 800502c:	bfb8      	it	lt
 800502e:	9204      	strlt	r2, [sp, #16]
 8005030:	7823      	ldrb	r3, [r4, #0]
 8005032:	2b2e      	cmp	r3, #46	; 0x2e
 8005034:	d10c      	bne.n	8005050 <_svfiprintf_r+0x130>
 8005036:	7863      	ldrb	r3, [r4, #1]
 8005038:	2b2a      	cmp	r3, #42	; 0x2a
 800503a:	d135      	bne.n	80050a8 <_svfiprintf_r+0x188>
 800503c:	9b03      	ldr	r3, [sp, #12]
 800503e:	1d1a      	adds	r2, r3, #4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	9203      	str	r2, [sp, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	bfb8      	it	lt
 8005048:	f04f 33ff 	movlt.w	r3, #4294967295
 800504c:	3402      	adds	r4, #2
 800504e:	9305      	str	r3, [sp, #20]
 8005050:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800511c <_svfiprintf_r+0x1fc>
 8005054:	7821      	ldrb	r1, [r4, #0]
 8005056:	2203      	movs	r2, #3
 8005058:	4650      	mov	r0, sl
 800505a:	f7fb f8c1 	bl	80001e0 <memchr>
 800505e:	b140      	cbz	r0, 8005072 <_svfiprintf_r+0x152>
 8005060:	2340      	movs	r3, #64	; 0x40
 8005062:	eba0 000a 	sub.w	r0, r0, sl
 8005066:	fa03 f000 	lsl.w	r0, r3, r0
 800506a:	9b04      	ldr	r3, [sp, #16]
 800506c:	4303      	orrs	r3, r0
 800506e:	3401      	adds	r4, #1
 8005070:	9304      	str	r3, [sp, #16]
 8005072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005076:	4826      	ldr	r0, [pc, #152]	; (8005110 <_svfiprintf_r+0x1f0>)
 8005078:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800507c:	2206      	movs	r2, #6
 800507e:	f7fb f8af 	bl	80001e0 <memchr>
 8005082:	2800      	cmp	r0, #0
 8005084:	d038      	beq.n	80050f8 <_svfiprintf_r+0x1d8>
 8005086:	4b23      	ldr	r3, [pc, #140]	; (8005114 <_svfiprintf_r+0x1f4>)
 8005088:	bb1b      	cbnz	r3, 80050d2 <_svfiprintf_r+0x1b2>
 800508a:	9b03      	ldr	r3, [sp, #12]
 800508c:	3307      	adds	r3, #7
 800508e:	f023 0307 	bic.w	r3, r3, #7
 8005092:	3308      	adds	r3, #8
 8005094:	9303      	str	r3, [sp, #12]
 8005096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005098:	4433      	add	r3, r6
 800509a:	9309      	str	r3, [sp, #36]	; 0x24
 800509c:	e767      	b.n	8004f6e <_svfiprintf_r+0x4e>
 800509e:	fb0c 3202 	mla	r2, ip, r2, r3
 80050a2:	460c      	mov	r4, r1
 80050a4:	2001      	movs	r0, #1
 80050a6:	e7a5      	b.n	8004ff4 <_svfiprintf_r+0xd4>
 80050a8:	2300      	movs	r3, #0
 80050aa:	3401      	adds	r4, #1
 80050ac:	9305      	str	r3, [sp, #20]
 80050ae:	4619      	mov	r1, r3
 80050b0:	f04f 0c0a 	mov.w	ip, #10
 80050b4:	4620      	mov	r0, r4
 80050b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050ba:	3a30      	subs	r2, #48	; 0x30
 80050bc:	2a09      	cmp	r2, #9
 80050be:	d903      	bls.n	80050c8 <_svfiprintf_r+0x1a8>
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0c5      	beq.n	8005050 <_svfiprintf_r+0x130>
 80050c4:	9105      	str	r1, [sp, #20]
 80050c6:	e7c3      	b.n	8005050 <_svfiprintf_r+0x130>
 80050c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80050cc:	4604      	mov	r4, r0
 80050ce:	2301      	movs	r3, #1
 80050d0:	e7f0      	b.n	80050b4 <_svfiprintf_r+0x194>
 80050d2:	ab03      	add	r3, sp, #12
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	462a      	mov	r2, r5
 80050d8:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <_svfiprintf_r+0x1f8>)
 80050da:	a904      	add	r1, sp, #16
 80050dc:	4638      	mov	r0, r7
 80050de:	f3af 8000 	nop.w
 80050e2:	1c42      	adds	r2, r0, #1
 80050e4:	4606      	mov	r6, r0
 80050e6:	d1d6      	bne.n	8005096 <_svfiprintf_r+0x176>
 80050e8:	89ab      	ldrh	r3, [r5, #12]
 80050ea:	065b      	lsls	r3, r3, #25
 80050ec:	f53f af2c 	bmi.w	8004f48 <_svfiprintf_r+0x28>
 80050f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050f2:	b01d      	add	sp, #116	; 0x74
 80050f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f8:	ab03      	add	r3, sp, #12
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	462a      	mov	r2, r5
 80050fe:	4b06      	ldr	r3, [pc, #24]	; (8005118 <_svfiprintf_r+0x1f8>)
 8005100:	a904      	add	r1, sp, #16
 8005102:	4638      	mov	r0, r7
 8005104:	f000 f87a 	bl	80051fc <_printf_i>
 8005108:	e7eb      	b.n	80050e2 <_svfiprintf_r+0x1c2>
 800510a:	bf00      	nop
 800510c:	0800574c 	.word	0x0800574c
 8005110:	08005756 	.word	0x08005756
 8005114:	00000000 	.word	0x00000000
 8005118:	08004e69 	.word	0x08004e69
 800511c:	08005752 	.word	0x08005752

08005120 <_printf_common>:
 8005120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005124:	4616      	mov	r6, r2
 8005126:	4699      	mov	r9, r3
 8005128:	688a      	ldr	r2, [r1, #8]
 800512a:	690b      	ldr	r3, [r1, #16]
 800512c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005130:	4293      	cmp	r3, r2
 8005132:	bfb8      	it	lt
 8005134:	4613      	movlt	r3, r2
 8005136:	6033      	str	r3, [r6, #0]
 8005138:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800513c:	4607      	mov	r7, r0
 800513e:	460c      	mov	r4, r1
 8005140:	b10a      	cbz	r2, 8005146 <_printf_common+0x26>
 8005142:	3301      	adds	r3, #1
 8005144:	6033      	str	r3, [r6, #0]
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	0699      	lsls	r1, r3, #26
 800514a:	bf42      	ittt	mi
 800514c:	6833      	ldrmi	r3, [r6, #0]
 800514e:	3302      	addmi	r3, #2
 8005150:	6033      	strmi	r3, [r6, #0]
 8005152:	6825      	ldr	r5, [r4, #0]
 8005154:	f015 0506 	ands.w	r5, r5, #6
 8005158:	d106      	bne.n	8005168 <_printf_common+0x48>
 800515a:	f104 0a19 	add.w	sl, r4, #25
 800515e:	68e3      	ldr	r3, [r4, #12]
 8005160:	6832      	ldr	r2, [r6, #0]
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	42ab      	cmp	r3, r5
 8005166:	dc26      	bgt.n	80051b6 <_printf_common+0x96>
 8005168:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800516c:	1e13      	subs	r3, r2, #0
 800516e:	6822      	ldr	r2, [r4, #0]
 8005170:	bf18      	it	ne
 8005172:	2301      	movne	r3, #1
 8005174:	0692      	lsls	r2, r2, #26
 8005176:	d42b      	bmi.n	80051d0 <_printf_common+0xb0>
 8005178:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800517c:	4649      	mov	r1, r9
 800517e:	4638      	mov	r0, r7
 8005180:	47c0      	blx	r8
 8005182:	3001      	adds	r0, #1
 8005184:	d01e      	beq.n	80051c4 <_printf_common+0xa4>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	68e5      	ldr	r5, [r4, #12]
 800518a:	6832      	ldr	r2, [r6, #0]
 800518c:	f003 0306 	and.w	r3, r3, #6
 8005190:	2b04      	cmp	r3, #4
 8005192:	bf08      	it	eq
 8005194:	1aad      	subeq	r5, r5, r2
 8005196:	68a3      	ldr	r3, [r4, #8]
 8005198:	6922      	ldr	r2, [r4, #16]
 800519a:	bf0c      	ite	eq
 800519c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051a0:	2500      	movne	r5, #0
 80051a2:	4293      	cmp	r3, r2
 80051a4:	bfc4      	itt	gt
 80051a6:	1a9b      	subgt	r3, r3, r2
 80051a8:	18ed      	addgt	r5, r5, r3
 80051aa:	2600      	movs	r6, #0
 80051ac:	341a      	adds	r4, #26
 80051ae:	42b5      	cmp	r5, r6
 80051b0:	d11a      	bne.n	80051e8 <_printf_common+0xc8>
 80051b2:	2000      	movs	r0, #0
 80051b4:	e008      	b.n	80051c8 <_printf_common+0xa8>
 80051b6:	2301      	movs	r3, #1
 80051b8:	4652      	mov	r2, sl
 80051ba:	4649      	mov	r1, r9
 80051bc:	4638      	mov	r0, r7
 80051be:	47c0      	blx	r8
 80051c0:	3001      	adds	r0, #1
 80051c2:	d103      	bne.n	80051cc <_printf_common+0xac>
 80051c4:	f04f 30ff 	mov.w	r0, #4294967295
 80051c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051cc:	3501      	adds	r5, #1
 80051ce:	e7c6      	b.n	800515e <_printf_common+0x3e>
 80051d0:	18e1      	adds	r1, r4, r3
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	2030      	movs	r0, #48	; 0x30
 80051d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051da:	4422      	add	r2, r4
 80051dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051e4:	3302      	adds	r3, #2
 80051e6:	e7c7      	b.n	8005178 <_printf_common+0x58>
 80051e8:	2301      	movs	r3, #1
 80051ea:	4622      	mov	r2, r4
 80051ec:	4649      	mov	r1, r9
 80051ee:	4638      	mov	r0, r7
 80051f0:	47c0      	blx	r8
 80051f2:	3001      	adds	r0, #1
 80051f4:	d0e6      	beq.n	80051c4 <_printf_common+0xa4>
 80051f6:	3601      	adds	r6, #1
 80051f8:	e7d9      	b.n	80051ae <_printf_common+0x8e>
	...

080051fc <_printf_i>:
 80051fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005200:	7e0f      	ldrb	r7, [r1, #24]
 8005202:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005204:	2f78      	cmp	r7, #120	; 0x78
 8005206:	4691      	mov	r9, r2
 8005208:	4680      	mov	r8, r0
 800520a:	460c      	mov	r4, r1
 800520c:	469a      	mov	sl, r3
 800520e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005212:	d807      	bhi.n	8005224 <_printf_i+0x28>
 8005214:	2f62      	cmp	r7, #98	; 0x62
 8005216:	d80a      	bhi.n	800522e <_printf_i+0x32>
 8005218:	2f00      	cmp	r7, #0
 800521a:	f000 80d8 	beq.w	80053ce <_printf_i+0x1d2>
 800521e:	2f58      	cmp	r7, #88	; 0x58
 8005220:	f000 80a3 	beq.w	800536a <_printf_i+0x16e>
 8005224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005228:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800522c:	e03a      	b.n	80052a4 <_printf_i+0xa8>
 800522e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005232:	2b15      	cmp	r3, #21
 8005234:	d8f6      	bhi.n	8005224 <_printf_i+0x28>
 8005236:	a101      	add	r1, pc, #4	; (adr r1, 800523c <_printf_i+0x40>)
 8005238:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800523c:	08005295 	.word	0x08005295
 8005240:	080052a9 	.word	0x080052a9
 8005244:	08005225 	.word	0x08005225
 8005248:	08005225 	.word	0x08005225
 800524c:	08005225 	.word	0x08005225
 8005250:	08005225 	.word	0x08005225
 8005254:	080052a9 	.word	0x080052a9
 8005258:	08005225 	.word	0x08005225
 800525c:	08005225 	.word	0x08005225
 8005260:	08005225 	.word	0x08005225
 8005264:	08005225 	.word	0x08005225
 8005268:	080053b5 	.word	0x080053b5
 800526c:	080052d9 	.word	0x080052d9
 8005270:	08005397 	.word	0x08005397
 8005274:	08005225 	.word	0x08005225
 8005278:	08005225 	.word	0x08005225
 800527c:	080053d7 	.word	0x080053d7
 8005280:	08005225 	.word	0x08005225
 8005284:	080052d9 	.word	0x080052d9
 8005288:	08005225 	.word	0x08005225
 800528c:	08005225 	.word	0x08005225
 8005290:	0800539f 	.word	0x0800539f
 8005294:	682b      	ldr	r3, [r5, #0]
 8005296:	1d1a      	adds	r2, r3, #4
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	602a      	str	r2, [r5, #0]
 800529c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052a4:	2301      	movs	r3, #1
 80052a6:	e0a3      	b.n	80053f0 <_printf_i+0x1f4>
 80052a8:	6820      	ldr	r0, [r4, #0]
 80052aa:	6829      	ldr	r1, [r5, #0]
 80052ac:	0606      	lsls	r6, r0, #24
 80052ae:	f101 0304 	add.w	r3, r1, #4
 80052b2:	d50a      	bpl.n	80052ca <_printf_i+0xce>
 80052b4:	680e      	ldr	r6, [r1, #0]
 80052b6:	602b      	str	r3, [r5, #0]
 80052b8:	2e00      	cmp	r6, #0
 80052ba:	da03      	bge.n	80052c4 <_printf_i+0xc8>
 80052bc:	232d      	movs	r3, #45	; 0x2d
 80052be:	4276      	negs	r6, r6
 80052c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052c4:	485e      	ldr	r0, [pc, #376]	; (8005440 <_printf_i+0x244>)
 80052c6:	230a      	movs	r3, #10
 80052c8:	e019      	b.n	80052fe <_printf_i+0x102>
 80052ca:	680e      	ldr	r6, [r1, #0]
 80052cc:	602b      	str	r3, [r5, #0]
 80052ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052d2:	bf18      	it	ne
 80052d4:	b236      	sxthne	r6, r6
 80052d6:	e7ef      	b.n	80052b8 <_printf_i+0xbc>
 80052d8:	682b      	ldr	r3, [r5, #0]
 80052da:	6820      	ldr	r0, [r4, #0]
 80052dc:	1d19      	adds	r1, r3, #4
 80052de:	6029      	str	r1, [r5, #0]
 80052e0:	0601      	lsls	r1, r0, #24
 80052e2:	d501      	bpl.n	80052e8 <_printf_i+0xec>
 80052e4:	681e      	ldr	r6, [r3, #0]
 80052e6:	e002      	b.n	80052ee <_printf_i+0xf2>
 80052e8:	0646      	lsls	r6, r0, #25
 80052ea:	d5fb      	bpl.n	80052e4 <_printf_i+0xe8>
 80052ec:	881e      	ldrh	r6, [r3, #0]
 80052ee:	4854      	ldr	r0, [pc, #336]	; (8005440 <_printf_i+0x244>)
 80052f0:	2f6f      	cmp	r7, #111	; 0x6f
 80052f2:	bf0c      	ite	eq
 80052f4:	2308      	moveq	r3, #8
 80052f6:	230a      	movne	r3, #10
 80052f8:	2100      	movs	r1, #0
 80052fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052fe:	6865      	ldr	r5, [r4, #4]
 8005300:	60a5      	str	r5, [r4, #8]
 8005302:	2d00      	cmp	r5, #0
 8005304:	bfa2      	ittt	ge
 8005306:	6821      	ldrge	r1, [r4, #0]
 8005308:	f021 0104 	bicge.w	r1, r1, #4
 800530c:	6021      	strge	r1, [r4, #0]
 800530e:	b90e      	cbnz	r6, 8005314 <_printf_i+0x118>
 8005310:	2d00      	cmp	r5, #0
 8005312:	d04d      	beq.n	80053b0 <_printf_i+0x1b4>
 8005314:	4615      	mov	r5, r2
 8005316:	fbb6 f1f3 	udiv	r1, r6, r3
 800531a:	fb03 6711 	mls	r7, r3, r1, r6
 800531e:	5dc7      	ldrb	r7, [r0, r7]
 8005320:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005324:	4637      	mov	r7, r6
 8005326:	42bb      	cmp	r3, r7
 8005328:	460e      	mov	r6, r1
 800532a:	d9f4      	bls.n	8005316 <_printf_i+0x11a>
 800532c:	2b08      	cmp	r3, #8
 800532e:	d10b      	bne.n	8005348 <_printf_i+0x14c>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	07de      	lsls	r6, r3, #31
 8005334:	d508      	bpl.n	8005348 <_printf_i+0x14c>
 8005336:	6923      	ldr	r3, [r4, #16]
 8005338:	6861      	ldr	r1, [r4, #4]
 800533a:	4299      	cmp	r1, r3
 800533c:	bfde      	ittt	le
 800533e:	2330      	movle	r3, #48	; 0x30
 8005340:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005344:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005348:	1b52      	subs	r2, r2, r5
 800534a:	6122      	str	r2, [r4, #16]
 800534c:	f8cd a000 	str.w	sl, [sp]
 8005350:	464b      	mov	r3, r9
 8005352:	aa03      	add	r2, sp, #12
 8005354:	4621      	mov	r1, r4
 8005356:	4640      	mov	r0, r8
 8005358:	f7ff fee2 	bl	8005120 <_printf_common>
 800535c:	3001      	adds	r0, #1
 800535e:	d14c      	bne.n	80053fa <_printf_i+0x1fe>
 8005360:	f04f 30ff 	mov.w	r0, #4294967295
 8005364:	b004      	add	sp, #16
 8005366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800536a:	4835      	ldr	r0, [pc, #212]	; (8005440 <_printf_i+0x244>)
 800536c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005370:	6829      	ldr	r1, [r5, #0]
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	f851 6b04 	ldr.w	r6, [r1], #4
 8005378:	6029      	str	r1, [r5, #0]
 800537a:	061d      	lsls	r5, r3, #24
 800537c:	d514      	bpl.n	80053a8 <_printf_i+0x1ac>
 800537e:	07df      	lsls	r7, r3, #31
 8005380:	bf44      	itt	mi
 8005382:	f043 0320 	orrmi.w	r3, r3, #32
 8005386:	6023      	strmi	r3, [r4, #0]
 8005388:	b91e      	cbnz	r6, 8005392 <_printf_i+0x196>
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	f023 0320 	bic.w	r3, r3, #32
 8005390:	6023      	str	r3, [r4, #0]
 8005392:	2310      	movs	r3, #16
 8005394:	e7b0      	b.n	80052f8 <_printf_i+0xfc>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	f043 0320 	orr.w	r3, r3, #32
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	2378      	movs	r3, #120	; 0x78
 80053a0:	4828      	ldr	r0, [pc, #160]	; (8005444 <_printf_i+0x248>)
 80053a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053a6:	e7e3      	b.n	8005370 <_printf_i+0x174>
 80053a8:	0659      	lsls	r1, r3, #25
 80053aa:	bf48      	it	mi
 80053ac:	b2b6      	uxthmi	r6, r6
 80053ae:	e7e6      	b.n	800537e <_printf_i+0x182>
 80053b0:	4615      	mov	r5, r2
 80053b2:	e7bb      	b.n	800532c <_printf_i+0x130>
 80053b4:	682b      	ldr	r3, [r5, #0]
 80053b6:	6826      	ldr	r6, [r4, #0]
 80053b8:	6961      	ldr	r1, [r4, #20]
 80053ba:	1d18      	adds	r0, r3, #4
 80053bc:	6028      	str	r0, [r5, #0]
 80053be:	0635      	lsls	r5, r6, #24
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	d501      	bpl.n	80053c8 <_printf_i+0x1cc>
 80053c4:	6019      	str	r1, [r3, #0]
 80053c6:	e002      	b.n	80053ce <_printf_i+0x1d2>
 80053c8:	0670      	lsls	r0, r6, #25
 80053ca:	d5fb      	bpl.n	80053c4 <_printf_i+0x1c8>
 80053cc:	8019      	strh	r1, [r3, #0]
 80053ce:	2300      	movs	r3, #0
 80053d0:	6123      	str	r3, [r4, #16]
 80053d2:	4615      	mov	r5, r2
 80053d4:	e7ba      	b.n	800534c <_printf_i+0x150>
 80053d6:	682b      	ldr	r3, [r5, #0]
 80053d8:	1d1a      	adds	r2, r3, #4
 80053da:	602a      	str	r2, [r5, #0]
 80053dc:	681d      	ldr	r5, [r3, #0]
 80053de:	6862      	ldr	r2, [r4, #4]
 80053e0:	2100      	movs	r1, #0
 80053e2:	4628      	mov	r0, r5
 80053e4:	f7fa fefc 	bl	80001e0 <memchr>
 80053e8:	b108      	cbz	r0, 80053ee <_printf_i+0x1f2>
 80053ea:	1b40      	subs	r0, r0, r5
 80053ec:	6060      	str	r0, [r4, #4]
 80053ee:	6863      	ldr	r3, [r4, #4]
 80053f0:	6123      	str	r3, [r4, #16]
 80053f2:	2300      	movs	r3, #0
 80053f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053f8:	e7a8      	b.n	800534c <_printf_i+0x150>
 80053fa:	6923      	ldr	r3, [r4, #16]
 80053fc:	462a      	mov	r2, r5
 80053fe:	4649      	mov	r1, r9
 8005400:	4640      	mov	r0, r8
 8005402:	47d0      	blx	sl
 8005404:	3001      	adds	r0, #1
 8005406:	d0ab      	beq.n	8005360 <_printf_i+0x164>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	079b      	lsls	r3, r3, #30
 800540c:	d413      	bmi.n	8005436 <_printf_i+0x23a>
 800540e:	68e0      	ldr	r0, [r4, #12]
 8005410:	9b03      	ldr	r3, [sp, #12]
 8005412:	4298      	cmp	r0, r3
 8005414:	bfb8      	it	lt
 8005416:	4618      	movlt	r0, r3
 8005418:	e7a4      	b.n	8005364 <_printf_i+0x168>
 800541a:	2301      	movs	r3, #1
 800541c:	4632      	mov	r2, r6
 800541e:	4649      	mov	r1, r9
 8005420:	4640      	mov	r0, r8
 8005422:	47d0      	blx	sl
 8005424:	3001      	adds	r0, #1
 8005426:	d09b      	beq.n	8005360 <_printf_i+0x164>
 8005428:	3501      	adds	r5, #1
 800542a:	68e3      	ldr	r3, [r4, #12]
 800542c:	9903      	ldr	r1, [sp, #12]
 800542e:	1a5b      	subs	r3, r3, r1
 8005430:	42ab      	cmp	r3, r5
 8005432:	dcf2      	bgt.n	800541a <_printf_i+0x21e>
 8005434:	e7eb      	b.n	800540e <_printf_i+0x212>
 8005436:	2500      	movs	r5, #0
 8005438:	f104 0619 	add.w	r6, r4, #25
 800543c:	e7f5      	b.n	800542a <_printf_i+0x22e>
 800543e:	bf00      	nop
 8005440:	0800575d 	.word	0x0800575d
 8005444:	0800576e 	.word	0x0800576e

08005448 <memcpy>:
 8005448:	440a      	add	r2, r1
 800544a:	4291      	cmp	r1, r2
 800544c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005450:	d100      	bne.n	8005454 <memcpy+0xc>
 8005452:	4770      	bx	lr
 8005454:	b510      	push	{r4, lr}
 8005456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800545a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800545e:	4291      	cmp	r1, r2
 8005460:	d1f9      	bne.n	8005456 <memcpy+0xe>
 8005462:	bd10      	pop	{r4, pc}

08005464 <memmove>:
 8005464:	4288      	cmp	r0, r1
 8005466:	b510      	push	{r4, lr}
 8005468:	eb01 0402 	add.w	r4, r1, r2
 800546c:	d902      	bls.n	8005474 <memmove+0x10>
 800546e:	4284      	cmp	r4, r0
 8005470:	4623      	mov	r3, r4
 8005472:	d807      	bhi.n	8005484 <memmove+0x20>
 8005474:	1e43      	subs	r3, r0, #1
 8005476:	42a1      	cmp	r1, r4
 8005478:	d008      	beq.n	800548c <memmove+0x28>
 800547a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800547e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005482:	e7f8      	b.n	8005476 <memmove+0x12>
 8005484:	4402      	add	r2, r0
 8005486:	4601      	mov	r1, r0
 8005488:	428a      	cmp	r2, r1
 800548a:	d100      	bne.n	800548e <memmove+0x2a>
 800548c:	bd10      	pop	{r4, pc}
 800548e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005496:	e7f7      	b.n	8005488 <memmove+0x24>

08005498 <_free_r>:
 8005498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800549a:	2900      	cmp	r1, #0
 800549c:	d044      	beq.n	8005528 <_free_r+0x90>
 800549e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054a2:	9001      	str	r0, [sp, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f1a1 0404 	sub.w	r4, r1, #4
 80054aa:	bfb8      	it	lt
 80054ac:	18e4      	addlt	r4, r4, r3
 80054ae:	f000 f913 	bl	80056d8 <__malloc_lock>
 80054b2:	4a1e      	ldr	r2, [pc, #120]	; (800552c <_free_r+0x94>)
 80054b4:	9801      	ldr	r0, [sp, #4]
 80054b6:	6813      	ldr	r3, [r2, #0]
 80054b8:	b933      	cbnz	r3, 80054c8 <_free_r+0x30>
 80054ba:	6063      	str	r3, [r4, #4]
 80054bc:	6014      	str	r4, [r2, #0]
 80054be:	b003      	add	sp, #12
 80054c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054c4:	f000 b90e 	b.w	80056e4 <__malloc_unlock>
 80054c8:	42a3      	cmp	r3, r4
 80054ca:	d908      	bls.n	80054de <_free_r+0x46>
 80054cc:	6825      	ldr	r5, [r4, #0]
 80054ce:	1961      	adds	r1, r4, r5
 80054d0:	428b      	cmp	r3, r1
 80054d2:	bf01      	itttt	eq
 80054d4:	6819      	ldreq	r1, [r3, #0]
 80054d6:	685b      	ldreq	r3, [r3, #4]
 80054d8:	1949      	addeq	r1, r1, r5
 80054da:	6021      	streq	r1, [r4, #0]
 80054dc:	e7ed      	b.n	80054ba <_free_r+0x22>
 80054de:	461a      	mov	r2, r3
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	b10b      	cbz	r3, 80054e8 <_free_r+0x50>
 80054e4:	42a3      	cmp	r3, r4
 80054e6:	d9fa      	bls.n	80054de <_free_r+0x46>
 80054e8:	6811      	ldr	r1, [r2, #0]
 80054ea:	1855      	adds	r5, r2, r1
 80054ec:	42a5      	cmp	r5, r4
 80054ee:	d10b      	bne.n	8005508 <_free_r+0x70>
 80054f0:	6824      	ldr	r4, [r4, #0]
 80054f2:	4421      	add	r1, r4
 80054f4:	1854      	adds	r4, r2, r1
 80054f6:	42a3      	cmp	r3, r4
 80054f8:	6011      	str	r1, [r2, #0]
 80054fa:	d1e0      	bne.n	80054be <_free_r+0x26>
 80054fc:	681c      	ldr	r4, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	6053      	str	r3, [r2, #4]
 8005502:	4421      	add	r1, r4
 8005504:	6011      	str	r1, [r2, #0]
 8005506:	e7da      	b.n	80054be <_free_r+0x26>
 8005508:	d902      	bls.n	8005510 <_free_r+0x78>
 800550a:	230c      	movs	r3, #12
 800550c:	6003      	str	r3, [r0, #0]
 800550e:	e7d6      	b.n	80054be <_free_r+0x26>
 8005510:	6825      	ldr	r5, [r4, #0]
 8005512:	1961      	adds	r1, r4, r5
 8005514:	428b      	cmp	r3, r1
 8005516:	bf04      	itt	eq
 8005518:	6819      	ldreq	r1, [r3, #0]
 800551a:	685b      	ldreq	r3, [r3, #4]
 800551c:	6063      	str	r3, [r4, #4]
 800551e:	bf04      	itt	eq
 8005520:	1949      	addeq	r1, r1, r5
 8005522:	6021      	streq	r1, [r4, #0]
 8005524:	6054      	str	r4, [r2, #4]
 8005526:	e7ca      	b.n	80054be <_free_r+0x26>
 8005528:	b003      	add	sp, #12
 800552a:	bd30      	pop	{r4, r5, pc}
 800552c:	20000228 	.word	0x20000228

08005530 <sbrk_aligned>:
 8005530:	b570      	push	{r4, r5, r6, lr}
 8005532:	4e0e      	ldr	r6, [pc, #56]	; (800556c <sbrk_aligned+0x3c>)
 8005534:	460c      	mov	r4, r1
 8005536:	6831      	ldr	r1, [r6, #0]
 8005538:	4605      	mov	r5, r0
 800553a:	b911      	cbnz	r1, 8005542 <sbrk_aligned+0x12>
 800553c:	f000 f8bc 	bl	80056b8 <_sbrk_r>
 8005540:	6030      	str	r0, [r6, #0]
 8005542:	4621      	mov	r1, r4
 8005544:	4628      	mov	r0, r5
 8005546:	f000 f8b7 	bl	80056b8 <_sbrk_r>
 800554a:	1c43      	adds	r3, r0, #1
 800554c:	d00a      	beq.n	8005564 <sbrk_aligned+0x34>
 800554e:	1cc4      	adds	r4, r0, #3
 8005550:	f024 0403 	bic.w	r4, r4, #3
 8005554:	42a0      	cmp	r0, r4
 8005556:	d007      	beq.n	8005568 <sbrk_aligned+0x38>
 8005558:	1a21      	subs	r1, r4, r0
 800555a:	4628      	mov	r0, r5
 800555c:	f000 f8ac 	bl	80056b8 <_sbrk_r>
 8005560:	3001      	adds	r0, #1
 8005562:	d101      	bne.n	8005568 <sbrk_aligned+0x38>
 8005564:	f04f 34ff 	mov.w	r4, #4294967295
 8005568:	4620      	mov	r0, r4
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	2000022c 	.word	0x2000022c

08005570 <_malloc_r>:
 8005570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005574:	1ccd      	adds	r5, r1, #3
 8005576:	f025 0503 	bic.w	r5, r5, #3
 800557a:	3508      	adds	r5, #8
 800557c:	2d0c      	cmp	r5, #12
 800557e:	bf38      	it	cc
 8005580:	250c      	movcc	r5, #12
 8005582:	2d00      	cmp	r5, #0
 8005584:	4607      	mov	r7, r0
 8005586:	db01      	blt.n	800558c <_malloc_r+0x1c>
 8005588:	42a9      	cmp	r1, r5
 800558a:	d905      	bls.n	8005598 <_malloc_r+0x28>
 800558c:	230c      	movs	r3, #12
 800558e:	603b      	str	r3, [r7, #0]
 8005590:	2600      	movs	r6, #0
 8005592:	4630      	mov	r0, r6
 8005594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005598:	4e2e      	ldr	r6, [pc, #184]	; (8005654 <_malloc_r+0xe4>)
 800559a:	f000 f89d 	bl	80056d8 <__malloc_lock>
 800559e:	6833      	ldr	r3, [r6, #0]
 80055a0:	461c      	mov	r4, r3
 80055a2:	bb34      	cbnz	r4, 80055f2 <_malloc_r+0x82>
 80055a4:	4629      	mov	r1, r5
 80055a6:	4638      	mov	r0, r7
 80055a8:	f7ff ffc2 	bl	8005530 <sbrk_aligned>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	4604      	mov	r4, r0
 80055b0:	d14d      	bne.n	800564e <_malloc_r+0xde>
 80055b2:	6834      	ldr	r4, [r6, #0]
 80055b4:	4626      	mov	r6, r4
 80055b6:	2e00      	cmp	r6, #0
 80055b8:	d140      	bne.n	800563c <_malloc_r+0xcc>
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	4631      	mov	r1, r6
 80055be:	4638      	mov	r0, r7
 80055c0:	eb04 0803 	add.w	r8, r4, r3
 80055c4:	f000 f878 	bl	80056b8 <_sbrk_r>
 80055c8:	4580      	cmp	r8, r0
 80055ca:	d13a      	bne.n	8005642 <_malloc_r+0xd2>
 80055cc:	6821      	ldr	r1, [r4, #0]
 80055ce:	3503      	adds	r5, #3
 80055d0:	1a6d      	subs	r5, r5, r1
 80055d2:	f025 0503 	bic.w	r5, r5, #3
 80055d6:	3508      	adds	r5, #8
 80055d8:	2d0c      	cmp	r5, #12
 80055da:	bf38      	it	cc
 80055dc:	250c      	movcc	r5, #12
 80055de:	4629      	mov	r1, r5
 80055e0:	4638      	mov	r0, r7
 80055e2:	f7ff ffa5 	bl	8005530 <sbrk_aligned>
 80055e6:	3001      	adds	r0, #1
 80055e8:	d02b      	beq.n	8005642 <_malloc_r+0xd2>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	442b      	add	r3, r5
 80055ee:	6023      	str	r3, [r4, #0]
 80055f0:	e00e      	b.n	8005610 <_malloc_r+0xa0>
 80055f2:	6822      	ldr	r2, [r4, #0]
 80055f4:	1b52      	subs	r2, r2, r5
 80055f6:	d41e      	bmi.n	8005636 <_malloc_r+0xc6>
 80055f8:	2a0b      	cmp	r2, #11
 80055fa:	d916      	bls.n	800562a <_malloc_r+0xba>
 80055fc:	1961      	adds	r1, r4, r5
 80055fe:	42a3      	cmp	r3, r4
 8005600:	6025      	str	r5, [r4, #0]
 8005602:	bf18      	it	ne
 8005604:	6059      	strne	r1, [r3, #4]
 8005606:	6863      	ldr	r3, [r4, #4]
 8005608:	bf08      	it	eq
 800560a:	6031      	streq	r1, [r6, #0]
 800560c:	5162      	str	r2, [r4, r5]
 800560e:	604b      	str	r3, [r1, #4]
 8005610:	4638      	mov	r0, r7
 8005612:	f104 060b 	add.w	r6, r4, #11
 8005616:	f000 f865 	bl	80056e4 <__malloc_unlock>
 800561a:	f026 0607 	bic.w	r6, r6, #7
 800561e:	1d23      	adds	r3, r4, #4
 8005620:	1af2      	subs	r2, r6, r3
 8005622:	d0b6      	beq.n	8005592 <_malloc_r+0x22>
 8005624:	1b9b      	subs	r3, r3, r6
 8005626:	50a3      	str	r3, [r4, r2]
 8005628:	e7b3      	b.n	8005592 <_malloc_r+0x22>
 800562a:	6862      	ldr	r2, [r4, #4]
 800562c:	42a3      	cmp	r3, r4
 800562e:	bf0c      	ite	eq
 8005630:	6032      	streq	r2, [r6, #0]
 8005632:	605a      	strne	r2, [r3, #4]
 8005634:	e7ec      	b.n	8005610 <_malloc_r+0xa0>
 8005636:	4623      	mov	r3, r4
 8005638:	6864      	ldr	r4, [r4, #4]
 800563a:	e7b2      	b.n	80055a2 <_malloc_r+0x32>
 800563c:	4634      	mov	r4, r6
 800563e:	6876      	ldr	r6, [r6, #4]
 8005640:	e7b9      	b.n	80055b6 <_malloc_r+0x46>
 8005642:	230c      	movs	r3, #12
 8005644:	603b      	str	r3, [r7, #0]
 8005646:	4638      	mov	r0, r7
 8005648:	f000 f84c 	bl	80056e4 <__malloc_unlock>
 800564c:	e7a1      	b.n	8005592 <_malloc_r+0x22>
 800564e:	6025      	str	r5, [r4, #0]
 8005650:	e7de      	b.n	8005610 <_malloc_r+0xa0>
 8005652:	bf00      	nop
 8005654:	20000228 	.word	0x20000228

08005658 <_realloc_r>:
 8005658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800565c:	4680      	mov	r8, r0
 800565e:	4614      	mov	r4, r2
 8005660:	460e      	mov	r6, r1
 8005662:	b921      	cbnz	r1, 800566e <_realloc_r+0x16>
 8005664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005668:	4611      	mov	r1, r2
 800566a:	f7ff bf81 	b.w	8005570 <_malloc_r>
 800566e:	b92a      	cbnz	r2, 800567c <_realloc_r+0x24>
 8005670:	f7ff ff12 	bl	8005498 <_free_r>
 8005674:	4625      	mov	r5, r4
 8005676:	4628      	mov	r0, r5
 8005678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800567c:	f000 f838 	bl	80056f0 <_malloc_usable_size_r>
 8005680:	4284      	cmp	r4, r0
 8005682:	4607      	mov	r7, r0
 8005684:	d802      	bhi.n	800568c <_realloc_r+0x34>
 8005686:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800568a:	d812      	bhi.n	80056b2 <_realloc_r+0x5a>
 800568c:	4621      	mov	r1, r4
 800568e:	4640      	mov	r0, r8
 8005690:	f7ff ff6e 	bl	8005570 <_malloc_r>
 8005694:	4605      	mov	r5, r0
 8005696:	2800      	cmp	r0, #0
 8005698:	d0ed      	beq.n	8005676 <_realloc_r+0x1e>
 800569a:	42bc      	cmp	r4, r7
 800569c:	4622      	mov	r2, r4
 800569e:	4631      	mov	r1, r6
 80056a0:	bf28      	it	cs
 80056a2:	463a      	movcs	r2, r7
 80056a4:	f7ff fed0 	bl	8005448 <memcpy>
 80056a8:	4631      	mov	r1, r6
 80056aa:	4640      	mov	r0, r8
 80056ac:	f7ff fef4 	bl	8005498 <_free_r>
 80056b0:	e7e1      	b.n	8005676 <_realloc_r+0x1e>
 80056b2:	4635      	mov	r5, r6
 80056b4:	e7df      	b.n	8005676 <_realloc_r+0x1e>
	...

080056b8 <_sbrk_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	4d06      	ldr	r5, [pc, #24]	; (80056d4 <_sbrk_r+0x1c>)
 80056bc:	2300      	movs	r3, #0
 80056be:	4604      	mov	r4, r0
 80056c0:	4608      	mov	r0, r1
 80056c2:	602b      	str	r3, [r5, #0]
 80056c4:	f7fb f97a 	bl	80009bc <_sbrk>
 80056c8:	1c43      	adds	r3, r0, #1
 80056ca:	d102      	bne.n	80056d2 <_sbrk_r+0x1a>
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	b103      	cbz	r3, 80056d2 <_sbrk_r+0x1a>
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	bd38      	pop	{r3, r4, r5, pc}
 80056d4:	20000230 	.word	0x20000230

080056d8 <__malloc_lock>:
 80056d8:	4801      	ldr	r0, [pc, #4]	; (80056e0 <__malloc_lock+0x8>)
 80056da:	f000 b811 	b.w	8005700 <__retarget_lock_acquire_recursive>
 80056de:	bf00      	nop
 80056e0:	20000234 	.word	0x20000234

080056e4 <__malloc_unlock>:
 80056e4:	4801      	ldr	r0, [pc, #4]	; (80056ec <__malloc_unlock+0x8>)
 80056e6:	f000 b80c 	b.w	8005702 <__retarget_lock_release_recursive>
 80056ea:	bf00      	nop
 80056ec:	20000234 	.word	0x20000234

080056f0 <_malloc_usable_size_r>:
 80056f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056f4:	1f18      	subs	r0, r3, #4
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	bfbc      	itt	lt
 80056fa:	580b      	ldrlt	r3, [r1, r0]
 80056fc:	18c0      	addlt	r0, r0, r3
 80056fe:	4770      	bx	lr

08005700 <__retarget_lock_acquire_recursive>:
 8005700:	4770      	bx	lr

08005702 <__retarget_lock_release_recursive>:
 8005702:	4770      	bx	lr

08005704 <_init>:
 8005704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005706:	bf00      	nop
 8005708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800570a:	bc08      	pop	{r3}
 800570c:	469e      	mov	lr, r3
 800570e:	4770      	bx	lr

08005710 <_fini>:
 8005710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005712:	bf00      	nop
 8005714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005716:	bc08      	pop	{r3}
 8005718:	469e      	mov	lr, r3
 800571a:	4770      	bx	lr
