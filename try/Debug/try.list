
try.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800566c  0800566c  0001566c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056d0  080056d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080056d0  080056d0  000156d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056d8  080056d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056d8  080056d8  000156d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056dc  080056dc  000156dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080056e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001c8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000238  20000238  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f22f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002250  00000000  00000000  0002f2cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf8  00000000  00000000  00031520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c00  00000000  00000000  00032218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000210db  00000000  00000000  00032e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000102e7  00000000  00000000  00053ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb47b  00000000  00000000  000641da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f655  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038f8  00000000  00000000  0012f6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005654 	.word	0x08005654

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005654 	.word	0x08005654

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <delay_init>:

static uint16_t fac_us = 0;
static uint32_t fac_ms = 0;

/*初始化*/
void delay_init(void) {
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
#if (!Timebase_Source_is_SysTick)
    fac_ms = 100000;  //作为时基的计数器时钟频率在HAL_InitTick()中被设为了1MHz
    fac_us = fac_ms / 1000;
#else
    fac_ms = SystemCoreClock / 1000;
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <delay_init+0x30>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <delay_init+0x34>)
 800058e:	fba2 2303 	umull	r2, r3, r2, r3
 8000592:	099b      	lsrs	r3, r3, #6
 8000594:	4a09      	ldr	r2, [pc, #36]	; (80005bc <delay_init+0x38>)
 8000596:	6013      	str	r3, [r2, #0]
    fac_us = fac_ms / 1000;
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <delay_init+0x38>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <delay_init+0x34>)
 800059e:	fba2 2303 	umull	r2, r3, r2, r3
 80005a2:	099b      	lsrs	r3, r3, #6
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <delay_init+0x3c>)
 80005a8:	801a      	strh	r2, [r3, #0]
#endif
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	20000000 	.word	0x20000000
 80005b8:	10624dd3 	.word	0x10624dd3
 80005bc:	20000090 	.word	0x20000090
 80005c0:	2000008c 	.word	0x2000008c

080005c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_DMA_Init+0x3c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <MX_DMA_Init+0x3c>)
 80005d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_DMA_Init+0x3c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	2010      	movs	r0, #16
 80005ec:	f000 fe61 	bl	80012b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005f0:	2010      	movs	r0, #16
 80005f2:	f000 fe7a 	bl	80012ea <HAL_NVIC_EnableIRQ>

}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800

08000604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	; 0x28
 8000608:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	4b3b      	ldr	r3, [pc, #236]	; (800070c <MX_GPIO_Init+0x108>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a3a      	ldr	r2, [pc, #232]	; (800070c <MX_GPIO_Init+0x108>)
 8000624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b38      	ldr	r3, [pc, #224]	; (800070c <MX_GPIO_Init+0x108>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	4b34      	ldr	r3, [pc, #208]	; (800070c <MX_GPIO_Init+0x108>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a33      	ldr	r2, [pc, #204]	; (800070c <MX_GPIO_Init+0x108>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b31      	ldr	r3, [pc, #196]	; (800070c <MX_GPIO_Init+0x108>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	4b2d      	ldr	r3, [pc, #180]	; (800070c <MX_GPIO_Init+0x108>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a2c      	ldr	r2, [pc, #176]	; (800070c <MX_GPIO_Init+0x108>)
 800065c:	f043 0310 	orr.w	r3, r3, #16
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b2a      	ldr	r3, [pc, #168]	; (800070c <MX_GPIO_Init+0x108>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0310 	and.w	r3, r3, #16
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b26      	ldr	r3, [pc, #152]	; (800070c <MX_GPIO_Init+0x108>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a25      	ldr	r2, [pc, #148]	; (800070c <MX_GPIO_Init+0x108>)
 8000678:	f043 0308 	orr.w	r3, r3, #8
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b23      	ldr	r3, [pc, #140]	; (800070c <MX_GPIO_Init+0x108>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0308 	and.w	r3, r3, #8
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2122      	movs	r1, #34	; 0x22
 800068e:	4820      	ldr	r0, [pc, #128]	; (8000710 <MX_GPIO_Init+0x10c>)
 8000690:	f001 fbe4 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069a:	481e      	ldr	r0, [pc, #120]	; (8000714 <MX_GPIO_Init+0x110>)
 800069c:	f001 fbde 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a6:	481c      	ldr	r0, [pc, #112]	; (8000718 <MX_GPIO_Init+0x114>)
 80006a8:	f001 fbd8 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80006ac:	2322      	movs	r3, #34	; 0x22
 80006ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2300      	movs	r3, #0
 80006ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	4813      	ldr	r0, [pc, #76]	; (8000710 <MX_GPIO_Init+0x10c>)
 80006c4:	f001 fa2e 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2300      	movs	r3, #0
 80006d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	480c      	ldr	r0, [pc, #48]	; (8000714 <MX_GPIO_Init+0x110>)
 80006e2:	f001 fa1f 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	4806      	ldr	r0, [pc, #24]	; (8000718 <MX_GPIO_Init+0x114>)
 8000700:	f001 fa10 	bl	8001b24 <HAL_GPIO_Init>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40020000 	.word	0x40020000
 8000714:	40021000 	.word	0x40021000
 8000718:	40020c00 	.word	0x40020c00

0800071c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 if(htim->Instance==TIM2)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800072c:	d123      	bne.n	8000776 <HAL_TIM_PeriodElapsedCallback+0x5a>
 {
	 //0.1ms
	 if(times<42001)
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f24a 4210 	movw	r2, #42000	; 0xa410
 8000736:	4293      	cmp	r3, r2
 8000738:	dc1d      	bgt.n	8000776 <HAL_TIM_PeriodElapsedCallback+0x5a>
	 {
		 times++;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	4a0f      	ldr	r2, [pc, #60]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000742:	6013      	str	r3, [r2, #0]
		 if(times%5==0&&times>10000)
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000746:	6819      	ldr	r1, [r3, #0]
 8000748:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800074a:	fb83 2301 	smull	r2, r3, r3, r1
 800074e:	105a      	asrs	r2, r3, #1
 8000750:	17cb      	asrs	r3, r1, #31
 8000752:	1ad2      	subs	r2, r2, r3
 8000754:	4613      	mov	r3, r2
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	1aca      	subs	r2, r1, r3
 800075c:	2a00      	cmp	r2, #0
 800075e:	d10a      	bne.n	8000776 <HAL_TIM_PeriodElapsedCallback+0x5a>
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f242 7210 	movw	r2, #10000	; 0x2710
 8000768:	4293      	cmp	r3, r2
 800076a:	dd04      	ble.n	8000776 <HAL_TIM_PeriodElapsedCallback+0x5a>
			 HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_9);
 800076c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000772:	f001 fb8c 	bl	8001e8e <HAL_GPIO_TogglePin>
	 }

 }
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000094 	.word	0x20000094
 8000784:	66666667 	.word	0x66666667
 8000788:	40021000 	.word	0x40021000

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000790:	f000 fc42 	bl	8001018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000794:	f000 f834 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000798:	f7ff ff34 	bl	8000604 <MX_GPIO_Init>
  MX_DMA_Init();
 800079c:	f7ff ff12 	bl	80005c4 <MX_DMA_Init>
  MX_TIM2_Init();
 80007a0:	f000 f9f4 	bl	8000b8c <MX_TIM2_Init>
  MX_TIM1_Init();
 80007a4:	f000 f952 	bl	8000a4c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80007a8:	f000 fab2 	bl	8000d10 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007ac:	f000 fada 	bl	8000d64 <MX_USART2_UART_Init>
  delay_init();
 80007b0:	f7ff fee8 	bl	8000584 <delay_init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007b4:	480d      	ldr	r0, [pc, #52]	; (80007ec <main+0x60>)
 80007b6:	f002 f86d 	bl	8002894 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2102      	movs	r1, #2
 80007be:	480c      	ldr	r0, [pc, #48]	; (80007f0 <main+0x64>)
 80007c0:	f001 fb4c 	bl	8001e5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2120      	movs	r1, #32
 80007c8:	4809      	ldr	r0, [pc, #36]	; (80007f0 <main+0x64>)
 80007ca:	f001 fb47 	bl	8001e5c <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007ce:	2100      	movs	r1, #0
 80007d0:	4808      	ldr	r0, [pc, #32]	; (80007f4 <main+0x68>)
 80007d2:	f002 f929 	bl	8002a28 <HAL_TIM_PWM_Start>
  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,1500);
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <main+0x68>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80007de:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_UART_Receive_DMA(&huart2, u2_RX_Buf, RX_BUF_LEN);
 80007e0:	2210      	movs	r2, #16
 80007e2:	4905      	ldr	r1, [pc, #20]	; (80007f8 <main+0x6c>)
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <main+0x70>)
 80007e6:	f003 f972 	bl	8003ace <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <main+0x5e>
 80007ec:	200000f4 	.word	0x200000f4
 80007f0:	40020000 	.word	0x40020000
 80007f4:	200000ac 	.word	0x200000ac
 80007f8:	20000098 	.word	0x20000098
 80007fc:	20000180 	.word	0x20000180

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	; 0x50
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	2230      	movs	r2, #48	; 0x30
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f004 faaa 	bl	8004d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <SystemClock_Config+0xc8>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a26      	ldr	r2, [pc, #152]	; (80008c8 <SystemClock_Config+0xc8>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <SystemClock_Config+0xc8>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <SystemClock_Config+0xcc>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a20      	ldr	r2, [pc, #128]	; (80008cc <SystemClock_Config+0xcc>)
 800084a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <SystemClock_Config+0xcc>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085c:	2301      	movs	r3, #1
 800085e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000860:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000870:	2304      	movs	r3, #4
 8000872:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000874:	23c0      	movs	r3, #192	; 0xc0
 8000876:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000878:	2306      	movs	r3, #6
 800087a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800087c:	2304      	movs	r3, #4
 800087e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	4618      	mov	r0, r3
 8000886:	f001 fb1d 	bl	8001ec4 <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000890:	f000 f81e 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	230f      	movs	r3, #15
 8000896:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	2302      	movs	r3, #2
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 fd80 	bl	80023b4 <HAL_RCC_ClockConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80008ba:	f000 f809 	bl	80008d0 <Error_Handler>
  }
}
 80008be:	bf00      	nop
 80008c0:	3750      	adds	r7, #80	; 0x50
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <Error_Handler+0x8>
	...

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <HAL_MspInit+0x4c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	4a0f      	ldr	r2, [pc, #60]	; (8000928 <HAL_MspInit+0x4c>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f0:	6453      	str	r3, [r2, #68]	; 0x44
 80008f2:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <HAL_MspInit+0x4c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_MspInit+0x4c>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090c:	6413      	str	r3, [r2, #64]	; 0x40
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <NMI_Handler+0x4>

08000932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <MemManage_Handler+0x4>

0800093e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <UsageFault_Handler+0x4>

0800094a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000978:	f000 fba0 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <DMA1_Stream5_IRQHandler+0x10>)
 8000986:	f000 fe63 	bl	8001650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200001c4 	.word	0x200001c4

08000994 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <TIM2_IRQHandler+0x10>)
 800099a:	f002 f90d 	bl	8002bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000f4 	.word	0x200000f4

080009a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <USART2_IRQHandler+0x10>)
 80009ae:	f003 f8bf 	bl	8003b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000180 	.word	0x20000180

080009bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c4:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <_sbrk+0x5c>)
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <_sbrk+0x60>)
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <_sbrk+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d102      	bne.n	80009de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <_sbrk+0x64>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <_sbrk+0x68>)
 80009dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <_sbrk+0x64>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d207      	bcs.n	80009fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009ec:	f004 f992 	bl	8004d14 <__errno>
 80009f0:	4603      	mov	r3, r0
 80009f2:	220c      	movs	r2, #12
 80009f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
 80009fa:	e009      	b.n	8000a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <_sbrk+0x64>)
 8000a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20020000 	.word	0x20020000
 8000a1c:	00000400 	.word	0x00000400
 8000a20:	200000a8 	.word	0x200000a8
 8000a24:	20000238 	.word	0x20000238

08000a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <SystemInit+0x20>)
 8000a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a32:	4a05      	ldr	r2, [pc, #20]	; (8000a48 <SystemInit+0x20>)
 8000a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b096      	sub	sp, #88	; 0x58
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
 8000a7a:	615a      	str	r2, [r3, #20]
 8000a7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2220      	movs	r2, #32
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f004 f96f 	bl	8004d68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a8a:	4b3e      	ldr	r3, [pc, #248]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000a8c:	4a3e      	ldr	r2, [pc, #248]	; (8000b88 <MX_TIM1_Init+0x13c>)
 8000a8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 8000a90:	4b3c      	ldr	r3, [pc, #240]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000a92:	221f      	movs	r2, #31
 8000a94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a96:	4b3b      	ldr	r3, [pc, #236]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8000a9c:	4b39      	ldr	r3, [pc, #228]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000a9e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000aa2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa4:	4b37      	ldr	r3, [pc, #220]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aaa:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab0:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ab6:	4833      	ldr	r0, [pc, #204]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000ab8:	f001 fe9c 	bl	80027f4 <HAL_TIM_Base_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ac2:	f7ff ff05 	bl	80008d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000acc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	482c      	ldr	r0, [pc, #176]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000ad4:	f002 fa3a 	bl	8002f4c <HAL_TIM_ConfigClockSource>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ade:	f7ff fef7 	bl	80008d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ae2:	4828      	ldr	r0, [pc, #160]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000ae4:	f001 ff46 	bl	8002974 <HAL_TIM_PWM_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000aee:	f7ff feef 	bl	80008d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af2:	2300      	movs	r3, #0
 8000af4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000afa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000afe:	4619      	mov	r1, r3
 8000b00:	4820      	ldr	r0, [pc, #128]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000b02:	f002 fe23 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b0c:	f7ff fee0 	bl	80008d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b10:	2360      	movs	r3, #96	; 0x60
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b24:	2300      	movs	r3, #0
 8000b26:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	2200      	movs	r2, #0
 8000b32:	4619      	mov	r1, r3
 8000b34:	4813      	ldr	r0, [pc, #76]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000b36:	f002 f947 	bl	8002dc8 <HAL_TIM_PWM_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b40:	f7ff fec6 	bl	80008d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	4807      	ldr	r0, [pc, #28]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000b68:	f002 fe6c 	bl	8003844 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000b72:	f7ff fead 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b76:	4803      	ldr	r0, [pc, #12]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000b78:	f000 f890 	bl	8000c9c <HAL_TIM_MspPostInit>

}
 8000b7c:	bf00      	nop
 8000b7e:	3758      	adds	r7, #88	; 0x58
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000ac 	.word	0x200000ac
 8000b88:	40010000 	.word	0x40010000

08000b8c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <MX_TIM2_Init+0x94>)
 8000baa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <MX_TIM2_Init+0x94>)
 8000bb2:	221f      	movs	r2, #31
 8000bb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_TIM2_Init+0x94>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <MX_TIM2_Init+0x94>)
 8000bbe:	2209      	movs	r2, #9
 8000bc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <MX_TIM2_Init+0x94>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <MX_TIM2_Init+0x94>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bce:	4814      	ldr	r0, [pc, #80]	; (8000c20 <MX_TIM2_Init+0x94>)
 8000bd0:	f001 fe10 	bl	80027f4 <HAL_TIM_Base_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000bda:	f7ff fe79 	bl	80008d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	4619      	mov	r1, r3
 8000bea:	480d      	ldr	r0, [pc, #52]	; (8000c20 <MX_TIM2_Init+0x94>)
 8000bec:	f002 f9ae 	bl	8002f4c <HAL_TIM_ConfigClockSource>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000bf6:	f7ff fe6b 	bl	80008d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c02:	463b      	mov	r3, r7
 8000c04:	4619      	mov	r1, r3
 8000c06:	4806      	ldr	r0, [pc, #24]	; (8000c20 <MX_TIM2_Init+0x94>)
 8000c08:	f002 fda0 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000c12:	f7ff fe5d 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200000f4 	.word	0x200000f4

08000c24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a18      	ldr	r2, [pc, #96]	; (8000c94 <HAL_TIM_Base_MspInit+0x70>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d10e      	bne.n	8000c54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <HAL_TIM_Base_MspInit+0x74>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a16      	ldr	r2, [pc, #88]	; (8000c98 <HAL_TIM_Base_MspInit+0x74>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <HAL_TIM_Base_MspInit+0x74>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c52:	e01a      	b.n	8000c8a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c5c:	d115      	bne.n	8000c8a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <HAL_TIM_Base_MspInit+0x74>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a0c      	ldr	r2, [pc, #48]	; (8000c98 <HAL_TIM_Base_MspInit+0x74>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_TIM_Base_MspInit+0x74>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	201c      	movs	r0, #28
 8000c80:	f000 fb17 	bl	80012b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c84:	201c      	movs	r0, #28
 8000c86:	f000 fb30 	bl	80012ea <HAL_NVIC_EnableIRQ>
}
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40010000 	.word	0x40010000
 8000c98:	40023800 	.word	0x40023800

08000c9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <HAL_TIM_MspPostInit+0x68>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d11e      	bne.n	8000cfc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_TIM_MspPostInit+0x6c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <HAL_TIM_MspPostInit+0x6c>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_TIM_MspPostInit+0x6c>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cde:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <HAL_TIM_MspPostInit+0x70>)
 8000cf8:	f000 ff14 	bl	8001b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000cfc:	bf00      	nop
 8000cfe:	3720      	adds	r7, #32
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40010000 	.word	0x40010000
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020000 	.word	0x40020000

08000d10 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <MX_USART1_UART_Init+0x50>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d48:	f002 fde2 	bl	8003910 <HAL_UART_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d52:	f7ff fdbd 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000013c 	.word	0x2000013c
 8000d60:	40011000 	.word	0x40011000

08000d64 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <MX_USART2_UART_Init+0x50>)
 8000d6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d9c:	f002 fdb8 	bl	8003910 <HAL_UART_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000da6:	f7ff fd93 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000180 	.word	0x20000180
 8000db4:	40004400 	.word	0x40004400

08000db8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08c      	sub	sp, #48	; 0x30
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a4d      	ldr	r2, [pc, #308]	; (8000f0c <HAL_UART_MspInit+0x154>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d12d      	bne.n	8000e36 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
 8000dde:	4b4c      	ldr	r3, [pc, #304]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a4b      	ldr	r2, [pc, #300]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000de4:	f043 0310 	orr.w	r3, r3, #16
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b49      	ldr	r3, [pc, #292]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f003 0310 	and.w	r3, r3, #16
 8000df2:	61bb      	str	r3, [r7, #24]
 8000df4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	4b45      	ldr	r3, [pc, #276]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a44      	ldr	r2, [pc, #272]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b42      	ldr	r3, [pc, #264]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e24:	2307      	movs	r3, #7
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4839      	ldr	r0, [pc, #228]	; (8000f14 <HAL_UART_MspInit+0x15c>)
 8000e30:	f000 fe78 	bl	8001b24 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e34:	e066      	b.n	8000f04 <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART2)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a37      	ldr	r2, [pc, #220]	; (8000f18 <HAL_UART_MspInit+0x160>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d161      	bne.n	8000f04 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	4a31      	ldr	r2, [pc, #196]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e50:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	4b2b      	ldr	r3, [pc, #172]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	4a2a      	ldr	r2, [pc, #168]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6c:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <HAL_UART_MspInit+0x158>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e78:	230c      	movs	r3, #12
 8000e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e88:	2307      	movs	r3, #7
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	4820      	ldr	r0, [pc, #128]	; (8000f14 <HAL_UART_MspInit+0x15c>)
 8000e94:	f000 fe46 	bl	8001b24 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000e98:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000e9a:	4a21      	ldr	r2, [pc, #132]	; (8000f20 <HAL_UART_MspInit+0x168>)
 8000e9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000e9e:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000ea0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ea4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000eb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec0:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ed8:	4810      	ldr	r0, [pc, #64]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000eda:	f000 fa21 	bl	8001320 <HAL_DMA_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8000ee4:	f7ff fcf4 	bl	80008d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a0c      	ldr	r2, [pc, #48]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000eec:	639a      	str	r2, [r3, #56]	; 0x38
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <HAL_UART_MspInit+0x164>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2026      	movs	r0, #38	; 0x26
 8000efa:	f000 f9da 	bl	80012b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000efe:	2026      	movs	r0, #38	; 0x26
 8000f00:	f000 f9f3 	bl	80012ea <HAL_NVIC_EnableIRQ>
}
 8000f04:	bf00      	nop
 8000f06:	3730      	adds	r7, #48	; 0x30
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40011000 	.word	0x40011000
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020000 	.word	0x40020000
 8000f18:	40004400 	.word	0x40004400
 8000f1c:	200001c4 	.word	0x200001c4
 8000f20:	40026088 	.word	0x40026088

08000f24 <u1_printf>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void u1_printf(char* fmt, ...) {
 8000f24:	b40f      	push	{r0, r1, r2, r3}
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b0b4      	sub	sp, #208	; 0xd0
 8000f2a:	af00      	add	r7, sp, #0
  uint16_t len;
  va_list ap;
  va_start(ap, fmt);
 8000f2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  uint8_t buf[200];
  vsprintf((char*)buf, fmt, ap);
 8000f34:	463b      	mov	r3, r7
 8000f36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000f3a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f003 ff30 	bl	8004da4 <vsiprintf>
  va_end(ap);
  len = strlen((char*)buf);
 8000f44:	463b      	mov	r3, r7
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff f942 	bl	80001d0 <strlen>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
  HAL_UART_Transmit(&huart1, buf, len, HAL_MAX_DELAY);//若使用了其他UART通道，将对应通道（参数1）修改即可。该函数在（6.补充）中会进行说明。
 8000f52:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8000f56:	4639      	mov	r1, r7
 8000f58:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <u1_printf+0x4c>)
 8000f5e:	f002 fd24 	bl	80039aa <HAL_UART_Transmit>
}
 8000f62:	bf00      	nop
 8000f64:	37d0      	adds	r7, #208	; 0xd0
 8000f66:	46bd      	mov	sp, r7
 8000f68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f6c:	b004      	add	sp, #16
 8000f6e:	4770      	bx	lr
 8000f70:	2000013c 	.word	0x2000013c

08000f74 <HAL_UART_RxCpltCallback>:
  va_end(ap);
  len = strlen((char*)buf);
  HAL_UART_Transmit(&huart2, buf, len, HAL_MAX_DELAY);//若使用了其他UART通道，将对应通道（参数1）修改即可。该函数在（6.补充）中会进行说明。
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

if(huart==&huart2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <HAL_UART_RxCpltCallback+0x3c>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d111      	bne.n	8000fa8 <HAL_UART_RxCpltCallback+0x34>

{

  u1_printf("received:\n");
 8000f84:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <HAL_UART_RxCpltCallback+0x40>)
 8000f86:	f7ff ffcd 	bl	8000f24 <u1_printf>
  HAL_UART_Transmit(&huart1, u2_RX_Buf, RX_BUF_LEN, HAL_MAX_DELAY);
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	2210      	movs	r2, #16
 8000f90:	4909      	ldr	r1, [pc, #36]	; (8000fb8 <HAL_UART_RxCpltCallback+0x44>)
 8000f92:	480a      	ldr	r0, [pc, #40]	; (8000fbc <HAL_UART_RxCpltCallback+0x48>)
 8000f94:	f002 fd09 	bl	80039aa <HAL_UART_Transmit>
  u1_printf("\n");
 8000f98:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <HAL_UART_RxCpltCallback+0x4c>)
 8000f9a:	f7ff ffc3 	bl	8000f24 <u1_printf>
  HAL_UART_Receive_DMA(&huart2, u2_RX_Buf, RX_BUF_LEN);
 8000f9e:	2210      	movs	r2, #16
 8000fa0:	4905      	ldr	r1, [pc, #20]	; (8000fb8 <HAL_UART_RxCpltCallback+0x44>)
 8000fa2:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <HAL_UART_RxCpltCallback+0x3c>)
 8000fa4:	f002 fd93 	bl	8003ace <HAL_UART_Receive_DMA>

}
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000180 	.word	0x20000180
 8000fb4:	0800566c 	.word	0x0800566c
 8000fb8:	20000098 	.word	0x20000098
 8000fbc:	2000013c 	.word	0x2000013c
 8000fc0:	08005678 	.word	0x08005678

08000fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ffc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fca:	490e      	ldr	r1, [pc, #56]	; (8001004 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fcc:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd0:	e002      	b.n	8000fd8 <LoopCopyDataInit>

08000fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd6:	3304      	adds	r3, #4

08000fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fdc:	d3f9      	bcc.n	8000fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fe0:	4c0b      	ldr	r4, [pc, #44]	; (8001010 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe4:	e001      	b.n	8000fea <LoopFillZerobss>

08000fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe8:	3204      	adds	r2, #4

08000fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fec:	d3fb      	bcc.n	8000fe6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fee:	f7ff fd1b 	bl	8000a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f003 fe95 	bl	8004d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff6:	f7ff fbc9 	bl	800078c <main>
  bx  lr    
 8000ffa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ffc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001004:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001008:	080056e0 	.word	0x080056e0
  ldr r2, =_sbss
 800100c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001010:	20000238 	.word	0x20000238

08001014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC_IRQHandler>
	...

08001018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <HAL_Init+0x40>)
 8001022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001026:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <HAL_Init+0x40>)
 800102e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001032:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_Init+0x40>)
 800103a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 f92b 	bl	800129c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001046:	200f      	movs	r0, #15
 8001048:	f000 f808 	bl	800105c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f7ff fc46 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023c00 	.word	0x40023c00

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_InitTick+0x54>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_InitTick+0x58>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f943 	bl	8001306 <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00e      	b.n	80010a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d80a      	bhi.n	80010a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f000 f90b 	bl	80012b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <HAL_InitTick+0x5c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000008 	.word	0x20000008
 80010b8:	20000004 	.word	0x20000004

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000008 	.word	0x20000008
 80010e0:	20000224 	.word	0x20000224

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000224 	.word	0x20000224

080010fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001118:	4013      	ands	r3, r2
 800111a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	60d3      	str	r3, [r2, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <__NVIC_GetPriorityGrouping+0x18>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	0a1b      	lsrs	r3, r3, #8
 800114e:	f003 0307 	and.w	r3, r3, #7
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	2b00      	cmp	r3, #0
 8001170:	db0b      	blt.n	800118a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	f003 021f 	and.w	r2, r3, #31
 8001178:	4907      	ldr	r1, [pc, #28]	; (8001198 <__NVIC_EnableIRQ+0x38>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	095b      	lsrs	r3, r3, #5
 8001180:	2001      	movs	r0, #1
 8001182:	fa00 f202 	lsl.w	r2, r0, r2
 8001186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000e100 	.word	0xe000e100

0800119c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	db0a      	blt.n	80011c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	490c      	ldr	r1, [pc, #48]	; (80011e8 <__NVIC_SetPriority+0x4c>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	0112      	lsls	r2, r2, #4
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	440b      	add	r3, r1
 80011c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c4:	e00a      	b.n	80011dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4908      	ldr	r1, [pc, #32]	; (80011ec <__NVIC_SetPriority+0x50>)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	3b04      	subs	r3, #4
 80011d4:	0112      	lsls	r2, r2, #4
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	440b      	add	r3, r1
 80011da:	761a      	strb	r2, [r3, #24]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000e100 	.word	0xe000e100
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b089      	sub	sp, #36	; 0x24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f1c3 0307 	rsb	r3, r3, #7
 800120a:	2b04      	cmp	r3, #4
 800120c:	bf28      	it	cs
 800120e:	2304      	movcs	r3, #4
 8001210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3304      	adds	r3, #4
 8001216:	2b06      	cmp	r3, #6
 8001218:	d902      	bls.n	8001220 <NVIC_EncodePriority+0x30>
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3b03      	subs	r3, #3
 800121e:	e000      	b.n	8001222 <NVIC_EncodePriority+0x32>
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	f04f 32ff 	mov.w	r2, #4294967295
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43da      	mvns	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	401a      	ands	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001238:	f04f 31ff 	mov.w	r1, #4294967295
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa01 f303 	lsl.w	r3, r1, r3
 8001242:	43d9      	mvns	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	4313      	orrs	r3, r2
         );
}
 800124a:	4618      	mov	r0, r3
 800124c:	3724      	adds	r7, #36	; 0x24
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001268:	d301      	bcc.n	800126e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126a:	2301      	movs	r3, #1
 800126c:	e00f      	b.n	800128e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <SysTick_Config+0x40>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001276:	210f      	movs	r1, #15
 8001278:	f04f 30ff 	mov.w	r0, #4294967295
 800127c:	f7ff ff8e 	bl	800119c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <SysTick_Config+0x40>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001286:	4b04      	ldr	r3, [pc, #16]	; (8001298 <SysTick_Config+0x40>)
 8001288:	2207      	movs	r2, #7
 800128a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	e000e010 	.word	0xe000e010

0800129c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ff29 	bl	80010fc <__NVIC_SetPriorityGrouping>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b086      	sub	sp, #24
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
 80012be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c4:	f7ff ff3e 	bl	8001144 <__NVIC_GetPriorityGrouping>
 80012c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	68b9      	ldr	r1, [r7, #8]
 80012ce:	6978      	ldr	r0, [r7, #20]
 80012d0:	f7ff ff8e 	bl	80011f0 <NVIC_EncodePriority>
 80012d4:	4602      	mov	r2, r0
 80012d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff5d 	bl	800119c <__NVIC_SetPriority>
}
 80012e2:	bf00      	nop
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff31 	bl	8001160 <__NVIC_EnableIRQ>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ffa2 	bl	8001258 <SysTick_Config>
 8001314:	4603      	mov	r3, r0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800132c:	f7ff feda 	bl	80010e4 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e099      	b.n	8001470 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2202      	movs	r2, #2
 8001340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0201 	bic.w	r2, r2, #1
 800135a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800135c:	e00f      	b.n	800137e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800135e:	f7ff fec1 	bl	80010e4 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b05      	cmp	r3, #5
 800136a:	d908      	bls.n	800137e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2220      	movs	r2, #32
 8001370:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2203      	movs	r2, #3
 8001376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e078      	b.n	8001470 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1e8      	bne.n	800135e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	4b38      	ldr	r3, [pc, #224]	; (8001478 <HAL_DMA_Init+0x158>)
 8001398:	4013      	ands	r3, r2
 800139a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	d107      	bne.n	80013e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	4313      	orrs	r3, r2
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f023 0307 	bic.w	r3, r3, #7
 80013fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	4313      	orrs	r3, r2
 8001408:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	2b04      	cmp	r3, #4
 8001410:	d117      	bne.n	8001442 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	4313      	orrs	r3, r2
 800141a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00e      	beq.n	8001442 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 fb01 	bl	8001a2c <DMA_CheckFifoParam>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d008      	beq.n	8001442 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2240      	movs	r2, #64	; 0x40
 8001434:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800143e:	2301      	movs	r3, #1
 8001440:	e016      	b.n	8001470 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 fab8 	bl	80019c0 <DMA_CalcBaseAndBitshift>
 8001450:	4603      	mov	r3, r0
 8001452:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001458:	223f      	movs	r2, #63	; 0x3f
 800145a:	409a      	lsls	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2201      	movs	r2, #1
 800146a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	f010803f 	.word	0xf010803f

0800147c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001492:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800149a:	2b01      	cmp	r3, #1
 800149c:	d101      	bne.n	80014a2 <HAL_DMA_Start_IT+0x26>
 800149e:	2302      	movs	r3, #2
 80014a0:	e040      	b.n	8001524 <HAL_DMA_Start_IT+0xa8>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d12f      	bne.n	8001516 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2202      	movs	r2, #2
 80014ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 fa4a 	bl	8001964 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d4:	223f      	movs	r2, #63	; 0x3f
 80014d6:	409a      	lsls	r2, r3
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0216 	orr.w	r2, r2, #22
 80014ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d007      	beq.n	8001504 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 0208 	orr.w	r2, r2, #8
 8001502:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0201 	orr.w	r2, r2, #1
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	e005      	b.n	8001522 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800151e:	2302      	movs	r3, #2
 8001520:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001522:	7dfb      	ldrb	r3, [r7, #23]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001538:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800153a:	f7ff fdd3 	bl	80010e4 <HAL_GetTick>
 800153e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d008      	beq.n	800155e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2280      	movs	r2, #128	; 0x80
 8001550:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e052      	b.n	8001604 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0216 	bic.w	r2, r2, #22
 800156c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	695a      	ldr	r2, [r3, #20]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800157c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	2b00      	cmp	r3, #0
 8001584:	d103      	bne.n	800158e <HAL_DMA_Abort+0x62>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0208 	bic.w	r2, r2, #8
 800159c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0201 	bic.w	r2, r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ae:	e013      	b.n	80015d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015b0:	f7ff fd98 	bl	80010e4 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b05      	cmp	r3, #5
 80015bc:	d90c      	bls.n	80015d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2220      	movs	r2, #32
 80015c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2203      	movs	r2, #3
 80015c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e015      	b.n	8001604 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1e4      	bne.n	80015b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ea:	223f      	movs	r2, #63	; 0x3f
 80015ec:	409a      	lsls	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d004      	beq.n	800162a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2280      	movs	r2, #128	; 0x80
 8001624:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e00c      	b.n	8001644 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2205      	movs	r2, #5
 800162e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0201 	bic.w	r2, r2, #1
 8001640:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800165c:	4b8e      	ldr	r3, [pc, #568]	; (8001898 <HAL_DMA_IRQHandler+0x248>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a8e      	ldr	r2, [pc, #568]	; (800189c <HAL_DMA_IRQHandler+0x24c>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	0a9b      	lsrs	r3, r3, #10
 8001668:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167a:	2208      	movs	r2, #8
 800167c:	409a      	lsls	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	4013      	ands	r3, r2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d01a      	beq.n	80016bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d013      	beq.n	80016bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0204 	bic.w	r2, r2, #4
 80016a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a8:	2208      	movs	r2, #8
 80016aa:	409a      	lsls	r2, r3
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b4:	f043 0201 	orr.w	r2, r3, #1
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c0:	2201      	movs	r2, #1
 80016c2:	409a      	lsls	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4013      	ands	r3, r2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d012      	beq.n	80016f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00b      	beq.n	80016f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016de:	2201      	movs	r2, #1
 80016e0:	409a      	lsls	r2, r3
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ea:	f043 0202 	orr.w	r2, r3, #2
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f6:	2204      	movs	r2, #4
 80016f8:	409a      	lsls	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4013      	ands	r3, r2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d012      	beq.n	8001728 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00b      	beq.n	8001728 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001714:	2204      	movs	r2, #4
 8001716:	409a      	lsls	r2, r3
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001720:	f043 0204 	orr.w	r2, r3, #4
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172c:	2210      	movs	r2, #16
 800172e:	409a      	lsls	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4013      	ands	r3, r2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d043      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d03c      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174a:	2210      	movs	r2, #16
 800174c:	409a      	lsls	r2, r3
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d018      	beq.n	8001792 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d108      	bne.n	8001780 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	2b00      	cmp	r3, #0
 8001774:	d024      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	4798      	blx	r3
 800177e:	e01f      	b.n	80017c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001784:	2b00      	cmp	r3, #0
 8001786:	d01b      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	4798      	blx	r3
 8001790:	e016      	b.n	80017c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d107      	bne.n	80017b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0208 	bic.w	r2, r2, #8
 80017ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c4:	2220      	movs	r2, #32
 80017c6:	409a      	lsls	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 808f 	beq.w	80018f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0310 	and.w	r3, r3, #16
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 8087 	beq.w	80018f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e6:	2220      	movs	r2, #32
 80017e8:	409a      	lsls	r2, r3
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b05      	cmp	r3, #5
 80017f8:	d136      	bne.n	8001868 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0216 	bic.w	r2, r2, #22
 8001808:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	695a      	ldr	r2, [r3, #20]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001818:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	2b00      	cmp	r3, #0
 8001820:	d103      	bne.n	800182a <HAL_DMA_IRQHandler+0x1da>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001826:	2b00      	cmp	r3, #0
 8001828:	d007      	beq.n	800183a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0208 	bic.w	r2, r2, #8
 8001838:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183e:	223f      	movs	r2, #63	; 0x3f
 8001840:	409a      	lsls	r2, r3
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800185a:	2b00      	cmp	r3, #0
 800185c:	d07e      	beq.n	800195c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	4798      	blx	r3
        }
        return;
 8001866:	e079      	b.n	800195c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d01d      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10d      	bne.n	80018a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001888:	2b00      	cmp	r3, #0
 800188a:	d031      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	4798      	blx	r3
 8001894:	e02c      	b.n	80018f0 <HAL_DMA_IRQHandler+0x2a0>
 8001896:	bf00      	nop
 8001898:	20000000 	.word	0x20000000
 800189c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d023      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	4798      	blx	r3
 80018b0:	e01e      	b.n	80018f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10f      	bne.n	80018e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0210 	bic.w	r2, r2, #16
 80018ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d032      	beq.n	800195e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d022      	beq.n	800194a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2205      	movs	r2, #5
 8001908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0201 	bic.w	r2, r2, #1
 800191a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	3301      	adds	r3, #1
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	429a      	cmp	r2, r3
 8001926:	d307      	bcc.n	8001938 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f2      	bne.n	800191c <HAL_DMA_IRQHandler+0x2cc>
 8001936:	e000      	b.n	800193a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001938:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	2b00      	cmp	r3, #0
 8001950:	d005      	beq.n	800195e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	4798      	blx	r3
 800195a:	e000      	b.n	800195e <HAL_DMA_IRQHandler+0x30e>
        return;
 800195c:	bf00      	nop
    }
  }
}
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001980:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b40      	cmp	r3, #64	; 0x40
 8001990:	d108      	bne.n	80019a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019a2:	e007      	b.n	80019b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	60da      	str	r2, [r3, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	3b10      	subs	r3, #16
 80019d0:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <DMA_CalcBaseAndBitshift+0x64>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	091b      	lsrs	r3, r3, #4
 80019d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019da:	4a13      	ldr	r2, [pc, #76]	; (8001a28 <DMA_CalcBaseAndBitshift+0x68>)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4413      	add	r3, r2
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d909      	bls.n	8001a02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019f6:	f023 0303 	bic.w	r3, r3, #3
 80019fa:	1d1a      	adds	r2, r3, #4
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	659a      	str	r2, [r3, #88]	; 0x58
 8001a00:	e007      	b.n	8001a12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a0a:	f023 0303 	bic.w	r3, r3, #3
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	aaaaaaab 	.word	0xaaaaaaab
 8001a28:	08005694 	.word	0x08005694

08001a2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d11f      	bne.n	8001a86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d856      	bhi.n	8001afa <DMA_CheckFifoParam+0xce>
 8001a4c:	a201      	add	r2, pc, #4	; (adr r2, 8001a54 <DMA_CheckFifoParam+0x28>)
 8001a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a52:	bf00      	nop
 8001a54:	08001a65 	.word	0x08001a65
 8001a58:	08001a77 	.word	0x08001a77
 8001a5c:	08001a65 	.word	0x08001a65
 8001a60:	08001afb 	.word	0x08001afb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d046      	beq.n	8001afe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a74:	e043      	b.n	8001afe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a7e:	d140      	bne.n	8001b02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a84:	e03d      	b.n	8001b02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a8e:	d121      	bne.n	8001ad4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d837      	bhi.n	8001b06 <DMA_CheckFifoParam+0xda>
 8001a96:	a201      	add	r2, pc, #4	; (adr r2, 8001a9c <DMA_CheckFifoParam+0x70>)
 8001a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9c:	08001aad 	.word	0x08001aad
 8001aa0:	08001ab3 	.word	0x08001ab3
 8001aa4:	08001aad 	.word	0x08001aad
 8001aa8:	08001ac5 	.word	0x08001ac5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
      break;
 8001ab0:	e030      	b.n	8001b14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d025      	beq.n	8001b0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ac2:	e022      	b.n	8001b0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001acc:	d11f      	bne.n	8001b0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ad2:	e01c      	b.n	8001b0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d903      	bls.n	8001ae2 <DMA_CheckFifoParam+0xb6>
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d003      	beq.n	8001ae8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ae0:	e018      	b.n	8001b14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ae6:	e015      	b.n	8001b14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00e      	beq.n	8001b12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
      break;
 8001af8:	e00b      	b.n	8001b12 <DMA_CheckFifoParam+0xe6>
      break;
 8001afa:	bf00      	nop
 8001afc:	e00a      	b.n	8001b14 <DMA_CheckFifoParam+0xe8>
      break;
 8001afe:	bf00      	nop
 8001b00:	e008      	b.n	8001b14 <DMA_CheckFifoParam+0xe8>
      break;
 8001b02:	bf00      	nop
 8001b04:	e006      	b.n	8001b14 <DMA_CheckFifoParam+0xe8>
      break;
 8001b06:	bf00      	nop
 8001b08:	e004      	b.n	8001b14 <DMA_CheckFifoParam+0xe8>
      break;
 8001b0a:	bf00      	nop
 8001b0c:	e002      	b.n	8001b14 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b0e:	bf00      	nop
 8001b10:	e000      	b.n	8001b14 <DMA_CheckFifoParam+0xe8>
      break;
 8001b12:	bf00      	nop
    }
  } 
  
  return status; 
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop

08001b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
 8001b3e:	e16b      	b.n	8001e18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b40:	2201      	movs	r2, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	f040 815a 	bne.w	8001e12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d005      	beq.n	8001b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d130      	bne.n	8001bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bac:	2201      	movs	r2, #1
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 0201 	and.w	r2, r3, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d017      	beq.n	8001c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d123      	bne.n	8001c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	08da      	lsrs	r2, r3, #3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3208      	adds	r2, #8
 8001c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	220f      	movs	r2, #15
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	08da      	lsrs	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3208      	adds	r2, #8
 8001c62:	69b9      	ldr	r1, [r7, #24]
 8001c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0203 	and.w	r2, r3, #3
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80b4 	beq.w	8001e12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b60      	ldr	r3, [pc, #384]	; (8001e30 <HAL_GPIO_Init+0x30c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a5f      	ldr	r2, [pc, #380]	; (8001e30 <HAL_GPIO_Init+0x30c>)
 8001cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b5d      	ldr	r3, [pc, #372]	; (8001e30 <HAL_GPIO_Init+0x30c>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cc6:	4a5b      	ldr	r2, [pc, #364]	; (8001e34 <HAL_GPIO_Init+0x310>)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	220f      	movs	r2, #15
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a52      	ldr	r2, [pc, #328]	; (8001e38 <HAL_GPIO_Init+0x314>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d02b      	beq.n	8001d4a <HAL_GPIO_Init+0x226>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a51      	ldr	r2, [pc, #324]	; (8001e3c <HAL_GPIO_Init+0x318>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d025      	beq.n	8001d46 <HAL_GPIO_Init+0x222>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a50      	ldr	r2, [pc, #320]	; (8001e40 <HAL_GPIO_Init+0x31c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d01f      	beq.n	8001d42 <HAL_GPIO_Init+0x21e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4f      	ldr	r2, [pc, #316]	; (8001e44 <HAL_GPIO_Init+0x320>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d019      	beq.n	8001d3e <HAL_GPIO_Init+0x21a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4e      	ldr	r2, [pc, #312]	; (8001e48 <HAL_GPIO_Init+0x324>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_GPIO_Init+0x216>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4d      	ldr	r2, [pc, #308]	; (8001e4c <HAL_GPIO_Init+0x328>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00d      	beq.n	8001d36 <HAL_GPIO_Init+0x212>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4c      	ldr	r2, [pc, #304]	; (8001e50 <HAL_GPIO_Init+0x32c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d007      	beq.n	8001d32 <HAL_GPIO_Init+0x20e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4b      	ldr	r2, [pc, #300]	; (8001e54 <HAL_GPIO_Init+0x330>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_GPIO_Init+0x20a>
 8001d2a:	2307      	movs	r3, #7
 8001d2c:	e00e      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d2e:	2308      	movs	r3, #8
 8001d30:	e00c      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d32:	2306      	movs	r3, #6
 8001d34:	e00a      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d36:	2305      	movs	r3, #5
 8001d38:	e008      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	e006      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e004      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e002      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	f002 0203 	and.w	r2, r2, #3
 8001d52:	0092      	lsls	r2, r2, #2
 8001d54:	4093      	lsls	r3, r2
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d5c:	4935      	ldr	r1, [pc, #212]	; (8001e34 <HAL_GPIO_Init+0x310>)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	089b      	lsrs	r3, r3, #2
 8001d62:	3302      	adds	r3, #2
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <HAL_GPIO_Init+0x334>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d8e:	4a32      	ldr	r2, [pc, #200]	; (8001e58 <HAL_GPIO_Init+0x334>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d94:	4b30      	ldr	r3, [pc, #192]	; (8001e58 <HAL_GPIO_Init+0x334>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db8:	4a27      	ldr	r2, [pc, #156]	; (8001e58 <HAL_GPIO_Init+0x334>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dbe:	4b26      	ldr	r3, [pc, #152]	; (8001e58 <HAL_GPIO_Init+0x334>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001de2:	4a1d      	ldr	r2, [pc, #116]	; (8001e58 <HAL_GPIO_Init+0x334>)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <HAL_GPIO_Init+0x334>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e0c:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <HAL_GPIO_Init+0x334>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3301      	adds	r3, #1
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	2b0f      	cmp	r3, #15
 8001e1c:	f67f ae90 	bls.w	8001b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3724      	adds	r7, #36	; 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40013800 	.word	0x40013800
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	40020800 	.word	0x40020800
 8001e44:	40020c00 	.word	0x40020c00
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40021400 	.word	0x40021400
 8001e50:	40021800 	.word	0x40021800
 8001e54:	40021c00 	.word	0x40021c00
 8001e58:	40013c00 	.word	0x40013c00

08001e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e6c:	787b      	ldrb	r3, [r7, #1]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e72:	887a      	ldrh	r2, [r7, #2]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e78:	e003      	b.n	8001e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e7a:	887b      	ldrh	r3, [r7, #2]
 8001e7c:	041a      	lsls	r2, r3, #16
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	619a      	str	r2, [r3, #24]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b085      	sub	sp, #20
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ea0:	887a      	ldrh	r2, [r7, #2]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	041a      	lsls	r2, r3, #16
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	887b      	ldrh	r3, [r7, #2]
 8001eae:	400b      	ands	r3, r1
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	619a      	str	r2, [r3, #24]
}
 8001eb6:	bf00      	nop
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e267      	b.n	80023a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d075      	beq.n	8001fce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ee2:	4b88      	ldr	r3, [pc, #544]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d00c      	beq.n	8001f08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eee:	4b85      	ldr	r3, [pc, #532]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d112      	bne.n	8001f20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001efa:	4b82      	ldr	r3, [pc, #520]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f06:	d10b      	bne.n	8001f20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f08:	4b7e      	ldr	r3, [pc, #504]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d05b      	beq.n	8001fcc <HAL_RCC_OscConfig+0x108>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d157      	bne.n	8001fcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e242      	b.n	80023a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f28:	d106      	bne.n	8001f38 <HAL_RCC_OscConfig+0x74>
 8001f2a:	4b76      	ldr	r3, [pc, #472]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a75      	ldr	r2, [pc, #468]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e01d      	b.n	8001f74 <HAL_RCC_OscConfig+0xb0>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x98>
 8001f42:	4b70      	ldr	r3, [pc, #448]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a6f      	ldr	r2, [pc, #444]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8001f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b6d      	ldr	r3, [pc, #436]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a6c      	ldr	r2, [pc, #432]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e00b      	b.n	8001f74 <HAL_RCC_OscConfig+0xb0>
 8001f5c:	4b69      	ldr	r3, [pc, #420]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a68      	ldr	r2, [pc, #416]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8001f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	4b66      	ldr	r3, [pc, #408]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a65      	ldr	r2, [pc, #404]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8001f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d013      	beq.n	8001fa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff f8b2 	bl	80010e4 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f84:	f7ff f8ae 	bl	80010e4 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e207      	b.n	80023a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f96:	4b5b      	ldr	r3, [pc, #364]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0xc0>
 8001fa2:	e014      	b.n	8001fce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7ff f89e 	bl	80010e4 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fac:	f7ff f89a 	bl	80010e4 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	; 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e1f3      	b.n	80023a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fbe:	4b51      	ldr	r3, [pc, #324]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0xe8>
 8001fca:	e000      	b.n	8001fce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d063      	beq.n	80020a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fda:	4b4a      	ldr	r3, [pc, #296]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00b      	beq.n	8001ffe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe6:	4b47      	ldr	r3, [pc, #284]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d11c      	bne.n	800202c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ff2:	4b44      	ldr	r3, [pc, #272]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d116      	bne.n	800202c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffe:	4b41      	ldr	r3, [pc, #260]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d005      	beq.n	8002016 <HAL_RCC_OscConfig+0x152>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d001      	beq.n	8002016 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e1c7      	b.n	80023a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002016:	4b3b      	ldr	r3, [pc, #236]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4937      	ldr	r1, [pc, #220]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202a:	e03a      	b.n	80020a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d020      	beq.n	8002076 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002034:	4b34      	ldr	r3, [pc, #208]	; (8002108 <HAL_RCC_OscConfig+0x244>)
 8002036:	2201      	movs	r2, #1
 8002038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203a:	f7ff f853 	bl	80010e4 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002042:	f7ff f84f 	bl	80010e4 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e1a8      	b.n	80023a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002054:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002060:	4b28      	ldr	r3, [pc, #160]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4925      	ldr	r1, [pc, #148]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8002070:	4313      	orrs	r3, r2
 8002072:	600b      	str	r3, [r1, #0]
 8002074:	e015      	b.n	80020a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002076:	4b24      	ldr	r3, [pc, #144]	; (8002108 <HAL_RCC_OscConfig+0x244>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7ff f832 	bl	80010e4 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002084:	f7ff f82e 	bl	80010e4 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e187      	b.n	80023a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002096:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d036      	beq.n	800211c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d016      	beq.n	80020e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b6:	4b15      	ldr	r3, [pc, #84]	; (800210c <HAL_RCC_OscConfig+0x248>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020bc:	f7ff f812 	bl	80010e4 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c4:	f7ff f80e 	bl	80010e4 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e167      	b.n	80023a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_OscConfig+0x240>)
 80020d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0x200>
 80020e2:	e01b      	b.n	800211c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e4:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_RCC_OscConfig+0x248>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ea:	f7fe fffb 	bl	80010e4 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f0:	e00e      	b.n	8002110 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f2:	f7fe fff7 	bl	80010e4 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d907      	bls.n	8002110 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e150      	b.n	80023a6 <HAL_RCC_OscConfig+0x4e2>
 8002104:	40023800 	.word	0x40023800
 8002108:	42470000 	.word	0x42470000
 800210c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002110:	4b88      	ldr	r3, [pc, #544]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 8002112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1ea      	bne.n	80020f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 8097 	beq.w	8002258 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212e:	4b81      	ldr	r3, [pc, #516]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10f      	bne.n	800215a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	4b7d      	ldr	r3, [pc, #500]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4a7c      	ldr	r2, [pc, #496]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002148:	6413      	str	r3, [r2, #64]	; 0x40
 800214a:	4b7a      	ldr	r3, [pc, #488]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002156:	2301      	movs	r3, #1
 8002158:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215a:	4b77      	ldr	r3, [pc, #476]	; (8002338 <HAL_RCC_OscConfig+0x474>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d118      	bne.n	8002198 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002166:	4b74      	ldr	r3, [pc, #464]	; (8002338 <HAL_RCC_OscConfig+0x474>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a73      	ldr	r2, [pc, #460]	; (8002338 <HAL_RCC_OscConfig+0x474>)
 800216c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002172:	f7fe ffb7 	bl	80010e4 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800217a:	f7fe ffb3 	bl	80010e4 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e10c      	b.n	80023a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218c:	4b6a      	ldr	r3, [pc, #424]	; (8002338 <HAL_RCC_OscConfig+0x474>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d106      	bne.n	80021ae <HAL_RCC_OscConfig+0x2ea>
 80021a0:	4b64      	ldr	r3, [pc, #400]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	4a63      	ldr	r2, [pc, #396]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6713      	str	r3, [r2, #112]	; 0x70
 80021ac:	e01c      	b.n	80021e8 <HAL_RCC_OscConfig+0x324>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b05      	cmp	r3, #5
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCC_OscConfig+0x30c>
 80021b6:	4b5f      	ldr	r3, [pc, #380]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	4a5e      	ldr	r2, [pc, #376]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	6713      	str	r3, [r2, #112]	; 0x70
 80021c2:	4b5c      	ldr	r3, [pc, #368]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c6:	4a5b      	ldr	r2, [pc, #364]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6713      	str	r3, [r2, #112]	; 0x70
 80021ce:	e00b      	b.n	80021e8 <HAL_RCC_OscConfig+0x324>
 80021d0:	4b58      	ldr	r3, [pc, #352]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	4a57      	ldr	r2, [pc, #348]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 80021d6:	f023 0301 	bic.w	r3, r3, #1
 80021da:	6713      	str	r3, [r2, #112]	; 0x70
 80021dc:	4b55      	ldr	r3, [pc, #340]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 80021de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e0:	4a54      	ldr	r2, [pc, #336]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 80021e2:	f023 0304 	bic.w	r3, r3, #4
 80021e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d015      	beq.n	800221c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f0:	f7fe ff78 	bl	80010e4 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f6:	e00a      	b.n	800220e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f8:	f7fe ff74 	bl	80010e4 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	; 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e0cb      	b.n	80023a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220e:	4b49      	ldr	r3, [pc, #292]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0ee      	beq.n	80021f8 <HAL_RCC_OscConfig+0x334>
 800221a:	e014      	b.n	8002246 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221c:	f7fe ff62 	bl	80010e4 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002222:	e00a      	b.n	800223a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002224:	f7fe ff5e 	bl	80010e4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e0b5      	b.n	80023a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800223a:	4b3e      	ldr	r3, [pc, #248]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 800223c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1ee      	bne.n	8002224 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002246:	7dfb      	ldrb	r3, [r7, #23]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d105      	bne.n	8002258 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800224c:	4b39      	ldr	r3, [pc, #228]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	4a38      	ldr	r2, [pc, #224]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 8002252:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002256:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 80a1 	beq.w	80023a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002262:	4b34      	ldr	r3, [pc, #208]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b08      	cmp	r3, #8
 800226c:	d05c      	beq.n	8002328 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d141      	bne.n	80022fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002276:	4b31      	ldr	r3, [pc, #196]	; (800233c <HAL_RCC_OscConfig+0x478>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7fe ff32 	bl	80010e4 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002284:	f7fe ff2e 	bl	80010e4 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e087      	b.n	80023a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002296:	4b27      	ldr	r3, [pc, #156]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69da      	ldr	r2, [r3, #28]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	019b      	lsls	r3, r3, #6
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	3b01      	subs	r3, #1
 80022bc:	041b      	lsls	r3, r3, #16
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	061b      	lsls	r3, r3, #24
 80022c6:	491b      	ldr	r1, [pc, #108]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022cc:	4b1b      	ldr	r3, [pc, #108]	; (800233c <HAL_RCC_OscConfig+0x478>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d2:	f7fe ff07 	bl	80010e4 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022da:	f7fe ff03 	bl	80010e4 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e05c      	b.n	80023a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x416>
 80022f8:	e054      	b.n	80023a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_RCC_OscConfig+0x478>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7fe fef0 	bl	80010e4 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002308:	f7fe feec 	bl	80010e4 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e045      	b.n	80023a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_RCC_OscConfig+0x470>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x444>
 8002326:	e03d      	b.n	80023a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d107      	bne.n	8002340 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e038      	b.n	80023a6 <HAL_RCC_OscConfig+0x4e2>
 8002334:	40023800 	.word	0x40023800
 8002338:	40007000 	.word	0x40007000
 800233c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002340:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <HAL_RCC_OscConfig+0x4ec>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d028      	beq.n	80023a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d121      	bne.n	80023a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d11a      	bne.n	80023a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002370:	4013      	ands	r3, r2
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002376:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002378:	4293      	cmp	r3, r2
 800237a:	d111      	bne.n	80023a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002386:	085b      	lsrs	r3, r3, #1
 8002388:	3b01      	subs	r3, #1
 800238a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800238c:	429a      	cmp	r2, r3
 800238e:	d107      	bne.n	80023a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800239c:	429a      	cmp	r2, r3
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800

080023b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0cc      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c8:	4b68      	ldr	r3, [pc, #416]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d90c      	bls.n	80023f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b65      	ldr	r3, [pc, #404]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023de:	4b63      	ldr	r3, [pc, #396]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0b8      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d020      	beq.n	800243e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002408:	4b59      	ldr	r3, [pc, #356]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	4a58      	ldr	r2, [pc, #352]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002412:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0308 	and.w	r3, r3, #8
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002420:	4b53      	ldr	r3, [pc, #332]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4a52      	ldr	r2, [pc, #328]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800242a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800242c:	4b50      	ldr	r3, [pc, #320]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	494d      	ldr	r1, [pc, #308]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d044      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d107      	bne.n	8002462 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002452:	4b47      	ldr	r3, [pc, #284]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d119      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e07f      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d003      	beq.n	8002472 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800246e:	2b03      	cmp	r3, #3
 8002470:	d107      	bne.n	8002482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002472:	4b3f      	ldr	r3, [pc, #252]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e06f      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002482:	4b3b      	ldr	r3, [pc, #236]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e067      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002492:	4b37      	ldr	r3, [pc, #220]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f023 0203 	bic.w	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4934      	ldr	r1, [pc, #208]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a4:	f7fe fe1e 	bl	80010e4 <HAL_GetTick>
 80024a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ac:	f7fe fe1a 	bl	80010e4 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e04f      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c2:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 020c 	and.w	r2, r3, #12
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1eb      	bne.n	80024ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024d4:	4b25      	ldr	r3, [pc, #148]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d20c      	bcs.n	80024fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e2:	4b22      	ldr	r3, [pc, #136]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ea:	4b20      	ldr	r3, [pc, #128]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e032      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4916      	ldr	r1, [pc, #88]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d009      	beq.n	800253a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002526:	4b12      	ldr	r3, [pc, #72]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	490e      	ldr	r1, [pc, #56]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	4313      	orrs	r3, r2
 8002538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800253a:	f000 f821 	bl	8002580 <HAL_RCC_GetSysClockFreq>
 800253e:	4602      	mov	r2, r0
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	490a      	ldr	r1, [pc, #40]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 800254c:	5ccb      	ldrb	r3, [r1, r3]
 800254e:	fa22 f303 	lsr.w	r3, r2, r3
 8002552:	4a09      	ldr	r2, [pc, #36]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002556:	4b09      	ldr	r3, [pc, #36]	; (800257c <HAL_RCC_ClockConfig+0x1c8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe fd7e 	bl	800105c <HAL_InitTick>

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40023c00 	.word	0x40023c00
 8002570:	40023800 	.word	0x40023800
 8002574:	0800567c 	.word	0x0800567c
 8002578:	20000000 	.word	0x20000000
 800257c:	20000004 	.word	0x20000004

08002580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002584:	b094      	sub	sp, #80	; 0x50
 8002586:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	647b      	str	r3, [r7, #68]	; 0x44
 800258c:	2300      	movs	r3, #0
 800258e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002590:	2300      	movs	r3, #0
 8002592:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002598:	4b79      	ldr	r3, [pc, #484]	; (8002780 <HAL_RCC_GetSysClockFreq+0x200>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 030c 	and.w	r3, r3, #12
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d00d      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0x40>
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	f200 80e1 	bhi.w	800276c <HAL_RCC_GetSysClockFreq+0x1ec>
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0x34>
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d003      	beq.n	80025ba <HAL_RCC_GetSysClockFreq+0x3a>
 80025b2:	e0db      	b.n	800276c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025b4:	4b73      	ldr	r3, [pc, #460]	; (8002784 <HAL_RCC_GetSysClockFreq+0x204>)
 80025b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80025b8:	e0db      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ba:	4b73      	ldr	r3, [pc, #460]	; (8002788 <HAL_RCC_GetSysClockFreq+0x208>)
 80025bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025be:	e0d8      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025c0:	4b6f      	ldr	r3, [pc, #444]	; (8002780 <HAL_RCC_GetSysClockFreq+0x200>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ca:	4b6d      	ldr	r3, [pc, #436]	; (8002780 <HAL_RCC_GetSysClockFreq+0x200>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d063      	beq.n	800269e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d6:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <HAL_RCC_GetSysClockFreq+0x200>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	099b      	lsrs	r3, r3, #6
 80025dc:	2200      	movs	r2, #0
 80025de:	63bb      	str	r3, [r7, #56]	; 0x38
 80025e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e8:	633b      	str	r3, [r7, #48]	; 0x30
 80025ea:	2300      	movs	r3, #0
 80025ec:	637b      	str	r3, [r7, #52]	; 0x34
 80025ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025f2:	4622      	mov	r2, r4
 80025f4:	462b      	mov	r3, r5
 80025f6:	f04f 0000 	mov.w	r0, #0
 80025fa:	f04f 0100 	mov.w	r1, #0
 80025fe:	0159      	lsls	r1, r3, #5
 8002600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002604:	0150      	lsls	r0, r2, #5
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4621      	mov	r1, r4
 800260c:	1a51      	subs	r1, r2, r1
 800260e:	6139      	str	r1, [r7, #16]
 8002610:	4629      	mov	r1, r5
 8002612:	eb63 0301 	sbc.w	r3, r3, r1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002624:	4659      	mov	r1, fp
 8002626:	018b      	lsls	r3, r1, #6
 8002628:	4651      	mov	r1, sl
 800262a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800262e:	4651      	mov	r1, sl
 8002630:	018a      	lsls	r2, r1, #6
 8002632:	4651      	mov	r1, sl
 8002634:	ebb2 0801 	subs.w	r8, r2, r1
 8002638:	4659      	mov	r1, fp
 800263a:	eb63 0901 	sbc.w	r9, r3, r1
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800264a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800264e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002652:	4690      	mov	r8, r2
 8002654:	4699      	mov	r9, r3
 8002656:	4623      	mov	r3, r4
 8002658:	eb18 0303 	adds.w	r3, r8, r3
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	462b      	mov	r3, r5
 8002660:	eb49 0303 	adc.w	r3, r9, r3
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002672:	4629      	mov	r1, r5
 8002674:	024b      	lsls	r3, r1, #9
 8002676:	4621      	mov	r1, r4
 8002678:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800267c:	4621      	mov	r1, r4
 800267e:	024a      	lsls	r2, r1, #9
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002686:	2200      	movs	r2, #0
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28
 800268a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800268c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002690:	f7fd fdf6 	bl	8000280 <__aeabi_uldivmod>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4613      	mov	r3, r2
 800269a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800269c:	e058      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269e:	4b38      	ldr	r3, [pc, #224]	; (8002780 <HAL_RCC_GetSysClockFreq+0x200>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	099b      	lsrs	r3, r3, #6
 80026a4:	2200      	movs	r2, #0
 80026a6:	4618      	mov	r0, r3
 80026a8:	4611      	mov	r1, r2
 80026aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026ae:	623b      	str	r3, [r7, #32]
 80026b0:	2300      	movs	r3, #0
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
 80026b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026b8:	4642      	mov	r2, r8
 80026ba:	464b      	mov	r3, r9
 80026bc:	f04f 0000 	mov.w	r0, #0
 80026c0:	f04f 0100 	mov.w	r1, #0
 80026c4:	0159      	lsls	r1, r3, #5
 80026c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ca:	0150      	lsls	r0, r2, #5
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4641      	mov	r1, r8
 80026d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80026d6:	4649      	mov	r1, r9
 80026d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026f0:	ebb2 040a 	subs.w	r4, r2, sl
 80026f4:	eb63 050b 	sbc.w	r5, r3, fp
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	00eb      	lsls	r3, r5, #3
 8002702:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002706:	00e2      	lsls	r2, r4, #3
 8002708:	4614      	mov	r4, r2
 800270a:	461d      	mov	r5, r3
 800270c:	4643      	mov	r3, r8
 800270e:	18e3      	adds	r3, r4, r3
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	464b      	mov	r3, r9
 8002714:	eb45 0303 	adc.w	r3, r5, r3
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002726:	4629      	mov	r1, r5
 8002728:	028b      	lsls	r3, r1, #10
 800272a:	4621      	mov	r1, r4
 800272c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002730:	4621      	mov	r1, r4
 8002732:	028a      	lsls	r2, r1, #10
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800273a:	2200      	movs	r2, #0
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	61fa      	str	r2, [r7, #28]
 8002740:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002744:	f7fd fd9c 	bl	8000280 <__aeabi_uldivmod>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4613      	mov	r3, r2
 800274e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_GetSysClockFreq+0x200>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	0c1b      	lsrs	r3, r3, #16
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	3301      	adds	r3, #1
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002760:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002764:	fbb2 f3f3 	udiv	r3, r2, r3
 8002768:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800276a:	e002      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800276c:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_RCC_GetSysClockFreq+0x204>)
 800276e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002774:	4618      	mov	r0, r3
 8002776:	3750      	adds	r7, #80	; 0x50
 8002778:	46bd      	mov	sp, r7
 800277a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800
 8002784:	00f42400 	.word	0x00f42400
 8002788:	007a1200 	.word	0x007a1200

0800278c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002790:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000000 	.word	0x20000000

080027a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027a8:	f7ff fff0 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	0a9b      	lsrs	r3, r3, #10
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	4903      	ldr	r1, [pc, #12]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ba:	5ccb      	ldrb	r3, [r1, r3]
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40023800 	.word	0x40023800
 80027c8:	0800568c 	.word	0x0800568c

080027cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027d0:	f7ff ffdc 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	0b5b      	lsrs	r3, r3, #13
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	4903      	ldr	r1, [pc, #12]	; (80027f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027e2:	5ccb      	ldrb	r3, [r1, r3]
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40023800 	.word	0x40023800
 80027f0:	0800568c 	.word	0x0800568c

080027f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e041      	b.n	800288a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fe fa02 	bl	8000c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3304      	adds	r3, #4
 8002830:	4619      	mov	r1, r3
 8002832:	4610      	mov	r0, r2
 8002834:	f000 fc7a 	bl	800312c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d001      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e04e      	b.n	800294a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0201 	orr.w	r2, r2, #1
 80028c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a23      	ldr	r2, [pc, #140]	; (8002958 <HAL_TIM_Base_Start_IT+0xc4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d022      	beq.n	8002914 <HAL_TIM_Base_Start_IT+0x80>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d6:	d01d      	beq.n	8002914 <HAL_TIM_Base_Start_IT+0x80>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1f      	ldr	r2, [pc, #124]	; (800295c <HAL_TIM_Base_Start_IT+0xc8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d018      	beq.n	8002914 <HAL_TIM_Base_Start_IT+0x80>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1e      	ldr	r2, [pc, #120]	; (8002960 <HAL_TIM_Base_Start_IT+0xcc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d013      	beq.n	8002914 <HAL_TIM_Base_Start_IT+0x80>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <HAL_TIM_Base_Start_IT+0xd0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00e      	beq.n	8002914 <HAL_TIM_Base_Start_IT+0x80>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a1b      	ldr	r2, [pc, #108]	; (8002968 <HAL_TIM_Base_Start_IT+0xd4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d009      	beq.n	8002914 <HAL_TIM_Base_Start_IT+0x80>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a19      	ldr	r2, [pc, #100]	; (800296c <HAL_TIM_Base_Start_IT+0xd8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d004      	beq.n	8002914 <HAL_TIM_Base_Start_IT+0x80>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a18      	ldr	r2, [pc, #96]	; (8002970 <HAL_TIM_Base_Start_IT+0xdc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d111      	bne.n	8002938 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b06      	cmp	r3, #6
 8002924:	d010      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0201 	orr.w	r2, r2, #1
 8002934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002936:	e007      	b.n	8002948 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40010000 	.word	0x40010000
 800295c:	40000400 	.word	0x40000400
 8002960:	40000800 	.word	0x40000800
 8002964:	40000c00 	.word	0x40000c00
 8002968:	40010400 	.word	0x40010400
 800296c:	40014000 	.word	0x40014000
 8002970:	40001800 	.word	0x40001800

08002974 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e041      	b.n	8002a0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f839 	bl	8002a12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3304      	adds	r3, #4
 80029b0:	4619      	mov	r1, r3
 80029b2:	4610      	mov	r0, r2
 80029b4:	f000 fbba 	bl	800312c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d109      	bne.n	8002a4c <HAL_TIM_PWM_Start+0x24>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	bf14      	ite	ne
 8002a44:	2301      	movne	r3, #1
 8002a46:	2300      	moveq	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	e022      	b.n	8002a92 <HAL_TIM_PWM_Start+0x6a>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d109      	bne.n	8002a66 <HAL_TIM_PWM_Start+0x3e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	bf14      	ite	ne
 8002a5e:	2301      	movne	r3, #1
 8002a60:	2300      	moveq	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	e015      	b.n	8002a92 <HAL_TIM_PWM_Start+0x6a>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d109      	bne.n	8002a80 <HAL_TIM_PWM_Start+0x58>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	bf14      	ite	ne
 8002a78:	2301      	movne	r3, #1
 8002a7a:	2300      	moveq	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	e008      	b.n	8002a92 <HAL_TIM_PWM_Start+0x6a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	bf14      	ite	ne
 8002a8c:	2301      	movne	r3, #1
 8002a8e:	2300      	moveq	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e07c      	b.n	8002b94 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d104      	bne.n	8002aaa <HAL_TIM_PWM_Start+0x82>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aa8:	e013      	b.n	8002ad2 <HAL_TIM_PWM_Start+0xaa>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d104      	bne.n	8002aba <HAL_TIM_PWM_Start+0x92>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab8:	e00b      	b.n	8002ad2 <HAL_TIM_PWM_Start+0xaa>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d104      	bne.n	8002aca <HAL_TIM_PWM_Start+0xa2>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ac8:	e003      	b.n	8002ad2 <HAL_TIM_PWM_Start+0xaa>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2202      	movs	r2, #2
 8002ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	6839      	ldr	r1, [r7, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fe10 	bl	8003700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a2d      	ldr	r2, [pc, #180]	; (8002b9c <HAL_TIM_PWM_Start+0x174>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d004      	beq.n	8002af4 <HAL_TIM_PWM_Start+0xcc>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a2c      	ldr	r2, [pc, #176]	; (8002ba0 <HAL_TIM_PWM_Start+0x178>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d101      	bne.n	8002af8 <HAL_TIM_PWM_Start+0xd0>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <HAL_TIM_PWM_Start+0xd2>
 8002af8:	2300      	movs	r3, #0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d007      	beq.n	8002b0e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a22      	ldr	r2, [pc, #136]	; (8002b9c <HAL_TIM_PWM_Start+0x174>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d022      	beq.n	8002b5e <HAL_TIM_PWM_Start+0x136>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b20:	d01d      	beq.n	8002b5e <HAL_TIM_PWM_Start+0x136>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1f      	ldr	r2, [pc, #124]	; (8002ba4 <HAL_TIM_PWM_Start+0x17c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d018      	beq.n	8002b5e <HAL_TIM_PWM_Start+0x136>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a1d      	ldr	r2, [pc, #116]	; (8002ba8 <HAL_TIM_PWM_Start+0x180>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d013      	beq.n	8002b5e <HAL_TIM_PWM_Start+0x136>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a1c      	ldr	r2, [pc, #112]	; (8002bac <HAL_TIM_PWM_Start+0x184>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00e      	beq.n	8002b5e <HAL_TIM_PWM_Start+0x136>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a16      	ldr	r2, [pc, #88]	; (8002ba0 <HAL_TIM_PWM_Start+0x178>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d009      	beq.n	8002b5e <HAL_TIM_PWM_Start+0x136>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a18      	ldr	r2, [pc, #96]	; (8002bb0 <HAL_TIM_PWM_Start+0x188>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d004      	beq.n	8002b5e <HAL_TIM_PWM_Start+0x136>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a16      	ldr	r2, [pc, #88]	; (8002bb4 <HAL_TIM_PWM_Start+0x18c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d111      	bne.n	8002b82 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b06      	cmp	r3, #6
 8002b6e:	d010      	beq.n	8002b92 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b80:	e007      	b.n	8002b92 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 0201 	orr.w	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40010000 	.word	0x40010000
 8002ba0:	40010400 	.word	0x40010400
 8002ba4:	40000400 	.word	0x40000400
 8002ba8:	40000800 	.word	0x40000800
 8002bac:	40000c00 	.word	0x40000c00
 8002bb0:	40014000 	.word	0x40014000
 8002bb4:	40001800 	.word	0x40001800

08002bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d122      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d11b      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0202 	mvn.w	r2, #2
 8002be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa77 	bl	80030ee <HAL_TIM_IC_CaptureCallback>
 8002c00:	e005      	b.n	8002c0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fa69 	bl	80030da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fa7a 	bl	8003102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d122      	bne.n	8002c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d11b      	bne.n	8002c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0204 	mvn.w	r2, #4
 8002c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fa4d 	bl	80030ee <HAL_TIM_IC_CaptureCallback>
 8002c54:	e005      	b.n	8002c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fa3f 	bl	80030da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fa50 	bl	8003102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d122      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d11b      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0208 	mvn.w	r2, #8
 8002c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2204      	movs	r2, #4
 8002c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fa23 	bl	80030ee <HAL_TIM_IC_CaptureCallback>
 8002ca8:	e005      	b.n	8002cb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fa15 	bl	80030da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fa26 	bl	8003102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d122      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b10      	cmp	r3, #16
 8002cd6:	d11b      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0210 	mvn.w	r2, #16
 8002ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f9f9 	bl	80030ee <HAL_TIM_IC_CaptureCallback>
 8002cfc:	e005      	b.n	8002d0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f9eb 	bl	80030da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f9fc 	bl	8003102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d10e      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d107      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0201 	mvn.w	r2, #1
 8002d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fd fcf0 	bl	800071c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b80      	cmp	r3, #128	; 0x80
 8002d48:	d10e      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d54:	2b80      	cmp	r3, #128	; 0x80
 8002d56:	d107      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fdca 	bl	80038fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d72:	2b40      	cmp	r3, #64	; 0x40
 8002d74:	d10e      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	d107      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f9c1 	bl	8003116 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d10e      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d107      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0220 	mvn.w	r2, #32
 8002db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fd94 	bl	80038e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e0ae      	b.n	8002f44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b0c      	cmp	r3, #12
 8002df2:	f200 809f 	bhi.w	8002f34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002df6:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfc:	08002e31 	.word	0x08002e31
 8002e00:	08002f35 	.word	0x08002f35
 8002e04:	08002f35 	.word	0x08002f35
 8002e08:	08002f35 	.word	0x08002f35
 8002e0c:	08002e71 	.word	0x08002e71
 8002e10:	08002f35 	.word	0x08002f35
 8002e14:	08002f35 	.word	0x08002f35
 8002e18:	08002f35 	.word	0x08002f35
 8002e1c:	08002eb3 	.word	0x08002eb3
 8002e20:	08002f35 	.word	0x08002f35
 8002e24:	08002f35 	.word	0x08002f35
 8002e28:	08002f35 	.word	0x08002f35
 8002e2c:	08002ef3 	.word	0x08002ef3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fa18 	bl	800326c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0208 	orr.w	r2, r2, #8
 8002e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0204 	bic.w	r2, r2, #4
 8002e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6999      	ldr	r1, [r3, #24]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	619a      	str	r2, [r3, #24]
      break;
 8002e6e:	e064      	b.n	8002f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fa68 	bl	800334c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6999      	ldr	r1, [r3, #24]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	021a      	lsls	r2, r3, #8
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	619a      	str	r2, [r3, #24]
      break;
 8002eb0:	e043      	b.n	8002f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68b9      	ldr	r1, [r7, #8]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 fabd 	bl	8003438 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	69da      	ldr	r2, [r3, #28]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0208 	orr.w	r2, r2, #8
 8002ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	69da      	ldr	r2, [r3, #28]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0204 	bic.w	r2, r2, #4
 8002edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69d9      	ldr	r1, [r3, #28]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	61da      	str	r2, [r3, #28]
      break;
 8002ef0:	e023      	b.n	8002f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68b9      	ldr	r1, [r7, #8]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fb11 	bl	8003520 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69da      	ldr	r2, [r3, #28]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69da      	ldr	r2, [r3, #28]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69d9      	ldr	r1, [r3, #28]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	021a      	lsls	r2, r3, #8
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	61da      	str	r2, [r3, #28]
      break;
 8002f32:	e002      	b.n	8002f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	75fb      	strb	r3, [r7, #23]
      break;
 8002f38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_TIM_ConfigClockSource+0x1c>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e0b4      	b.n	80030d2 <HAL_TIM_ConfigClockSource+0x186>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa0:	d03e      	beq.n	8003020 <HAL_TIM_ConfigClockSource+0xd4>
 8002fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa6:	f200 8087 	bhi.w	80030b8 <HAL_TIM_ConfigClockSource+0x16c>
 8002faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fae:	f000 8086 	beq.w	80030be <HAL_TIM_ConfigClockSource+0x172>
 8002fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb6:	d87f      	bhi.n	80030b8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fb8:	2b70      	cmp	r3, #112	; 0x70
 8002fba:	d01a      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0xa6>
 8002fbc:	2b70      	cmp	r3, #112	; 0x70
 8002fbe:	d87b      	bhi.n	80030b8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc0:	2b60      	cmp	r3, #96	; 0x60
 8002fc2:	d050      	beq.n	8003066 <HAL_TIM_ConfigClockSource+0x11a>
 8002fc4:	2b60      	cmp	r3, #96	; 0x60
 8002fc6:	d877      	bhi.n	80030b8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc8:	2b50      	cmp	r3, #80	; 0x50
 8002fca:	d03c      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0xfa>
 8002fcc:	2b50      	cmp	r3, #80	; 0x50
 8002fce:	d873      	bhi.n	80030b8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd0:	2b40      	cmp	r3, #64	; 0x40
 8002fd2:	d058      	beq.n	8003086 <HAL_TIM_ConfigClockSource+0x13a>
 8002fd4:	2b40      	cmp	r3, #64	; 0x40
 8002fd6:	d86f      	bhi.n	80030b8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd8:	2b30      	cmp	r3, #48	; 0x30
 8002fda:	d064      	beq.n	80030a6 <HAL_TIM_ConfigClockSource+0x15a>
 8002fdc:	2b30      	cmp	r3, #48	; 0x30
 8002fde:	d86b      	bhi.n	80030b8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d060      	beq.n	80030a6 <HAL_TIM_ConfigClockSource+0x15a>
 8002fe4:	2b20      	cmp	r3, #32
 8002fe6:	d867      	bhi.n	80030b8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d05c      	beq.n	80030a6 <HAL_TIM_ConfigClockSource+0x15a>
 8002fec:	2b10      	cmp	r3, #16
 8002fee:	d05a      	beq.n	80030a6 <HAL_TIM_ConfigClockSource+0x15a>
 8002ff0:	e062      	b.n	80030b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	6899      	ldr	r1, [r3, #8]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f000 fb5d 	bl	80036c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003014:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	609a      	str	r2, [r3, #8]
      break;
 800301e:	e04f      	b.n	80030c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	6899      	ldr	r1, [r3, #8]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f000 fb46 	bl	80036c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003042:	609a      	str	r2, [r3, #8]
      break;
 8003044:	e03c      	b.n	80030c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6859      	ldr	r1, [r3, #4]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	461a      	mov	r2, r3
 8003054:	f000 faba 	bl	80035cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2150      	movs	r1, #80	; 0x50
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fb13 	bl	800368a <TIM_ITRx_SetConfig>
      break;
 8003064:	e02c      	b.n	80030c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	6859      	ldr	r1, [r3, #4]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	461a      	mov	r2, r3
 8003074:	f000 fad9 	bl	800362a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2160      	movs	r1, #96	; 0x60
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fb03 	bl	800368a <TIM_ITRx_SetConfig>
      break;
 8003084:	e01c      	b.n	80030c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	6859      	ldr	r1, [r3, #4]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	461a      	mov	r2, r3
 8003094:	f000 fa9a 	bl	80035cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2140      	movs	r1, #64	; 0x40
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 faf3 	bl	800368a <TIM_ITRx_SetConfig>
      break;
 80030a4:	e00c      	b.n	80030c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4619      	mov	r1, r3
 80030b0:	4610      	mov	r0, r2
 80030b2:	f000 faea 	bl	800368a <TIM_ITRx_SetConfig>
      break;
 80030b6:	e003      	b.n	80030c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
      break;
 80030bc:	e000      	b.n	80030c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a40      	ldr	r2, [pc, #256]	; (8003240 <TIM_Base_SetConfig+0x114>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d013      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314a:	d00f      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a3d      	ldr	r2, [pc, #244]	; (8003244 <TIM_Base_SetConfig+0x118>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d00b      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a3c      	ldr	r2, [pc, #240]	; (8003248 <TIM_Base_SetConfig+0x11c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d007      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a3b      	ldr	r2, [pc, #236]	; (800324c <TIM_Base_SetConfig+0x120>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d003      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a3a      	ldr	r2, [pc, #232]	; (8003250 <TIM_Base_SetConfig+0x124>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d108      	bne.n	800317e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a2f      	ldr	r2, [pc, #188]	; (8003240 <TIM_Base_SetConfig+0x114>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d02b      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318c:	d027      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a2c      	ldr	r2, [pc, #176]	; (8003244 <TIM_Base_SetConfig+0x118>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d023      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a2b      	ldr	r2, [pc, #172]	; (8003248 <TIM_Base_SetConfig+0x11c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d01f      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a2a      	ldr	r2, [pc, #168]	; (800324c <TIM_Base_SetConfig+0x120>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01b      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a29      	ldr	r2, [pc, #164]	; (8003250 <TIM_Base_SetConfig+0x124>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d017      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a28      	ldr	r2, [pc, #160]	; (8003254 <TIM_Base_SetConfig+0x128>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d013      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a27      	ldr	r2, [pc, #156]	; (8003258 <TIM_Base_SetConfig+0x12c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00f      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a26      	ldr	r2, [pc, #152]	; (800325c <TIM_Base_SetConfig+0x130>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00b      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a25      	ldr	r2, [pc, #148]	; (8003260 <TIM_Base_SetConfig+0x134>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d007      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a24      	ldr	r2, [pc, #144]	; (8003264 <TIM_Base_SetConfig+0x138>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d003      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a23      	ldr	r2, [pc, #140]	; (8003268 <TIM_Base_SetConfig+0x13c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d108      	bne.n	80031f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <TIM_Base_SetConfig+0x114>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d003      	beq.n	8003224 <TIM_Base_SetConfig+0xf8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a0c      	ldr	r2, [pc, #48]	; (8003250 <TIM_Base_SetConfig+0x124>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d103      	bne.n	800322c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	615a      	str	r2, [r3, #20]
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40010000 	.word	0x40010000
 8003244:	40000400 	.word	0x40000400
 8003248:	40000800 	.word	0x40000800
 800324c:	40000c00 	.word	0x40000c00
 8003250:	40010400 	.word	0x40010400
 8003254:	40014000 	.word	0x40014000
 8003258:	40014400 	.word	0x40014400
 800325c:	40014800 	.word	0x40014800
 8003260:	40001800 	.word	0x40001800
 8003264:	40001c00 	.word	0x40001c00
 8003268:	40002000 	.word	0x40002000

0800326c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	f023 0201 	bic.w	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f023 0303 	bic.w	r3, r3, #3
 80032a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f023 0302 	bic.w	r3, r3, #2
 80032b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	4313      	orrs	r3, r2
 80032be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a20      	ldr	r2, [pc, #128]	; (8003344 <TIM_OC1_SetConfig+0xd8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d003      	beq.n	80032d0 <TIM_OC1_SetConfig+0x64>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a1f      	ldr	r2, [pc, #124]	; (8003348 <TIM_OC1_SetConfig+0xdc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d10c      	bne.n	80032ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f023 0308 	bic.w	r3, r3, #8
 80032d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f023 0304 	bic.w	r3, r3, #4
 80032e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a15      	ldr	r2, [pc, #84]	; (8003344 <TIM_OC1_SetConfig+0xd8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d003      	beq.n	80032fa <TIM_OC1_SetConfig+0x8e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a14      	ldr	r2, [pc, #80]	; (8003348 <TIM_OC1_SetConfig+0xdc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d111      	bne.n	800331e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4313      	orrs	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	621a      	str	r2, [r3, #32]
}
 8003338:	bf00      	nop
 800333a:	371c      	adds	r7, #28
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	40010000 	.word	0x40010000
 8003348:	40010400 	.word	0x40010400

0800334c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	f023 0210 	bic.w	r2, r3, #16
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800337a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f023 0320 	bic.w	r3, r3, #32
 8003396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a22      	ldr	r2, [pc, #136]	; (8003430 <TIM_OC2_SetConfig+0xe4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d003      	beq.n	80033b4 <TIM_OC2_SetConfig+0x68>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a21      	ldr	r2, [pc, #132]	; (8003434 <TIM_OC2_SetConfig+0xe8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d10d      	bne.n	80033d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a17      	ldr	r2, [pc, #92]	; (8003430 <TIM_OC2_SetConfig+0xe4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d003      	beq.n	80033e0 <TIM_OC2_SetConfig+0x94>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a16      	ldr	r2, [pc, #88]	; (8003434 <TIM_OC2_SetConfig+0xe8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d113      	bne.n	8003408 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	621a      	str	r2, [r3, #32]
}
 8003422:	bf00      	nop
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40010000 	.word	0x40010000
 8003434:	40010400 	.word	0x40010400

08003438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 0303 	bic.w	r3, r3, #3
 800346e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	021b      	lsls	r3, r3, #8
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a21      	ldr	r2, [pc, #132]	; (8003518 <TIM_OC3_SetConfig+0xe0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d003      	beq.n	800349e <TIM_OC3_SetConfig+0x66>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a20      	ldr	r2, [pc, #128]	; (800351c <TIM_OC3_SetConfig+0xe4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d10d      	bne.n	80034ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a16      	ldr	r2, [pc, #88]	; (8003518 <TIM_OC3_SetConfig+0xe0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d003      	beq.n	80034ca <TIM_OC3_SetConfig+0x92>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a15      	ldr	r2, [pc, #84]	; (800351c <TIM_OC3_SetConfig+0xe4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d113      	bne.n	80034f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	621a      	str	r2, [r3, #32]
}
 800350c:	bf00      	nop
 800350e:	371c      	adds	r7, #28
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	40010000 	.word	0x40010000
 800351c:	40010400 	.word	0x40010400

08003520 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800354e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4313      	orrs	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800356a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	031b      	lsls	r3, r3, #12
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a12      	ldr	r2, [pc, #72]	; (80035c4 <TIM_OC4_SetConfig+0xa4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d003      	beq.n	8003588 <TIM_OC4_SetConfig+0x68>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a11      	ldr	r2, [pc, #68]	; (80035c8 <TIM_OC4_SetConfig+0xa8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d109      	bne.n	800359c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800358e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	019b      	lsls	r3, r3, #6
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	621a      	str	r2, [r3, #32]
}
 80035b6:	bf00      	nop
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40010000 	.word	0x40010000
 80035c8:	40010400 	.word	0x40010400

080035cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	f023 0201 	bic.w	r2, r3, #1
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f023 030a 	bic.w	r3, r3, #10
 8003608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4313      	orrs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	621a      	str	r2, [r3, #32]
}
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800362a:	b480      	push	{r7}
 800362c:	b087      	sub	sp, #28
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	f023 0210 	bic.w	r2, r3, #16
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003654:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	031b      	lsls	r3, r3, #12
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003666:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	621a      	str	r2, [r3, #32]
}
 800367e:	bf00      	nop
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f043 0307 	orr.w	r3, r3, #7
 80036ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	609a      	str	r2, [r3, #8]
}
 80036b4:	bf00      	nop
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	021a      	lsls	r2, r3, #8
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	609a      	str	r2, [r3, #8]
}
 80036f4:	bf00      	nop
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	2201      	movs	r2, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a1a      	ldr	r2, [r3, #32]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	43db      	mvns	r3, r3
 8003722:	401a      	ands	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a1a      	ldr	r2, [r3, #32]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	fa01 f303 	lsl.w	r3, r1, r3
 8003738:	431a      	orrs	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	621a      	str	r2, [r3, #32]
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003760:	2302      	movs	r3, #2
 8003762:	e05a      	b.n	800381a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a21      	ldr	r2, [pc, #132]	; (8003828 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d022      	beq.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b0:	d01d      	beq.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1d      	ldr	r2, [pc, #116]	; (800382c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d018      	beq.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a1b      	ldr	r2, [pc, #108]	; (8003830 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d013      	beq.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1a      	ldr	r2, [pc, #104]	; (8003834 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00e      	beq.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a18      	ldr	r2, [pc, #96]	; (8003838 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d009      	beq.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a17      	ldr	r2, [pc, #92]	; (800383c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d004      	beq.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a15      	ldr	r2, [pc, #84]	; (8003840 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d10c      	bne.n	8003808 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40010000 	.word	0x40010000
 800382c:	40000400 	.word	0x40000400
 8003830:	40000800 	.word	0x40000800
 8003834:	40000c00 	.word	0x40000c00
 8003838:	40010400 	.word	0x40010400
 800383c:	40014000 	.word	0x40014000
 8003840:	40001800 	.word	0x40001800

08003844 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800385c:	2302      	movs	r3, #2
 800385e:	e03d      	b.n	80038dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e03f      	b.n	80039a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fd fa3e 	bl	8000db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2224      	movs	r2, #36	; 0x24
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003952:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 ff69 	bl	800482c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003968:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695a      	ldr	r2, [r3, #20]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003978:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003988:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b08a      	sub	sp, #40	; 0x28
 80039ae:	af02      	add	r7, sp, #8
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	603b      	str	r3, [r7, #0]
 80039b6:	4613      	mov	r3, r2
 80039b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d17c      	bne.n	8003ac4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <HAL_UART_Transmit+0x2c>
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e075      	b.n	8003ac6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_UART_Transmit+0x3e>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e06e      	b.n	8003ac6 <HAL_UART_Transmit+0x11c>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2221      	movs	r2, #33	; 0x21
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039fe:	f7fd fb71 	bl	80010e4 <HAL_GetTick>
 8003a02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	88fa      	ldrh	r2, [r7, #6]
 8003a08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	88fa      	ldrh	r2, [r7, #6]
 8003a0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a18:	d108      	bne.n	8003a2c <HAL_UART_Transmit+0x82>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d104      	bne.n	8003a2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	61bb      	str	r3, [r7, #24]
 8003a2a:	e003      	b.n	8003a34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a3c:	e02a      	b.n	8003a94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2200      	movs	r2, #0
 8003a46:	2180      	movs	r1, #128	; 0x80
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 fc21 	bl	8004290 <UART_WaitOnFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e036      	b.n	8003ac6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10b      	bne.n	8003a76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	3302      	adds	r3, #2
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	e007      	b.n	8003a86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	781a      	ldrb	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	3301      	adds	r3, #1
 8003a84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1cf      	bne.n	8003a3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	2140      	movs	r1, #64	; 0x40
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fbf1 	bl	8004290 <UART_WaitOnFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e006      	b.n	8003ac6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e000      	b.n	8003ac6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ac4:	2302      	movs	r3, #2
  }
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b20      	cmp	r3, #32
 8003ae6:	d11d      	bne.n	8003b24 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <HAL_UART_Receive_DMA+0x26>
 8003aee:	88fb      	ldrh	r3, [r7, #6]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e016      	b.n	8003b26 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_UART_Receive_DMA+0x38>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e00f      	b.n	8003b26 <HAL_UART_Receive_DMA+0x58>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003b14:	88fb      	ldrh	r3, [r7, #6]
 8003b16:	461a      	mov	r2, r3
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 fc26 	bl	800436c <UART_Start_Receive_DMA>
 8003b20:	4603      	mov	r3, r0
 8003b22:	e000      	b.n	8003b26 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003b24:	2302      	movs	r3, #2
  }
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b0ba      	sub	sp, #232	; 0xe8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10f      	bne.n	8003b96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <HAL_UART_IRQHandler+0x66>
 8003b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b86:	f003 0320 	and.w	r3, r3, #32
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fd91 	bl	80046b6 <UART_Receive_IT>
      return;
 8003b94:	e256      	b.n	8004044 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 80de 	beq.w	8003d5c <HAL_UART_IRQHandler+0x22c>
 8003ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d106      	bne.n	8003bba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 80d1 	beq.w	8003d5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <HAL_UART_IRQHandler+0xae>
 8003bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f043 0201 	orr.w	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <HAL_UART_IRQHandler+0xd2>
 8003bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f043 0202 	orr.w	r2, r3, #2
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00b      	beq.n	8003c26 <HAL_UART_IRQHandler+0xf6>
 8003c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f043 0204 	orr.w	r2, r3, #4
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d011      	beq.n	8003c56 <HAL_UART_IRQHandler+0x126>
 8003c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d105      	bne.n	8003c4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d005      	beq.n	8003c56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f043 0208 	orr.w	r2, r3, #8
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 81ed 	beq.w	800403a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_UART_IRQHandler+0x14e>
 8003c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fd1c 	bl	80046b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c88:	2b40      	cmp	r3, #64	; 0x40
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2301      	moveq	r3, #1
 8003c8e:	2300      	movne	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d103      	bne.n	8003caa <HAL_UART_IRQHandler+0x17a>
 8003ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d04f      	beq.n	8003d4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fc24 	bl	80044f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cba:	2b40      	cmp	r3, #64	; 0x40
 8003cbc:	d141      	bne.n	8003d42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3314      	adds	r3, #20
 8003cc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ccc:	e853 3f00 	ldrex	r3, [r3]
 8003cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3314      	adds	r3, #20
 8003ce6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003cea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003cee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1d9      	bne.n	8003cbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d013      	beq.n	8003d3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d16:	4a7d      	ldr	r2, [pc, #500]	; (8003f0c <HAL_UART_IRQHandler+0x3dc>)
 8003d18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fd fc74 	bl	800160c <HAL_DMA_Abort_IT>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d016      	beq.n	8003d58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d34:	4610      	mov	r0, r2
 8003d36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d38:	e00e      	b.n	8003d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f99a 	bl	8004074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d40:	e00a      	b.n	8003d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f996 	bl	8004074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d48:	e006      	b.n	8003d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f992 	bl	8004074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d56:	e170      	b.n	800403a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d58:	bf00      	nop
    return;
 8003d5a:	e16e      	b.n	800403a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	f040 814a 	bne.w	8003ffa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 8143 	beq.w	8003ffa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 813c 	beq.w	8003ffa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d82:	2300      	movs	r3, #0
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	60bb      	str	r3, [r7, #8]
 8003d96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da2:	2b40      	cmp	r3, #64	; 0x40
 8003da4:	f040 80b4 	bne.w	8003f10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003db4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 8140 	beq.w	800403e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	f080 8139 	bcs.w	800403e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dde:	f000 8088 	beq.w	8003ef2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	330c      	adds	r3, #12
 8003de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003df0:	e853 3f00 	ldrex	r3, [r3]
 8003df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	330c      	adds	r3, #12
 8003e0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e1e:	e841 2300 	strex	r3, r2, [r1]
 8003e22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1d9      	bne.n	8003de2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3314      	adds	r3, #20
 8003e34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3314      	adds	r3, #20
 8003e4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e1      	bne.n	8003e2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3314      	adds	r3, #20
 8003e70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	3314      	adds	r3, #20
 8003e8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e3      	bne.n	8003e6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eba:	e853 3f00 	ldrex	r3, [r3]
 8003ebe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec2:	f023 0310 	bic.w	r3, r3, #16
 8003ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	330c      	adds	r3, #12
 8003ed0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ed4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ed6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003eda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e3      	bne.n	8003eb0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fd fb1d 	bl	800152c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	4619      	mov	r1, r3
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f8c0 	bl	8004088 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f08:	e099      	b.n	800403e <HAL_UART_IRQHandler+0x50e>
 8003f0a:	bf00      	nop
 8003f0c:	080045bf 	.word	0x080045bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 808b 	beq.w	8004042 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003f2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 8086 	beq.w	8004042 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	330c      	adds	r3, #12
 8003f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	330c      	adds	r3, #12
 8003f56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f5a:	647a      	str	r2, [r7, #68]	; 0x44
 8003f5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e3      	bne.n	8003f36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3314      	adds	r3, #20
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3314      	adds	r3, #20
 8003f8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f92:	633a      	str	r2, [r7, #48]	; 0x30
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e3      	bne.n	8003f6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0310 	bic.w	r3, r3, #16
 8003fca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	330c      	adds	r3, #12
 8003fd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003fd8:	61fa      	str	r2, [r7, #28]
 8003fda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fdc:	69b9      	ldr	r1, [r7, #24]
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	e841 2300 	strex	r3, r2, [r1]
 8003fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e3      	bne.n	8003fb4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f848 	bl	8004088 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ff8:	e023      	b.n	8004042 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004002:	2b00      	cmp	r3, #0
 8004004:	d009      	beq.n	800401a <HAL_UART_IRQHandler+0x4ea>
 8004006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800400a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fae7 	bl	80045e6 <UART_Transmit_IT>
    return;
 8004018:	e014      	b.n	8004044 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800401a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800401e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00e      	beq.n	8004044 <HAL_UART_IRQHandler+0x514>
 8004026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800402a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fb27 	bl	8004686 <UART_EndTransmit_IT>
    return;
 8004038:	e004      	b.n	8004044 <HAL_UART_IRQHandler+0x514>
    return;
 800403a:	bf00      	nop
 800403c:	e002      	b.n	8004044 <HAL_UART_IRQHandler+0x514>
      return;
 800403e:	bf00      	nop
 8004040:	e000      	b.n	8004044 <HAL_UART_IRQHandler+0x514>
      return;
 8004042:	bf00      	nop
  }
}
 8004044:	37e8      	adds	r7, #232	; 0xe8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop

0800404c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b09c      	sub	sp, #112	; 0x70
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d172      	bne.n	80041a2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80040bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040be:	2200      	movs	r2, #0
 80040c0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	330c      	adds	r3, #12
 80040c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040cc:	e853 3f00 	ldrex	r3, [r3]
 80040d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80040da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	330c      	adds	r3, #12
 80040e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80040e4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e5      	bne.n	80040c2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3314      	adds	r3, #20
 80040fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	667b      	str	r3, [r7, #100]	; 0x64
 800410e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3314      	adds	r3, #20
 8004114:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004116:	647a      	str	r2, [r7, #68]	; 0x44
 8004118:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800411c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e5      	bne.n	80040f6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800412a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3314      	adds	r3, #20
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	623b      	str	r3, [r7, #32]
   return(result);
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004140:	663b      	str	r3, [r7, #96]	; 0x60
 8004142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3314      	adds	r3, #20
 8004148:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800414a:	633a      	str	r2, [r7, #48]	; 0x30
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004152:	e841 2300 	strex	r3, r2, [r1]
 8004156:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e5      	bne.n	800412a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800415e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004160:	2220      	movs	r2, #32
 8004162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	2b01      	cmp	r3, #1
 800416c:	d119      	bne.n	80041a2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800416e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	330c      	adds	r3, #12
 8004174:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	60fb      	str	r3, [r7, #12]
   return(result);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f023 0310 	bic.w	r3, r3, #16
 8004184:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	330c      	adds	r3, #12
 800418c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800418e:	61fa      	str	r2, [r7, #28]
 8004190:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	69b9      	ldr	r1, [r7, #24]
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	617b      	str	r3, [r7, #20]
   return(result);
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e5      	bne.n	800416e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d106      	bne.n	80041b8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041ae:	4619      	mov	r1, r3
 80041b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80041b2:	f7ff ff69 	bl	8004088 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041b6:	e002      	b.n	80041be <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80041b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80041ba:	f7fc fedb 	bl	8000f74 <HAL_UART_RxCpltCallback>
}
 80041be:	bf00      	nop
 80041c0:	3770      	adds	r7, #112	; 0x70
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d108      	bne.n	80041ee <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041e0:	085b      	lsrs	r3, r3, #1
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	4619      	mov	r1, r3
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f7ff ff4e 	bl	8004088 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041ec:	e002      	b.n	80041f4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f7ff ff36 	bl	8004060 <HAL_UART_RxHalfCpltCallback>
}
 80041f4:	bf00      	nop
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004218:	2b80      	cmp	r3, #128	; 0x80
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b21      	cmp	r3, #33	; 0x21
 800422e:	d108      	bne.n	8004242 <UART_DMAError+0x46>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d005      	beq.n	8004242 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2200      	movs	r2, #0
 800423a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800423c:	68b8      	ldr	r0, [r7, #8]
 800423e:	f000 f933 	bl	80044a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424c:	2b40      	cmp	r3, #64	; 0x40
 800424e:	bf0c      	ite	eq
 8004250:	2301      	moveq	r3, #1
 8004252:	2300      	movne	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b22      	cmp	r3, #34	; 0x22
 8004262:	d108      	bne.n	8004276 <UART_DMAError+0x7a>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d005      	beq.n	8004276 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2200      	movs	r2, #0
 800426e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004270:	68b8      	ldr	r0, [r7, #8]
 8004272:	f000 f941 	bl	80044f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	f043 0210 	orr.w	r2, r3, #16
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004282:	68b8      	ldr	r0, [r7, #8]
 8004284:	f7ff fef6 	bl	8004074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004288:	bf00      	nop
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b090      	sub	sp, #64	; 0x40
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042a0:	e050      	b.n	8004344 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a8:	d04c      	beq.n	8004344 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d007      	beq.n	80042c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80042b0:	f7fc ff18 	bl	80010e4 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042bc:	429a      	cmp	r2, r3
 80042be:	d241      	bcs.n	8004344 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	330c      	adds	r3, #12
 80042c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	e853 3f00 	ldrex	r3, [r3]
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	330c      	adds	r3, #12
 80042de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042e0:	637a      	str	r2, [r7, #52]	; 0x34
 80042e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042e8:	e841 2300 	strex	r3, r2, [r1]
 80042ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1e5      	bne.n	80042c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3314      	adds	r3, #20
 80042fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	e853 3f00 	ldrex	r3, [r3]
 8004302:	613b      	str	r3, [r7, #16]
   return(result);
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f023 0301 	bic.w	r3, r3, #1
 800430a:	63bb      	str	r3, [r7, #56]	; 0x38
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3314      	adds	r3, #20
 8004312:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004314:	623a      	str	r2, [r7, #32]
 8004316:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004318:	69f9      	ldr	r1, [r7, #28]
 800431a:	6a3a      	ldr	r2, [r7, #32]
 800431c:	e841 2300 	strex	r3, r2, [r1]
 8004320:	61bb      	str	r3, [r7, #24]
   return(result);
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1e5      	bne.n	80042f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e00f      	b.n	8004364 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	4013      	ands	r3, r2
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	429a      	cmp	r2, r3
 8004352:	bf0c      	ite	eq
 8004354:	2301      	moveq	r3, #1
 8004356:	2300      	movne	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	461a      	mov	r2, r3
 800435c:	79fb      	ldrb	r3, [r7, #7]
 800435e:	429a      	cmp	r2, r3
 8004360:	d09f      	beq.n	80042a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3740      	adds	r7, #64	; 0x40
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b098      	sub	sp, #96	; 0x60
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	4613      	mov	r3, r2
 8004378:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	88fa      	ldrh	r2, [r7, #6]
 8004384:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2222      	movs	r2, #34	; 0x22
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004398:	4a40      	ldr	r2, [pc, #256]	; (800449c <UART_Start_Receive_DMA+0x130>)
 800439a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a0:	4a3f      	ldr	r2, [pc, #252]	; (80044a0 <UART_Start_Receive_DMA+0x134>)
 80043a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	4a3e      	ldr	r2, [pc, #248]	; (80044a4 <UART_Start_Receive_DMA+0x138>)
 80043aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	2200      	movs	r2, #0
 80043b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80043b4:	f107 0308 	add.w	r3, r7, #8
 80043b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4619      	mov	r1, r3
 80043c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	88fb      	ldrh	r3, [r7, #6]
 80043cc:	f7fd f856 	bl	800147c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80043d0:	2300      	movs	r3, #0
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	613b      	str	r3, [r7, #16]
 80043e4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d019      	beq.n	800442a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	330c      	adds	r3, #12
 80043fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800440c:	65bb      	str	r3, [r7, #88]	; 0x58
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	330c      	adds	r3, #12
 8004414:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004416:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004418:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800441c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e5      	bne.n	80043f6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3314      	adds	r3, #20
 8004430:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	657b      	str	r3, [r7, #84]	; 0x54
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3314      	adds	r3, #20
 8004448:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800444a:	63ba      	str	r2, [r7, #56]	; 0x38
 800444c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004450:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004452:	e841 2300 	strex	r3, r2, [r1]
 8004456:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1e5      	bne.n	800442a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3314      	adds	r3, #20
 8004464:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	e853 3f00 	ldrex	r3, [r3]
 800446c:	617b      	str	r3, [r7, #20]
   return(result);
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004474:	653b      	str	r3, [r7, #80]	; 0x50
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3314      	adds	r3, #20
 800447c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800447e:	627a      	str	r2, [r7, #36]	; 0x24
 8004480:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004482:	6a39      	ldr	r1, [r7, #32]
 8004484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004486:	e841 2300 	strex	r3, r2, [r1]
 800448a:	61fb      	str	r3, [r7, #28]
   return(result);
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1e5      	bne.n	800445e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3760      	adds	r7, #96	; 0x60
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	080040a1 	.word	0x080040a1
 80044a0:	080041c7 	.word	0x080041c7
 80044a4:	080041fd 	.word	0x080041fd

080044a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b089      	sub	sp, #36	; 0x24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	330c      	adds	r3, #12
 80044b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	e853 3f00 	ldrex	r3, [r3]
 80044be:	60bb      	str	r3, [r7, #8]
   return(result);
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80044c6:	61fb      	str	r3, [r7, #28]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	330c      	adds	r3, #12
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	61ba      	str	r2, [r7, #24]
 80044d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	6979      	ldr	r1, [r7, #20]
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	e841 2300 	strex	r3, r2, [r1]
 80044dc:	613b      	str	r3, [r7, #16]
   return(result);
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e5      	bne.n	80044b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80044ec:	bf00      	nop
 80044ee:	3724      	adds	r7, #36	; 0x24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b095      	sub	sp, #84	; 0x54
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	330c      	adds	r3, #12
 8004506:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004512:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	330c      	adds	r3, #12
 800451e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004520:	643a      	str	r2, [r7, #64]	; 0x40
 8004522:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004526:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800452e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e5      	bne.n	8004500 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3314      	adds	r3, #20
 800453a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	e853 3f00 	ldrex	r3, [r3]
 8004542:	61fb      	str	r3, [r7, #28]
   return(result);
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f023 0301 	bic.w	r3, r3, #1
 800454a:	64bb      	str	r3, [r7, #72]	; 0x48
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3314      	adds	r3, #20
 8004552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004554:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800455a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800455c:	e841 2300 	strex	r3, r2, [r1]
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e5      	bne.n	8004534 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	2b01      	cmp	r3, #1
 800456e:	d119      	bne.n	80045a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	330c      	adds	r3, #12
 8004576:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	e853 3f00 	ldrex	r3, [r3]
 800457e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f023 0310 	bic.w	r3, r3, #16
 8004586:	647b      	str	r3, [r7, #68]	; 0x44
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	330c      	adds	r3, #12
 800458e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004590:	61ba      	str	r2, [r7, #24]
 8004592:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6979      	ldr	r1, [r7, #20]
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	613b      	str	r3, [r7, #16]
   return(result);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e5      	bne.n	8004570 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045b2:	bf00      	nop
 80045b4:	3754      	adds	r7, #84	; 0x54
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff fd4b 	bl	8004074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045de:	bf00      	nop
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b21      	cmp	r3, #33	; 0x21
 80045f8:	d13e      	bne.n	8004678 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004602:	d114      	bne.n	800462e <UART_Transmit_IT+0x48>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d110      	bne.n	800462e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	461a      	mov	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004620:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	1c9a      	adds	r2, r3, #2
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	621a      	str	r2, [r3, #32]
 800462c:	e008      	b.n	8004640 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	1c59      	adds	r1, r3, #1
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6211      	str	r1, [r2, #32]
 8004638:	781a      	ldrb	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29b      	uxth	r3, r3
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	4619      	mov	r1, r3
 800464e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10f      	bne.n	8004674 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004662:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004672:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	e000      	b.n	800467a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004678:	2302      	movs	r3, #2
  }
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800469c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7ff fcd0 	bl	800404c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b08c      	sub	sp, #48	; 0x30
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b22      	cmp	r3, #34	; 0x22
 80046c8:	f040 80ab 	bne.w	8004822 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d4:	d117      	bne.n	8004706 <UART_Receive_IT+0x50>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d113      	bne.n	8004706 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	1c9a      	adds	r2, r3, #2
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	629a      	str	r2, [r3, #40]	; 0x28
 8004704:	e026      	b.n	8004754 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800470c:	2300      	movs	r3, #0
 800470e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004718:	d007      	beq.n	800472a <UART_Receive_IT+0x74>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <UART_Receive_IT+0x82>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	b2da      	uxtb	r2, r3
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	e008      	b.n	800474a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004744:	b2da      	uxtb	r2, r3
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29b      	uxth	r3, r3
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	4619      	mov	r1, r3
 8004762:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004764:	2b00      	cmp	r3, #0
 8004766:	d15a      	bne.n	800481e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0220 	bic.w	r2, r2, #32
 8004776:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004786:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695a      	ldr	r2, [r3, #20]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0201 	bic.w	r2, r2, #1
 8004796:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d135      	bne.n	8004814 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	330c      	adds	r3, #12
 80047b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	613b      	str	r3, [r7, #16]
   return(result);
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f023 0310 	bic.w	r3, r3, #16
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	330c      	adds	r3, #12
 80047cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ce:	623a      	str	r2, [r7, #32]
 80047d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d2:	69f9      	ldr	r1, [r7, #28]
 80047d4:	6a3a      	ldr	r2, [r7, #32]
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	61bb      	str	r3, [r7, #24]
   return(result);
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1e5      	bne.n	80047ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b10      	cmp	r3, #16
 80047ee:	d10a      	bne.n	8004806 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047f0:	2300      	movs	r3, #0
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800480a:	4619      	mov	r1, r3
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff fc3b 	bl	8004088 <HAL_UARTEx_RxEventCallback>
 8004812:	e002      	b.n	800481a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7fc fbad 	bl	8000f74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	e002      	b.n	8004824 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	e000      	b.n	8004824 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004822:	2302      	movs	r3, #2
  }
}
 8004824:	4618      	mov	r0, r3
 8004826:	3730      	adds	r7, #48	; 0x30
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800482c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004830:	b0c0      	sub	sp, #256	; 0x100
 8004832:	af00      	add	r7, sp, #0
 8004834:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004848:	68d9      	ldr	r1, [r3, #12]
 800484a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	ea40 0301 	orr.w	r3, r0, r1
 8004854:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	431a      	orrs	r2, r3
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	431a      	orrs	r2, r3
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004884:	f021 010c 	bic.w	r1, r1, #12
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004892:	430b      	orrs	r3, r1
 8004894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a6:	6999      	ldr	r1, [r3, #24]
 80048a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	ea40 0301 	orr.w	r3, r0, r1
 80048b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4b8f      	ldr	r3, [pc, #572]	; (8004af8 <UART_SetConfig+0x2cc>)
 80048bc:	429a      	cmp	r2, r3
 80048be:	d005      	beq.n	80048cc <UART_SetConfig+0xa0>
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	4b8d      	ldr	r3, [pc, #564]	; (8004afc <UART_SetConfig+0x2d0>)
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d104      	bne.n	80048d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048cc:	f7fd ff7e 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 80048d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048d4:	e003      	b.n	80048de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048d6:	f7fd ff65 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 80048da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048e8:	f040 810c 	bne.w	8004b04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048f0:	2200      	movs	r2, #0
 80048f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048fe:	4622      	mov	r2, r4
 8004900:	462b      	mov	r3, r5
 8004902:	1891      	adds	r1, r2, r2
 8004904:	65b9      	str	r1, [r7, #88]	; 0x58
 8004906:	415b      	adcs	r3, r3
 8004908:	65fb      	str	r3, [r7, #92]	; 0x5c
 800490a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800490e:	4621      	mov	r1, r4
 8004910:	eb12 0801 	adds.w	r8, r2, r1
 8004914:	4629      	mov	r1, r5
 8004916:	eb43 0901 	adc.w	r9, r3, r1
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004926:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800492a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800492e:	4690      	mov	r8, r2
 8004930:	4699      	mov	r9, r3
 8004932:	4623      	mov	r3, r4
 8004934:	eb18 0303 	adds.w	r3, r8, r3
 8004938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800493c:	462b      	mov	r3, r5
 800493e:	eb49 0303 	adc.w	r3, r9, r3
 8004942:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004952:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004956:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800495a:	460b      	mov	r3, r1
 800495c:	18db      	adds	r3, r3, r3
 800495e:	653b      	str	r3, [r7, #80]	; 0x50
 8004960:	4613      	mov	r3, r2
 8004962:	eb42 0303 	adc.w	r3, r2, r3
 8004966:	657b      	str	r3, [r7, #84]	; 0x54
 8004968:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800496c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004970:	f7fb fc86 	bl	8000280 <__aeabi_uldivmod>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4b61      	ldr	r3, [pc, #388]	; (8004b00 <UART_SetConfig+0x2d4>)
 800497a:	fba3 2302 	umull	r2, r3, r3, r2
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	011c      	lsls	r4, r3, #4
 8004982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004986:	2200      	movs	r2, #0
 8004988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800498c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004990:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004994:	4642      	mov	r2, r8
 8004996:	464b      	mov	r3, r9
 8004998:	1891      	adds	r1, r2, r2
 800499a:	64b9      	str	r1, [r7, #72]	; 0x48
 800499c:	415b      	adcs	r3, r3
 800499e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049a4:	4641      	mov	r1, r8
 80049a6:	eb12 0a01 	adds.w	sl, r2, r1
 80049aa:	4649      	mov	r1, r9
 80049ac:	eb43 0b01 	adc.w	fp, r3, r1
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049c4:	4692      	mov	sl, r2
 80049c6:	469b      	mov	fp, r3
 80049c8:	4643      	mov	r3, r8
 80049ca:	eb1a 0303 	adds.w	r3, sl, r3
 80049ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049d2:	464b      	mov	r3, r9
 80049d4:	eb4b 0303 	adc.w	r3, fp, r3
 80049d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049f0:	460b      	mov	r3, r1
 80049f2:	18db      	adds	r3, r3, r3
 80049f4:	643b      	str	r3, [r7, #64]	; 0x40
 80049f6:	4613      	mov	r3, r2
 80049f8:	eb42 0303 	adc.w	r3, r2, r3
 80049fc:	647b      	str	r3, [r7, #68]	; 0x44
 80049fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a06:	f7fb fc3b 	bl	8000280 <__aeabi_uldivmod>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4611      	mov	r1, r2
 8004a10:	4b3b      	ldr	r3, [pc, #236]	; (8004b00 <UART_SetConfig+0x2d4>)
 8004a12:	fba3 2301 	umull	r2, r3, r3, r1
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	2264      	movs	r2, #100	; 0x64
 8004a1a:	fb02 f303 	mul.w	r3, r2, r3
 8004a1e:	1acb      	subs	r3, r1, r3
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a26:	4b36      	ldr	r3, [pc, #216]	; (8004b00 <UART_SetConfig+0x2d4>)
 8004a28:	fba3 2302 	umull	r2, r3, r3, r2
 8004a2c:	095b      	lsrs	r3, r3, #5
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a34:	441c      	add	r4, r3
 8004a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a48:	4642      	mov	r2, r8
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	1891      	adds	r1, r2, r2
 8004a4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a50:	415b      	adcs	r3, r3
 8004a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a58:	4641      	mov	r1, r8
 8004a5a:	1851      	adds	r1, r2, r1
 8004a5c:	6339      	str	r1, [r7, #48]	; 0x30
 8004a5e:	4649      	mov	r1, r9
 8004a60:	414b      	adcs	r3, r1
 8004a62:	637b      	str	r3, [r7, #52]	; 0x34
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a70:	4659      	mov	r1, fp
 8004a72:	00cb      	lsls	r3, r1, #3
 8004a74:	4651      	mov	r1, sl
 8004a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a7a:	4651      	mov	r1, sl
 8004a7c:	00ca      	lsls	r2, r1, #3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	4619      	mov	r1, r3
 8004a82:	4603      	mov	r3, r0
 8004a84:	4642      	mov	r2, r8
 8004a86:	189b      	adds	r3, r3, r2
 8004a88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a8c:	464b      	mov	r3, r9
 8004a8e:	460a      	mov	r2, r1
 8004a90:	eb42 0303 	adc.w	r3, r2, r3
 8004a94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004aa4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004aa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004aac:	460b      	mov	r3, r1
 8004aae:	18db      	adds	r3, r3, r3
 8004ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	eb42 0303 	adc.w	r3, r2, r3
 8004ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004abe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ac2:	f7fb fbdd 	bl	8000280 <__aeabi_uldivmod>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <UART_SetConfig+0x2d4>)
 8004acc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad0:	095b      	lsrs	r3, r3, #5
 8004ad2:	2164      	movs	r1, #100	; 0x64
 8004ad4:	fb01 f303 	mul.w	r3, r1, r3
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	3332      	adds	r3, #50	; 0x32
 8004ade:	4a08      	ldr	r2, [pc, #32]	; (8004b00 <UART_SetConfig+0x2d4>)
 8004ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae4:	095b      	lsrs	r3, r3, #5
 8004ae6:	f003 0207 	and.w	r2, r3, #7
 8004aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4422      	add	r2, r4
 8004af2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004af4:	e105      	b.n	8004d02 <UART_SetConfig+0x4d6>
 8004af6:	bf00      	nop
 8004af8:	40011000 	.word	0x40011000
 8004afc:	40011400 	.word	0x40011400
 8004b00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b16:	4642      	mov	r2, r8
 8004b18:	464b      	mov	r3, r9
 8004b1a:	1891      	adds	r1, r2, r2
 8004b1c:	6239      	str	r1, [r7, #32]
 8004b1e:	415b      	adcs	r3, r3
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24
 8004b22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b26:	4641      	mov	r1, r8
 8004b28:	1854      	adds	r4, r2, r1
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	eb43 0501 	adc.w	r5, r3, r1
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	f04f 0300 	mov.w	r3, #0
 8004b38:	00eb      	lsls	r3, r5, #3
 8004b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b3e:	00e2      	lsls	r2, r4, #3
 8004b40:	4614      	mov	r4, r2
 8004b42:	461d      	mov	r5, r3
 8004b44:	4643      	mov	r3, r8
 8004b46:	18e3      	adds	r3, r4, r3
 8004b48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b4c:	464b      	mov	r3, r9
 8004b4e:	eb45 0303 	adc.w	r3, r5, r3
 8004b52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b72:	4629      	mov	r1, r5
 8004b74:	008b      	lsls	r3, r1, #2
 8004b76:	4621      	mov	r1, r4
 8004b78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	008a      	lsls	r2, r1, #2
 8004b80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b84:	f7fb fb7c 	bl	8000280 <__aeabi_uldivmod>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4b60      	ldr	r3, [pc, #384]	; (8004d10 <UART_SetConfig+0x4e4>)
 8004b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	011c      	lsls	r4, r3, #4
 8004b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ba0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ba4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ba8:	4642      	mov	r2, r8
 8004baa:	464b      	mov	r3, r9
 8004bac:	1891      	adds	r1, r2, r2
 8004bae:	61b9      	str	r1, [r7, #24]
 8004bb0:	415b      	adcs	r3, r3
 8004bb2:	61fb      	str	r3, [r7, #28]
 8004bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bb8:	4641      	mov	r1, r8
 8004bba:	1851      	adds	r1, r2, r1
 8004bbc:	6139      	str	r1, [r7, #16]
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	414b      	adcs	r3, r1
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bd0:	4659      	mov	r1, fp
 8004bd2:	00cb      	lsls	r3, r1, #3
 8004bd4:	4651      	mov	r1, sl
 8004bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bda:	4651      	mov	r1, sl
 8004bdc:	00ca      	lsls	r2, r1, #3
 8004bde:	4610      	mov	r0, r2
 8004be0:	4619      	mov	r1, r3
 8004be2:	4603      	mov	r3, r0
 8004be4:	4642      	mov	r2, r8
 8004be6:	189b      	adds	r3, r3, r2
 8004be8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bec:	464b      	mov	r3, r9
 8004bee:	460a      	mov	r2, r1
 8004bf0:	eb42 0303 	adc.w	r3, r2, r3
 8004bf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c10:	4649      	mov	r1, r9
 8004c12:	008b      	lsls	r3, r1, #2
 8004c14:	4641      	mov	r1, r8
 8004c16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c1a:	4641      	mov	r1, r8
 8004c1c:	008a      	lsls	r2, r1, #2
 8004c1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c22:	f7fb fb2d 	bl	8000280 <__aeabi_uldivmod>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4b39      	ldr	r3, [pc, #228]	; (8004d10 <UART_SetConfig+0x4e4>)
 8004c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c30:	095b      	lsrs	r3, r3, #5
 8004c32:	2164      	movs	r1, #100	; 0x64
 8004c34:	fb01 f303 	mul.w	r3, r1, r3
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	3332      	adds	r3, #50	; 0x32
 8004c3e:	4a34      	ldr	r2, [pc, #208]	; (8004d10 <UART_SetConfig+0x4e4>)
 8004c40:	fba2 2303 	umull	r2, r3, r2, r3
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c4a:	441c      	add	r4, r3
 8004c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c50:	2200      	movs	r2, #0
 8004c52:	673b      	str	r3, [r7, #112]	; 0x70
 8004c54:	677a      	str	r2, [r7, #116]	; 0x74
 8004c56:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c5a:	4642      	mov	r2, r8
 8004c5c:	464b      	mov	r3, r9
 8004c5e:	1891      	adds	r1, r2, r2
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	415b      	adcs	r3, r3
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c6a:	4641      	mov	r1, r8
 8004c6c:	1851      	adds	r1, r2, r1
 8004c6e:	6039      	str	r1, [r7, #0]
 8004c70:	4649      	mov	r1, r9
 8004c72:	414b      	adcs	r3, r1
 8004c74:	607b      	str	r3, [r7, #4]
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c82:	4659      	mov	r1, fp
 8004c84:	00cb      	lsls	r3, r1, #3
 8004c86:	4651      	mov	r1, sl
 8004c88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c8c:	4651      	mov	r1, sl
 8004c8e:	00ca      	lsls	r2, r1, #3
 8004c90:	4610      	mov	r0, r2
 8004c92:	4619      	mov	r1, r3
 8004c94:	4603      	mov	r3, r0
 8004c96:	4642      	mov	r2, r8
 8004c98:	189b      	adds	r3, r3, r2
 8004c9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c9c:	464b      	mov	r3, r9
 8004c9e:	460a      	mov	r2, r1
 8004ca0:	eb42 0303 	adc.w	r3, r2, r3
 8004ca4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	663b      	str	r3, [r7, #96]	; 0x60
 8004cb0:	667a      	str	r2, [r7, #100]	; 0x64
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	008b      	lsls	r3, r1, #2
 8004cc2:	4641      	mov	r1, r8
 8004cc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cc8:	4641      	mov	r1, r8
 8004cca:	008a      	lsls	r2, r1, #2
 8004ccc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004cd0:	f7fb fad6 	bl	8000280 <__aeabi_uldivmod>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <UART_SetConfig+0x4e4>)
 8004cda:	fba3 1302 	umull	r1, r3, r3, r2
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	2164      	movs	r1, #100	; 0x64
 8004ce2:	fb01 f303 	mul.w	r3, r1, r3
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	3332      	adds	r3, #50	; 0x32
 8004cec:	4a08      	ldr	r2, [pc, #32]	; (8004d10 <UART_SetConfig+0x4e4>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	095b      	lsrs	r3, r3, #5
 8004cf4:	f003 020f 	and.w	r2, r3, #15
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4422      	add	r2, r4
 8004d00:	609a      	str	r2, [r3, #8]
}
 8004d02:	bf00      	nop
 8004d04:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d0e:	bf00      	nop
 8004d10:	51eb851f 	.word	0x51eb851f

08004d14 <__errno>:
 8004d14:	4b01      	ldr	r3, [pc, #4]	; (8004d1c <__errno+0x8>)
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	2000000c 	.word	0x2000000c

08004d20 <__libc_init_array>:
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	4d0d      	ldr	r5, [pc, #52]	; (8004d58 <__libc_init_array+0x38>)
 8004d24:	4c0d      	ldr	r4, [pc, #52]	; (8004d5c <__libc_init_array+0x3c>)
 8004d26:	1b64      	subs	r4, r4, r5
 8004d28:	10a4      	asrs	r4, r4, #2
 8004d2a:	2600      	movs	r6, #0
 8004d2c:	42a6      	cmp	r6, r4
 8004d2e:	d109      	bne.n	8004d44 <__libc_init_array+0x24>
 8004d30:	4d0b      	ldr	r5, [pc, #44]	; (8004d60 <__libc_init_array+0x40>)
 8004d32:	4c0c      	ldr	r4, [pc, #48]	; (8004d64 <__libc_init_array+0x44>)
 8004d34:	f000 fc8e 	bl	8005654 <_init>
 8004d38:	1b64      	subs	r4, r4, r5
 8004d3a:	10a4      	asrs	r4, r4, #2
 8004d3c:	2600      	movs	r6, #0
 8004d3e:	42a6      	cmp	r6, r4
 8004d40:	d105      	bne.n	8004d4e <__libc_init_array+0x2e>
 8004d42:	bd70      	pop	{r4, r5, r6, pc}
 8004d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d48:	4798      	blx	r3
 8004d4a:	3601      	adds	r6, #1
 8004d4c:	e7ee      	b.n	8004d2c <__libc_init_array+0xc>
 8004d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d52:	4798      	blx	r3
 8004d54:	3601      	adds	r6, #1
 8004d56:	e7f2      	b.n	8004d3e <__libc_init_array+0x1e>
 8004d58:	080056d8 	.word	0x080056d8
 8004d5c:	080056d8 	.word	0x080056d8
 8004d60:	080056d8 	.word	0x080056d8
 8004d64:	080056dc 	.word	0x080056dc

08004d68 <memset>:
 8004d68:	4402      	add	r2, r0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d100      	bne.n	8004d72 <memset+0xa>
 8004d70:	4770      	bx	lr
 8004d72:	f803 1b01 	strb.w	r1, [r3], #1
 8004d76:	e7f9      	b.n	8004d6c <memset+0x4>

08004d78 <_vsiprintf_r>:
 8004d78:	b500      	push	{lr}
 8004d7a:	b09b      	sub	sp, #108	; 0x6c
 8004d7c:	9100      	str	r1, [sp, #0]
 8004d7e:	9104      	str	r1, [sp, #16]
 8004d80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d84:	9105      	str	r1, [sp, #20]
 8004d86:	9102      	str	r1, [sp, #8]
 8004d88:	4905      	ldr	r1, [pc, #20]	; (8004da0 <_vsiprintf_r+0x28>)
 8004d8a:	9103      	str	r1, [sp, #12]
 8004d8c:	4669      	mov	r1, sp
 8004d8e:	f000 f86f 	bl	8004e70 <_svfiprintf_r>
 8004d92:	9b00      	ldr	r3, [sp, #0]
 8004d94:	2200      	movs	r2, #0
 8004d96:	701a      	strb	r2, [r3, #0]
 8004d98:	b01b      	add	sp, #108	; 0x6c
 8004d9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d9e:	bf00      	nop
 8004da0:	ffff0208 	.word	0xffff0208

08004da4 <vsiprintf>:
 8004da4:	4613      	mov	r3, r2
 8004da6:	460a      	mov	r2, r1
 8004da8:	4601      	mov	r1, r0
 8004daa:	4802      	ldr	r0, [pc, #8]	; (8004db4 <vsiprintf+0x10>)
 8004dac:	6800      	ldr	r0, [r0, #0]
 8004dae:	f7ff bfe3 	b.w	8004d78 <_vsiprintf_r>
 8004db2:	bf00      	nop
 8004db4:	2000000c 	.word	0x2000000c

08004db8 <__ssputs_r>:
 8004db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dbc:	688e      	ldr	r6, [r1, #8]
 8004dbe:	429e      	cmp	r6, r3
 8004dc0:	4682      	mov	sl, r0
 8004dc2:	460c      	mov	r4, r1
 8004dc4:	4690      	mov	r8, r2
 8004dc6:	461f      	mov	r7, r3
 8004dc8:	d838      	bhi.n	8004e3c <__ssputs_r+0x84>
 8004dca:	898a      	ldrh	r2, [r1, #12]
 8004dcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004dd0:	d032      	beq.n	8004e38 <__ssputs_r+0x80>
 8004dd2:	6825      	ldr	r5, [r4, #0]
 8004dd4:	6909      	ldr	r1, [r1, #16]
 8004dd6:	eba5 0901 	sub.w	r9, r5, r1
 8004dda:	6965      	ldr	r5, [r4, #20]
 8004ddc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004de0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004de4:	3301      	adds	r3, #1
 8004de6:	444b      	add	r3, r9
 8004de8:	106d      	asrs	r5, r5, #1
 8004dea:	429d      	cmp	r5, r3
 8004dec:	bf38      	it	cc
 8004dee:	461d      	movcc	r5, r3
 8004df0:	0553      	lsls	r3, r2, #21
 8004df2:	d531      	bpl.n	8004e58 <__ssputs_r+0xa0>
 8004df4:	4629      	mov	r1, r5
 8004df6:	f000 fb63 	bl	80054c0 <_malloc_r>
 8004dfa:	4606      	mov	r6, r0
 8004dfc:	b950      	cbnz	r0, 8004e14 <__ssputs_r+0x5c>
 8004dfe:	230c      	movs	r3, #12
 8004e00:	f8ca 3000 	str.w	r3, [sl]
 8004e04:	89a3      	ldrh	r3, [r4, #12]
 8004e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e0a:	81a3      	strh	r3, [r4, #12]
 8004e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e14:	6921      	ldr	r1, [r4, #16]
 8004e16:	464a      	mov	r2, r9
 8004e18:	f000 fabe 	bl	8005398 <memcpy>
 8004e1c:	89a3      	ldrh	r3, [r4, #12]
 8004e1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e26:	81a3      	strh	r3, [r4, #12]
 8004e28:	6126      	str	r6, [r4, #16]
 8004e2a:	6165      	str	r5, [r4, #20]
 8004e2c:	444e      	add	r6, r9
 8004e2e:	eba5 0509 	sub.w	r5, r5, r9
 8004e32:	6026      	str	r6, [r4, #0]
 8004e34:	60a5      	str	r5, [r4, #8]
 8004e36:	463e      	mov	r6, r7
 8004e38:	42be      	cmp	r6, r7
 8004e3a:	d900      	bls.n	8004e3e <__ssputs_r+0x86>
 8004e3c:	463e      	mov	r6, r7
 8004e3e:	6820      	ldr	r0, [r4, #0]
 8004e40:	4632      	mov	r2, r6
 8004e42:	4641      	mov	r1, r8
 8004e44:	f000 fab6 	bl	80053b4 <memmove>
 8004e48:	68a3      	ldr	r3, [r4, #8]
 8004e4a:	1b9b      	subs	r3, r3, r6
 8004e4c:	60a3      	str	r3, [r4, #8]
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	4433      	add	r3, r6
 8004e52:	6023      	str	r3, [r4, #0]
 8004e54:	2000      	movs	r0, #0
 8004e56:	e7db      	b.n	8004e10 <__ssputs_r+0x58>
 8004e58:	462a      	mov	r2, r5
 8004e5a:	f000 fba5 	bl	80055a8 <_realloc_r>
 8004e5e:	4606      	mov	r6, r0
 8004e60:	2800      	cmp	r0, #0
 8004e62:	d1e1      	bne.n	8004e28 <__ssputs_r+0x70>
 8004e64:	6921      	ldr	r1, [r4, #16]
 8004e66:	4650      	mov	r0, sl
 8004e68:	f000 fabe 	bl	80053e8 <_free_r>
 8004e6c:	e7c7      	b.n	8004dfe <__ssputs_r+0x46>
	...

08004e70 <_svfiprintf_r>:
 8004e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e74:	4698      	mov	r8, r3
 8004e76:	898b      	ldrh	r3, [r1, #12]
 8004e78:	061b      	lsls	r3, r3, #24
 8004e7a:	b09d      	sub	sp, #116	; 0x74
 8004e7c:	4607      	mov	r7, r0
 8004e7e:	460d      	mov	r5, r1
 8004e80:	4614      	mov	r4, r2
 8004e82:	d50e      	bpl.n	8004ea2 <_svfiprintf_r+0x32>
 8004e84:	690b      	ldr	r3, [r1, #16]
 8004e86:	b963      	cbnz	r3, 8004ea2 <_svfiprintf_r+0x32>
 8004e88:	2140      	movs	r1, #64	; 0x40
 8004e8a:	f000 fb19 	bl	80054c0 <_malloc_r>
 8004e8e:	6028      	str	r0, [r5, #0]
 8004e90:	6128      	str	r0, [r5, #16]
 8004e92:	b920      	cbnz	r0, 8004e9e <_svfiprintf_r+0x2e>
 8004e94:	230c      	movs	r3, #12
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9c:	e0d1      	b.n	8005042 <_svfiprintf_r+0x1d2>
 8004e9e:	2340      	movs	r3, #64	; 0x40
 8004ea0:	616b      	str	r3, [r5, #20]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ea6:	2320      	movs	r3, #32
 8004ea8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004eac:	f8cd 800c 	str.w	r8, [sp, #12]
 8004eb0:	2330      	movs	r3, #48	; 0x30
 8004eb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800505c <_svfiprintf_r+0x1ec>
 8004eb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004eba:	f04f 0901 	mov.w	r9, #1
 8004ebe:	4623      	mov	r3, r4
 8004ec0:	469a      	mov	sl, r3
 8004ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ec6:	b10a      	cbz	r2, 8004ecc <_svfiprintf_r+0x5c>
 8004ec8:	2a25      	cmp	r2, #37	; 0x25
 8004eca:	d1f9      	bne.n	8004ec0 <_svfiprintf_r+0x50>
 8004ecc:	ebba 0b04 	subs.w	fp, sl, r4
 8004ed0:	d00b      	beq.n	8004eea <_svfiprintf_r+0x7a>
 8004ed2:	465b      	mov	r3, fp
 8004ed4:	4622      	mov	r2, r4
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	4638      	mov	r0, r7
 8004eda:	f7ff ff6d 	bl	8004db8 <__ssputs_r>
 8004ede:	3001      	adds	r0, #1
 8004ee0:	f000 80aa 	beq.w	8005038 <_svfiprintf_r+0x1c8>
 8004ee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ee6:	445a      	add	r2, fp
 8004ee8:	9209      	str	r2, [sp, #36]	; 0x24
 8004eea:	f89a 3000 	ldrb.w	r3, [sl]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 80a2 	beq.w	8005038 <_svfiprintf_r+0x1c8>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8004efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004efe:	f10a 0a01 	add.w	sl, sl, #1
 8004f02:	9304      	str	r3, [sp, #16]
 8004f04:	9307      	str	r3, [sp, #28]
 8004f06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f0a:	931a      	str	r3, [sp, #104]	; 0x68
 8004f0c:	4654      	mov	r4, sl
 8004f0e:	2205      	movs	r2, #5
 8004f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f14:	4851      	ldr	r0, [pc, #324]	; (800505c <_svfiprintf_r+0x1ec>)
 8004f16:	f7fb f963 	bl	80001e0 <memchr>
 8004f1a:	9a04      	ldr	r2, [sp, #16]
 8004f1c:	b9d8      	cbnz	r0, 8004f56 <_svfiprintf_r+0xe6>
 8004f1e:	06d0      	lsls	r0, r2, #27
 8004f20:	bf44      	itt	mi
 8004f22:	2320      	movmi	r3, #32
 8004f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f28:	0711      	lsls	r1, r2, #28
 8004f2a:	bf44      	itt	mi
 8004f2c:	232b      	movmi	r3, #43	; 0x2b
 8004f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f32:	f89a 3000 	ldrb.w	r3, [sl]
 8004f36:	2b2a      	cmp	r3, #42	; 0x2a
 8004f38:	d015      	beq.n	8004f66 <_svfiprintf_r+0xf6>
 8004f3a:	9a07      	ldr	r2, [sp, #28]
 8004f3c:	4654      	mov	r4, sl
 8004f3e:	2000      	movs	r0, #0
 8004f40:	f04f 0c0a 	mov.w	ip, #10
 8004f44:	4621      	mov	r1, r4
 8004f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f4a:	3b30      	subs	r3, #48	; 0x30
 8004f4c:	2b09      	cmp	r3, #9
 8004f4e:	d94e      	bls.n	8004fee <_svfiprintf_r+0x17e>
 8004f50:	b1b0      	cbz	r0, 8004f80 <_svfiprintf_r+0x110>
 8004f52:	9207      	str	r2, [sp, #28]
 8004f54:	e014      	b.n	8004f80 <_svfiprintf_r+0x110>
 8004f56:	eba0 0308 	sub.w	r3, r0, r8
 8004f5a:	fa09 f303 	lsl.w	r3, r9, r3
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	9304      	str	r3, [sp, #16]
 8004f62:	46a2      	mov	sl, r4
 8004f64:	e7d2      	b.n	8004f0c <_svfiprintf_r+0x9c>
 8004f66:	9b03      	ldr	r3, [sp, #12]
 8004f68:	1d19      	adds	r1, r3, #4
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	9103      	str	r1, [sp, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bfbb      	ittet	lt
 8004f72:	425b      	neglt	r3, r3
 8004f74:	f042 0202 	orrlt.w	r2, r2, #2
 8004f78:	9307      	strge	r3, [sp, #28]
 8004f7a:	9307      	strlt	r3, [sp, #28]
 8004f7c:	bfb8      	it	lt
 8004f7e:	9204      	strlt	r2, [sp, #16]
 8004f80:	7823      	ldrb	r3, [r4, #0]
 8004f82:	2b2e      	cmp	r3, #46	; 0x2e
 8004f84:	d10c      	bne.n	8004fa0 <_svfiprintf_r+0x130>
 8004f86:	7863      	ldrb	r3, [r4, #1]
 8004f88:	2b2a      	cmp	r3, #42	; 0x2a
 8004f8a:	d135      	bne.n	8004ff8 <_svfiprintf_r+0x188>
 8004f8c:	9b03      	ldr	r3, [sp, #12]
 8004f8e:	1d1a      	adds	r2, r3, #4
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	9203      	str	r2, [sp, #12]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	bfb8      	it	lt
 8004f98:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f9c:	3402      	adds	r4, #2
 8004f9e:	9305      	str	r3, [sp, #20]
 8004fa0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800506c <_svfiprintf_r+0x1fc>
 8004fa4:	7821      	ldrb	r1, [r4, #0]
 8004fa6:	2203      	movs	r2, #3
 8004fa8:	4650      	mov	r0, sl
 8004faa:	f7fb f919 	bl	80001e0 <memchr>
 8004fae:	b140      	cbz	r0, 8004fc2 <_svfiprintf_r+0x152>
 8004fb0:	2340      	movs	r3, #64	; 0x40
 8004fb2:	eba0 000a 	sub.w	r0, r0, sl
 8004fb6:	fa03 f000 	lsl.w	r0, r3, r0
 8004fba:	9b04      	ldr	r3, [sp, #16]
 8004fbc:	4303      	orrs	r3, r0
 8004fbe:	3401      	adds	r4, #1
 8004fc0:	9304      	str	r3, [sp, #16]
 8004fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fc6:	4826      	ldr	r0, [pc, #152]	; (8005060 <_svfiprintf_r+0x1f0>)
 8004fc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fcc:	2206      	movs	r2, #6
 8004fce:	f7fb f907 	bl	80001e0 <memchr>
 8004fd2:	2800      	cmp	r0, #0
 8004fd4:	d038      	beq.n	8005048 <_svfiprintf_r+0x1d8>
 8004fd6:	4b23      	ldr	r3, [pc, #140]	; (8005064 <_svfiprintf_r+0x1f4>)
 8004fd8:	bb1b      	cbnz	r3, 8005022 <_svfiprintf_r+0x1b2>
 8004fda:	9b03      	ldr	r3, [sp, #12]
 8004fdc:	3307      	adds	r3, #7
 8004fde:	f023 0307 	bic.w	r3, r3, #7
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	9303      	str	r3, [sp, #12]
 8004fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fe8:	4433      	add	r3, r6
 8004fea:	9309      	str	r3, [sp, #36]	; 0x24
 8004fec:	e767      	b.n	8004ebe <_svfiprintf_r+0x4e>
 8004fee:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ff2:	460c      	mov	r4, r1
 8004ff4:	2001      	movs	r0, #1
 8004ff6:	e7a5      	b.n	8004f44 <_svfiprintf_r+0xd4>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	3401      	adds	r4, #1
 8004ffc:	9305      	str	r3, [sp, #20]
 8004ffe:	4619      	mov	r1, r3
 8005000:	f04f 0c0a 	mov.w	ip, #10
 8005004:	4620      	mov	r0, r4
 8005006:	f810 2b01 	ldrb.w	r2, [r0], #1
 800500a:	3a30      	subs	r2, #48	; 0x30
 800500c:	2a09      	cmp	r2, #9
 800500e:	d903      	bls.n	8005018 <_svfiprintf_r+0x1a8>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0c5      	beq.n	8004fa0 <_svfiprintf_r+0x130>
 8005014:	9105      	str	r1, [sp, #20]
 8005016:	e7c3      	b.n	8004fa0 <_svfiprintf_r+0x130>
 8005018:	fb0c 2101 	mla	r1, ip, r1, r2
 800501c:	4604      	mov	r4, r0
 800501e:	2301      	movs	r3, #1
 8005020:	e7f0      	b.n	8005004 <_svfiprintf_r+0x194>
 8005022:	ab03      	add	r3, sp, #12
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	462a      	mov	r2, r5
 8005028:	4b0f      	ldr	r3, [pc, #60]	; (8005068 <_svfiprintf_r+0x1f8>)
 800502a:	a904      	add	r1, sp, #16
 800502c:	4638      	mov	r0, r7
 800502e:	f3af 8000 	nop.w
 8005032:	1c42      	adds	r2, r0, #1
 8005034:	4606      	mov	r6, r0
 8005036:	d1d6      	bne.n	8004fe6 <_svfiprintf_r+0x176>
 8005038:	89ab      	ldrh	r3, [r5, #12]
 800503a:	065b      	lsls	r3, r3, #25
 800503c:	f53f af2c 	bmi.w	8004e98 <_svfiprintf_r+0x28>
 8005040:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005042:	b01d      	add	sp, #116	; 0x74
 8005044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005048:	ab03      	add	r3, sp, #12
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	462a      	mov	r2, r5
 800504e:	4b06      	ldr	r3, [pc, #24]	; (8005068 <_svfiprintf_r+0x1f8>)
 8005050:	a904      	add	r1, sp, #16
 8005052:	4638      	mov	r0, r7
 8005054:	f000 f87a 	bl	800514c <_printf_i>
 8005058:	e7eb      	b.n	8005032 <_svfiprintf_r+0x1c2>
 800505a:	bf00      	nop
 800505c:	0800569c 	.word	0x0800569c
 8005060:	080056a6 	.word	0x080056a6
 8005064:	00000000 	.word	0x00000000
 8005068:	08004db9 	.word	0x08004db9
 800506c:	080056a2 	.word	0x080056a2

08005070 <_printf_common>:
 8005070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005074:	4616      	mov	r6, r2
 8005076:	4699      	mov	r9, r3
 8005078:	688a      	ldr	r2, [r1, #8]
 800507a:	690b      	ldr	r3, [r1, #16]
 800507c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005080:	4293      	cmp	r3, r2
 8005082:	bfb8      	it	lt
 8005084:	4613      	movlt	r3, r2
 8005086:	6033      	str	r3, [r6, #0]
 8005088:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800508c:	4607      	mov	r7, r0
 800508e:	460c      	mov	r4, r1
 8005090:	b10a      	cbz	r2, 8005096 <_printf_common+0x26>
 8005092:	3301      	adds	r3, #1
 8005094:	6033      	str	r3, [r6, #0]
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	0699      	lsls	r1, r3, #26
 800509a:	bf42      	ittt	mi
 800509c:	6833      	ldrmi	r3, [r6, #0]
 800509e:	3302      	addmi	r3, #2
 80050a0:	6033      	strmi	r3, [r6, #0]
 80050a2:	6825      	ldr	r5, [r4, #0]
 80050a4:	f015 0506 	ands.w	r5, r5, #6
 80050a8:	d106      	bne.n	80050b8 <_printf_common+0x48>
 80050aa:	f104 0a19 	add.w	sl, r4, #25
 80050ae:	68e3      	ldr	r3, [r4, #12]
 80050b0:	6832      	ldr	r2, [r6, #0]
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	42ab      	cmp	r3, r5
 80050b6:	dc26      	bgt.n	8005106 <_printf_common+0x96>
 80050b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050bc:	1e13      	subs	r3, r2, #0
 80050be:	6822      	ldr	r2, [r4, #0]
 80050c0:	bf18      	it	ne
 80050c2:	2301      	movne	r3, #1
 80050c4:	0692      	lsls	r2, r2, #26
 80050c6:	d42b      	bmi.n	8005120 <_printf_common+0xb0>
 80050c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050cc:	4649      	mov	r1, r9
 80050ce:	4638      	mov	r0, r7
 80050d0:	47c0      	blx	r8
 80050d2:	3001      	adds	r0, #1
 80050d4:	d01e      	beq.n	8005114 <_printf_common+0xa4>
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	68e5      	ldr	r5, [r4, #12]
 80050da:	6832      	ldr	r2, [r6, #0]
 80050dc:	f003 0306 	and.w	r3, r3, #6
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	bf08      	it	eq
 80050e4:	1aad      	subeq	r5, r5, r2
 80050e6:	68a3      	ldr	r3, [r4, #8]
 80050e8:	6922      	ldr	r2, [r4, #16]
 80050ea:	bf0c      	ite	eq
 80050ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050f0:	2500      	movne	r5, #0
 80050f2:	4293      	cmp	r3, r2
 80050f4:	bfc4      	itt	gt
 80050f6:	1a9b      	subgt	r3, r3, r2
 80050f8:	18ed      	addgt	r5, r5, r3
 80050fa:	2600      	movs	r6, #0
 80050fc:	341a      	adds	r4, #26
 80050fe:	42b5      	cmp	r5, r6
 8005100:	d11a      	bne.n	8005138 <_printf_common+0xc8>
 8005102:	2000      	movs	r0, #0
 8005104:	e008      	b.n	8005118 <_printf_common+0xa8>
 8005106:	2301      	movs	r3, #1
 8005108:	4652      	mov	r2, sl
 800510a:	4649      	mov	r1, r9
 800510c:	4638      	mov	r0, r7
 800510e:	47c0      	blx	r8
 8005110:	3001      	adds	r0, #1
 8005112:	d103      	bne.n	800511c <_printf_common+0xac>
 8005114:	f04f 30ff 	mov.w	r0, #4294967295
 8005118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511c:	3501      	adds	r5, #1
 800511e:	e7c6      	b.n	80050ae <_printf_common+0x3e>
 8005120:	18e1      	adds	r1, r4, r3
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	2030      	movs	r0, #48	; 0x30
 8005126:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800512a:	4422      	add	r2, r4
 800512c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005130:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005134:	3302      	adds	r3, #2
 8005136:	e7c7      	b.n	80050c8 <_printf_common+0x58>
 8005138:	2301      	movs	r3, #1
 800513a:	4622      	mov	r2, r4
 800513c:	4649      	mov	r1, r9
 800513e:	4638      	mov	r0, r7
 8005140:	47c0      	blx	r8
 8005142:	3001      	adds	r0, #1
 8005144:	d0e6      	beq.n	8005114 <_printf_common+0xa4>
 8005146:	3601      	adds	r6, #1
 8005148:	e7d9      	b.n	80050fe <_printf_common+0x8e>
	...

0800514c <_printf_i>:
 800514c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005150:	7e0f      	ldrb	r7, [r1, #24]
 8005152:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005154:	2f78      	cmp	r7, #120	; 0x78
 8005156:	4691      	mov	r9, r2
 8005158:	4680      	mov	r8, r0
 800515a:	460c      	mov	r4, r1
 800515c:	469a      	mov	sl, r3
 800515e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005162:	d807      	bhi.n	8005174 <_printf_i+0x28>
 8005164:	2f62      	cmp	r7, #98	; 0x62
 8005166:	d80a      	bhi.n	800517e <_printf_i+0x32>
 8005168:	2f00      	cmp	r7, #0
 800516a:	f000 80d8 	beq.w	800531e <_printf_i+0x1d2>
 800516e:	2f58      	cmp	r7, #88	; 0x58
 8005170:	f000 80a3 	beq.w	80052ba <_printf_i+0x16e>
 8005174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005178:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800517c:	e03a      	b.n	80051f4 <_printf_i+0xa8>
 800517e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005182:	2b15      	cmp	r3, #21
 8005184:	d8f6      	bhi.n	8005174 <_printf_i+0x28>
 8005186:	a101      	add	r1, pc, #4	; (adr r1, 800518c <_printf_i+0x40>)
 8005188:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800518c:	080051e5 	.word	0x080051e5
 8005190:	080051f9 	.word	0x080051f9
 8005194:	08005175 	.word	0x08005175
 8005198:	08005175 	.word	0x08005175
 800519c:	08005175 	.word	0x08005175
 80051a0:	08005175 	.word	0x08005175
 80051a4:	080051f9 	.word	0x080051f9
 80051a8:	08005175 	.word	0x08005175
 80051ac:	08005175 	.word	0x08005175
 80051b0:	08005175 	.word	0x08005175
 80051b4:	08005175 	.word	0x08005175
 80051b8:	08005305 	.word	0x08005305
 80051bc:	08005229 	.word	0x08005229
 80051c0:	080052e7 	.word	0x080052e7
 80051c4:	08005175 	.word	0x08005175
 80051c8:	08005175 	.word	0x08005175
 80051cc:	08005327 	.word	0x08005327
 80051d0:	08005175 	.word	0x08005175
 80051d4:	08005229 	.word	0x08005229
 80051d8:	08005175 	.word	0x08005175
 80051dc:	08005175 	.word	0x08005175
 80051e0:	080052ef 	.word	0x080052ef
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	1d1a      	adds	r2, r3, #4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	602a      	str	r2, [r5, #0]
 80051ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051f4:	2301      	movs	r3, #1
 80051f6:	e0a3      	b.n	8005340 <_printf_i+0x1f4>
 80051f8:	6820      	ldr	r0, [r4, #0]
 80051fa:	6829      	ldr	r1, [r5, #0]
 80051fc:	0606      	lsls	r6, r0, #24
 80051fe:	f101 0304 	add.w	r3, r1, #4
 8005202:	d50a      	bpl.n	800521a <_printf_i+0xce>
 8005204:	680e      	ldr	r6, [r1, #0]
 8005206:	602b      	str	r3, [r5, #0]
 8005208:	2e00      	cmp	r6, #0
 800520a:	da03      	bge.n	8005214 <_printf_i+0xc8>
 800520c:	232d      	movs	r3, #45	; 0x2d
 800520e:	4276      	negs	r6, r6
 8005210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005214:	485e      	ldr	r0, [pc, #376]	; (8005390 <_printf_i+0x244>)
 8005216:	230a      	movs	r3, #10
 8005218:	e019      	b.n	800524e <_printf_i+0x102>
 800521a:	680e      	ldr	r6, [r1, #0]
 800521c:	602b      	str	r3, [r5, #0]
 800521e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005222:	bf18      	it	ne
 8005224:	b236      	sxthne	r6, r6
 8005226:	e7ef      	b.n	8005208 <_printf_i+0xbc>
 8005228:	682b      	ldr	r3, [r5, #0]
 800522a:	6820      	ldr	r0, [r4, #0]
 800522c:	1d19      	adds	r1, r3, #4
 800522e:	6029      	str	r1, [r5, #0]
 8005230:	0601      	lsls	r1, r0, #24
 8005232:	d501      	bpl.n	8005238 <_printf_i+0xec>
 8005234:	681e      	ldr	r6, [r3, #0]
 8005236:	e002      	b.n	800523e <_printf_i+0xf2>
 8005238:	0646      	lsls	r6, r0, #25
 800523a:	d5fb      	bpl.n	8005234 <_printf_i+0xe8>
 800523c:	881e      	ldrh	r6, [r3, #0]
 800523e:	4854      	ldr	r0, [pc, #336]	; (8005390 <_printf_i+0x244>)
 8005240:	2f6f      	cmp	r7, #111	; 0x6f
 8005242:	bf0c      	ite	eq
 8005244:	2308      	moveq	r3, #8
 8005246:	230a      	movne	r3, #10
 8005248:	2100      	movs	r1, #0
 800524a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800524e:	6865      	ldr	r5, [r4, #4]
 8005250:	60a5      	str	r5, [r4, #8]
 8005252:	2d00      	cmp	r5, #0
 8005254:	bfa2      	ittt	ge
 8005256:	6821      	ldrge	r1, [r4, #0]
 8005258:	f021 0104 	bicge.w	r1, r1, #4
 800525c:	6021      	strge	r1, [r4, #0]
 800525e:	b90e      	cbnz	r6, 8005264 <_printf_i+0x118>
 8005260:	2d00      	cmp	r5, #0
 8005262:	d04d      	beq.n	8005300 <_printf_i+0x1b4>
 8005264:	4615      	mov	r5, r2
 8005266:	fbb6 f1f3 	udiv	r1, r6, r3
 800526a:	fb03 6711 	mls	r7, r3, r1, r6
 800526e:	5dc7      	ldrb	r7, [r0, r7]
 8005270:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005274:	4637      	mov	r7, r6
 8005276:	42bb      	cmp	r3, r7
 8005278:	460e      	mov	r6, r1
 800527a:	d9f4      	bls.n	8005266 <_printf_i+0x11a>
 800527c:	2b08      	cmp	r3, #8
 800527e:	d10b      	bne.n	8005298 <_printf_i+0x14c>
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	07de      	lsls	r6, r3, #31
 8005284:	d508      	bpl.n	8005298 <_printf_i+0x14c>
 8005286:	6923      	ldr	r3, [r4, #16]
 8005288:	6861      	ldr	r1, [r4, #4]
 800528a:	4299      	cmp	r1, r3
 800528c:	bfde      	ittt	le
 800528e:	2330      	movle	r3, #48	; 0x30
 8005290:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005294:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005298:	1b52      	subs	r2, r2, r5
 800529a:	6122      	str	r2, [r4, #16]
 800529c:	f8cd a000 	str.w	sl, [sp]
 80052a0:	464b      	mov	r3, r9
 80052a2:	aa03      	add	r2, sp, #12
 80052a4:	4621      	mov	r1, r4
 80052a6:	4640      	mov	r0, r8
 80052a8:	f7ff fee2 	bl	8005070 <_printf_common>
 80052ac:	3001      	adds	r0, #1
 80052ae:	d14c      	bne.n	800534a <_printf_i+0x1fe>
 80052b0:	f04f 30ff 	mov.w	r0, #4294967295
 80052b4:	b004      	add	sp, #16
 80052b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ba:	4835      	ldr	r0, [pc, #212]	; (8005390 <_printf_i+0x244>)
 80052bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052c0:	6829      	ldr	r1, [r5, #0]
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80052c8:	6029      	str	r1, [r5, #0]
 80052ca:	061d      	lsls	r5, r3, #24
 80052cc:	d514      	bpl.n	80052f8 <_printf_i+0x1ac>
 80052ce:	07df      	lsls	r7, r3, #31
 80052d0:	bf44      	itt	mi
 80052d2:	f043 0320 	orrmi.w	r3, r3, #32
 80052d6:	6023      	strmi	r3, [r4, #0]
 80052d8:	b91e      	cbnz	r6, 80052e2 <_printf_i+0x196>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	f023 0320 	bic.w	r3, r3, #32
 80052e0:	6023      	str	r3, [r4, #0]
 80052e2:	2310      	movs	r3, #16
 80052e4:	e7b0      	b.n	8005248 <_printf_i+0xfc>
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	f043 0320 	orr.w	r3, r3, #32
 80052ec:	6023      	str	r3, [r4, #0]
 80052ee:	2378      	movs	r3, #120	; 0x78
 80052f0:	4828      	ldr	r0, [pc, #160]	; (8005394 <_printf_i+0x248>)
 80052f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052f6:	e7e3      	b.n	80052c0 <_printf_i+0x174>
 80052f8:	0659      	lsls	r1, r3, #25
 80052fa:	bf48      	it	mi
 80052fc:	b2b6      	uxthmi	r6, r6
 80052fe:	e7e6      	b.n	80052ce <_printf_i+0x182>
 8005300:	4615      	mov	r5, r2
 8005302:	e7bb      	b.n	800527c <_printf_i+0x130>
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	6826      	ldr	r6, [r4, #0]
 8005308:	6961      	ldr	r1, [r4, #20]
 800530a:	1d18      	adds	r0, r3, #4
 800530c:	6028      	str	r0, [r5, #0]
 800530e:	0635      	lsls	r5, r6, #24
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	d501      	bpl.n	8005318 <_printf_i+0x1cc>
 8005314:	6019      	str	r1, [r3, #0]
 8005316:	e002      	b.n	800531e <_printf_i+0x1d2>
 8005318:	0670      	lsls	r0, r6, #25
 800531a:	d5fb      	bpl.n	8005314 <_printf_i+0x1c8>
 800531c:	8019      	strh	r1, [r3, #0]
 800531e:	2300      	movs	r3, #0
 8005320:	6123      	str	r3, [r4, #16]
 8005322:	4615      	mov	r5, r2
 8005324:	e7ba      	b.n	800529c <_printf_i+0x150>
 8005326:	682b      	ldr	r3, [r5, #0]
 8005328:	1d1a      	adds	r2, r3, #4
 800532a:	602a      	str	r2, [r5, #0]
 800532c:	681d      	ldr	r5, [r3, #0]
 800532e:	6862      	ldr	r2, [r4, #4]
 8005330:	2100      	movs	r1, #0
 8005332:	4628      	mov	r0, r5
 8005334:	f7fa ff54 	bl	80001e0 <memchr>
 8005338:	b108      	cbz	r0, 800533e <_printf_i+0x1f2>
 800533a:	1b40      	subs	r0, r0, r5
 800533c:	6060      	str	r0, [r4, #4]
 800533e:	6863      	ldr	r3, [r4, #4]
 8005340:	6123      	str	r3, [r4, #16]
 8005342:	2300      	movs	r3, #0
 8005344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005348:	e7a8      	b.n	800529c <_printf_i+0x150>
 800534a:	6923      	ldr	r3, [r4, #16]
 800534c:	462a      	mov	r2, r5
 800534e:	4649      	mov	r1, r9
 8005350:	4640      	mov	r0, r8
 8005352:	47d0      	blx	sl
 8005354:	3001      	adds	r0, #1
 8005356:	d0ab      	beq.n	80052b0 <_printf_i+0x164>
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	079b      	lsls	r3, r3, #30
 800535c:	d413      	bmi.n	8005386 <_printf_i+0x23a>
 800535e:	68e0      	ldr	r0, [r4, #12]
 8005360:	9b03      	ldr	r3, [sp, #12]
 8005362:	4298      	cmp	r0, r3
 8005364:	bfb8      	it	lt
 8005366:	4618      	movlt	r0, r3
 8005368:	e7a4      	b.n	80052b4 <_printf_i+0x168>
 800536a:	2301      	movs	r3, #1
 800536c:	4632      	mov	r2, r6
 800536e:	4649      	mov	r1, r9
 8005370:	4640      	mov	r0, r8
 8005372:	47d0      	blx	sl
 8005374:	3001      	adds	r0, #1
 8005376:	d09b      	beq.n	80052b0 <_printf_i+0x164>
 8005378:	3501      	adds	r5, #1
 800537a:	68e3      	ldr	r3, [r4, #12]
 800537c:	9903      	ldr	r1, [sp, #12]
 800537e:	1a5b      	subs	r3, r3, r1
 8005380:	42ab      	cmp	r3, r5
 8005382:	dcf2      	bgt.n	800536a <_printf_i+0x21e>
 8005384:	e7eb      	b.n	800535e <_printf_i+0x212>
 8005386:	2500      	movs	r5, #0
 8005388:	f104 0619 	add.w	r6, r4, #25
 800538c:	e7f5      	b.n	800537a <_printf_i+0x22e>
 800538e:	bf00      	nop
 8005390:	080056ad 	.word	0x080056ad
 8005394:	080056be 	.word	0x080056be

08005398 <memcpy>:
 8005398:	440a      	add	r2, r1
 800539a:	4291      	cmp	r1, r2
 800539c:	f100 33ff 	add.w	r3, r0, #4294967295
 80053a0:	d100      	bne.n	80053a4 <memcpy+0xc>
 80053a2:	4770      	bx	lr
 80053a4:	b510      	push	{r4, lr}
 80053a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053ae:	4291      	cmp	r1, r2
 80053b0:	d1f9      	bne.n	80053a6 <memcpy+0xe>
 80053b2:	bd10      	pop	{r4, pc}

080053b4 <memmove>:
 80053b4:	4288      	cmp	r0, r1
 80053b6:	b510      	push	{r4, lr}
 80053b8:	eb01 0402 	add.w	r4, r1, r2
 80053bc:	d902      	bls.n	80053c4 <memmove+0x10>
 80053be:	4284      	cmp	r4, r0
 80053c0:	4623      	mov	r3, r4
 80053c2:	d807      	bhi.n	80053d4 <memmove+0x20>
 80053c4:	1e43      	subs	r3, r0, #1
 80053c6:	42a1      	cmp	r1, r4
 80053c8:	d008      	beq.n	80053dc <memmove+0x28>
 80053ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053d2:	e7f8      	b.n	80053c6 <memmove+0x12>
 80053d4:	4402      	add	r2, r0
 80053d6:	4601      	mov	r1, r0
 80053d8:	428a      	cmp	r2, r1
 80053da:	d100      	bne.n	80053de <memmove+0x2a>
 80053dc:	bd10      	pop	{r4, pc}
 80053de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053e6:	e7f7      	b.n	80053d8 <memmove+0x24>

080053e8 <_free_r>:
 80053e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053ea:	2900      	cmp	r1, #0
 80053ec:	d044      	beq.n	8005478 <_free_r+0x90>
 80053ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053f2:	9001      	str	r0, [sp, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f1a1 0404 	sub.w	r4, r1, #4
 80053fa:	bfb8      	it	lt
 80053fc:	18e4      	addlt	r4, r4, r3
 80053fe:	f000 f913 	bl	8005628 <__malloc_lock>
 8005402:	4a1e      	ldr	r2, [pc, #120]	; (800547c <_free_r+0x94>)
 8005404:	9801      	ldr	r0, [sp, #4]
 8005406:	6813      	ldr	r3, [r2, #0]
 8005408:	b933      	cbnz	r3, 8005418 <_free_r+0x30>
 800540a:	6063      	str	r3, [r4, #4]
 800540c:	6014      	str	r4, [r2, #0]
 800540e:	b003      	add	sp, #12
 8005410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005414:	f000 b90e 	b.w	8005634 <__malloc_unlock>
 8005418:	42a3      	cmp	r3, r4
 800541a:	d908      	bls.n	800542e <_free_r+0x46>
 800541c:	6825      	ldr	r5, [r4, #0]
 800541e:	1961      	adds	r1, r4, r5
 8005420:	428b      	cmp	r3, r1
 8005422:	bf01      	itttt	eq
 8005424:	6819      	ldreq	r1, [r3, #0]
 8005426:	685b      	ldreq	r3, [r3, #4]
 8005428:	1949      	addeq	r1, r1, r5
 800542a:	6021      	streq	r1, [r4, #0]
 800542c:	e7ed      	b.n	800540a <_free_r+0x22>
 800542e:	461a      	mov	r2, r3
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	b10b      	cbz	r3, 8005438 <_free_r+0x50>
 8005434:	42a3      	cmp	r3, r4
 8005436:	d9fa      	bls.n	800542e <_free_r+0x46>
 8005438:	6811      	ldr	r1, [r2, #0]
 800543a:	1855      	adds	r5, r2, r1
 800543c:	42a5      	cmp	r5, r4
 800543e:	d10b      	bne.n	8005458 <_free_r+0x70>
 8005440:	6824      	ldr	r4, [r4, #0]
 8005442:	4421      	add	r1, r4
 8005444:	1854      	adds	r4, r2, r1
 8005446:	42a3      	cmp	r3, r4
 8005448:	6011      	str	r1, [r2, #0]
 800544a:	d1e0      	bne.n	800540e <_free_r+0x26>
 800544c:	681c      	ldr	r4, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	6053      	str	r3, [r2, #4]
 8005452:	4421      	add	r1, r4
 8005454:	6011      	str	r1, [r2, #0]
 8005456:	e7da      	b.n	800540e <_free_r+0x26>
 8005458:	d902      	bls.n	8005460 <_free_r+0x78>
 800545a:	230c      	movs	r3, #12
 800545c:	6003      	str	r3, [r0, #0]
 800545e:	e7d6      	b.n	800540e <_free_r+0x26>
 8005460:	6825      	ldr	r5, [r4, #0]
 8005462:	1961      	adds	r1, r4, r5
 8005464:	428b      	cmp	r3, r1
 8005466:	bf04      	itt	eq
 8005468:	6819      	ldreq	r1, [r3, #0]
 800546a:	685b      	ldreq	r3, [r3, #4]
 800546c:	6063      	str	r3, [r4, #4]
 800546e:	bf04      	itt	eq
 8005470:	1949      	addeq	r1, r1, r5
 8005472:	6021      	streq	r1, [r4, #0]
 8005474:	6054      	str	r4, [r2, #4]
 8005476:	e7ca      	b.n	800540e <_free_r+0x26>
 8005478:	b003      	add	sp, #12
 800547a:	bd30      	pop	{r4, r5, pc}
 800547c:	20000228 	.word	0x20000228

08005480 <sbrk_aligned>:
 8005480:	b570      	push	{r4, r5, r6, lr}
 8005482:	4e0e      	ldr	r6, [pc, #56]	; (80054bc <sbrk_aligned+0x3c>)
 8005484:	460c      	mov	r4, r1
 8005486:	6831      	ldr	r1, [r6, #0]
 8005488:	4605      	mov	r5, r0
 800548a:	b911      	cbnz	r1, 8005492 <sbrk_aligned+0x12>
 800548c:	f000 f8bc 	bl	8005608 <_sbrk_r>
 8005490:	6030      	str	r0, [r6, #0]
 8005492:	4621      	mov	r1, r4
 8005494:	4628      	mov	r0, r5
 8005496:	f000 f8b7 	bl	8005608 <_sbrk_r>
 800549a:	1c43      	adds	r3, r0, #1
 800549c:	d00a      	beq.n	80054b4 <sbrk_aligned+0x34>
 800549e:	1cc4      	adds	r4, r0, #3
 80054a0:	f024 0403 	bic.w	r4, r4, #3
 80054a4:	42a0      	cmp	r0, r4
 80054a6:	d007      	beq.n	80054b8 <sbrk_aligned+0x38>
 80054a8:	1a21      	subs	r1, r4, r0
 80054aa:	4628      	mov	r0, r5
 80054ac:	f000 f8ac 	bl	8005608 <_sbrk_r>
 80054b0:	3001      	adds	r0, #1
 80054b2:	d101      	bne.n	80054b8 <sbrk_aligned+0x38>
 80054b4:	f04f 34ff 	mov.w	r4, #4294967295
 80054b8:	4620      	mov	r0, r4
 80054ba:	bd70      	pop	{r4, r5, r6, pc}
 80054bc:	2000022c 	.word	0x2000022c

080054c0 <_malloc_r>:
 80054c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054c4:	1ccd      	adds	r5, r1, #3
 80054c6:	f025 0503 	bic.w	r5, r5, #3
 80054ca:	3508      	adds	r5, #8
 80054cc:	2d0c      	cmp	r5, #12
 80054ce:	bf38      	it	cc
 80054d0:	250c      	movcc	r5, #12
 80054d2:	2d00      	cmp	r5, #0
 80054d4:	4607      	mov	r7, r0
 80054d6:	db01      	blt.n	80054dc <_malloc_r+0x1c>
 80054d8:	42a9      	cmp	r1, r5
 80054da:	d905      	bls.n	80054e8 <_malloc_r+0x28>
 80054dc:	230c      	movs	r3, #12
 80054de:	603b      	str	r3, [r7, #0]
 80054e0:	2600      	movs	r6, #0
 80054e2:	4630      	mov	r0, r6
 80054e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054e8:	4e2e      	ldr	r6, [pc, #184]	; (80055a4 <_malloc_r+0xe4>)
 80054ea:	f000 f89d 	bl	8005628 <__malloc_lock>
 80054ee:	6833      	ldr	r3, [r6, #0]
 80054f0:	461c      	mov	r4, r3
 80054f2:	bb34      	cbnz	r4, 8005542 <_malloc_r+0x82>
 80054f4:	4629      	mov	r1, r5
 80054f6:	4638      	mov	r0, r7
 80054f8:	f7ff ffc2 	bl	8005480 <sbrk_aligned>
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	4604      	mov	r4, r0
 8005500:	d14d      	bne.n	800559e <_malloc_r+0xde>
 8005502:	6834      	ldr	r4, [r6, #0]
 8005504:	4626      	mov	r6, r4
 8005506:	2e00      	cmp	r6, #0
 8005508:	d140      	bne.n	800558c <_malloc_r+0xcc>
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	4631      	mov	r1, r6
 800550e:	4638      	mov	r0, r7
 8005510:	eb04 0803 	add.w	r8, r4, r3
 8005514:	f000 f878 	bl	8005608 <_sbrk_r>
 8005518:	4580      	cmp	r8, r0
 800551a:	d13a      	bne.n	8005592 <_malloc_r+0xd2>
 800551c:	6821      	ldr	r1, [r4, #0]
 800551e:	3503      	adds	r5, #3
 8005520:	1a6d      	subs	r5, r5, r1
 8005522:	f025 0503 	bic.w	r5, r5, #3
 8005526:	3508      	adds	r5, #8
 8005528:	2d0c      	cmp	r5, #12
 800552a:	bf38      	it	cc
 800552c:	250c      	movcc	r5, #12
 800552e:	4629      	mov	r1, r5
 8005530:	4638      	mov	r0, r7
 8005532:	f7ff ffa5 	bl	8005480 <sbrk_aligned>
 8005536:	3001      	adds	r0, #1
 8005538:	d02b      	beq.n	8005592 <_malloc_r+0xd2>
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	442b      	add	r3, r5
 800553e:	6023      	str	r3, [r4, #0]
 8005540:	e00e      	b.n	8005560 <_malloc_r+0xa0>
 8005542:	6822      	ldr	r2, [r4, #0]
 8005544:	1b52      	subs	r2, r2, r5
 8005546:	d41e      	bmi.n	8005586 <_malloc_r+0xc6>
 8005548:	2a0b      	cmp	r2, #11
 800554a:	d916      	bls.n	800557a <_malloc_r+0xba>
 800554c:	1961      	adds	r1, r4, r5
 800554e:	42a3      	cmp	r3, r4
 8005550:	6025      	str	r5, [r4, #0]
 8005552:	bf18      	it	ne
 8005554:	6059      	strne	r1, [r3, #4]
 8005556:	6863      	ldr	r3, [r4, #4]
 8005558:	bf08      	it	eq
 800555a:	6031      	streq	r1, [r6, #0]
 800555c:	5162      	str	r2, [r4, r5]
 800555e:	604b      	str	r3, [r1, #4]
 8005560:	4638      	mov	r0, r7
 8005562:	f104 060b 	add.w	r6, r4, #11
 8005566:	f000 f865 	bl	8005634 <__malloc_unlock>
 800556a:	f026 0607 	bic.w	r6, r6, #7
 800556e:	1d23      	adds	r3, r4, #4
 8005570:	1af2      	subs	r2, r6, r3
 8005572:	d0b6      	beq.n	80054e2 <_malloc_r+0x22>
 8005574:	1b9b      	subs	r3, r3, r6
 8005576:	50a3      	str	r3, [r4, r2]
 8005578:	e7b3      	b.n	80054e2 <_malloc_r+0x22>
 800557a:	6862      	ldr	r2, [r4, #4]
 800557c:	42a3      	cmp	r3, r4
 800557e:	bf0c      	ite	eq
 8005580:	6032      	streq	r2, [r6, #0]
 8005582:	605a      	strne	r2, [r3, #4]
 8005584:	e7ec      	b.n	8005560 <_malloc_r+0xa0>
 8005586:	4623      	mov	r3, r4
 8005588:	6864      	ldr	r4, [r4, #4]
 800558a:	e7b2      	b.n	80054f2 <_malloc_r+0x32>
 800558c:	4634      	mov	r4, r6
 800558e:	6876      	ldr	r6, [r6, #4]
 8005590:	e7b9      	b.n	8005506 <_malloc_r+0x46>
 8005592:	230c      	movs	r3, #12
 8005594:	603b      	str	r3, [r7, #0]
 8005596:	4638      	mov	r0, r7
 8005598:	f000 f84c 	bl	8005634 <__malloc_unlock>
 800559c:	e7a1      	b.n	80054e2 <_malloc_r+0x22>
 800559e:	6025      	str	r5, [r4, #0]
 80055a0:	e7de      	b.n	8005560 <_malloc_r+0xa0>
 80055a2:	bf00      	nop
 80055a4:	20000228 	.word	0x20000228

080055a8 <_realloc_r>:
 80055a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ac:	4680      	mov	r8, r0
 80055ae:	4614      	mov	r4, r2
 80055b0:	460e      	mov	r6, r1
 80055b2:	b921      	cbnz	r1, 80055be <_realloc_r+0x16>
 80055b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055b8:	4611      	mov	r1, r2
 80055ba:	f7ff bf81 	b.w	80054c0 <_malloc_r>
 80055be:	b92a      	cbnz	r2, 80055cc <_realloc_r+0x24>
 80055c0:	f7ff ff12 	bl	80053e8 <_free_r>
 80055c4:	4625      	mov	r5, r4
 80055c6:	4628      	mov	r0, r5
 80055c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055cc:	f000 f838 	bl	8005640 <_malloc_usable_size_r>
 80055d0:	4284      	cmp	r4, r0
 80055d2:	4607      	mov	r7, r0
 80055d4:	d802      	bhi.n	80055dc <_realloc_r+0x34>
 80055d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80055da:	d812      	bhi.n	8005602 <_realloc_r+0x5a>
 80055dc:	4621      	mov	r1, r4
 80055de:	4640      	mov	r0, r8
 80055e0:	f7ff ff6e 	bl	80054c0 <_malloc_r>
 80055e4:	4605      	mov	r5, r0
 80055e6:	2800      	cmp	r0, #0
 80055e8:	d0ed      	beq.n	80055c6 <_realloc_r+0x1e>
 80055ea:	42bc      	cmp	r4, r7
 80055ec:	4622      	mov	r2, r4
 80055ee:	4631      	mov	r1, r6
 80055f0:	bf28      	it	cs
 80055f2:	463a      	movcs	r2, r7
 80055f4:	f7ff fed0 	bl	8005398 <memcpy>
 80055f8:	4631      	mov	r1, r6
 80055fa:	4640      	mov	r0, r8
 80055fc:	f7ff fef4 	bl	80053e8 <_free_r>
 8005600:	e7e1      	b.n	80055c6 <_realloc_r+0x1e>
 8005602:	4635      	mov	r5, r6
 8005604:	e7df      	b.n	80055c6 <_realloc_r+0x1e>
	...

08005608 <_sbrk_r>:
 8005608:	b538      	push	{r3, r4, r5, lr}
 800560a:	4d06      	ldr	r5, [pc, #24]	; (8005624 <_sbrk_r+0x1c>)
 800560c:	2300      	movs	r3, #0
 800560e:	4604      	mov	r4, r0
 8005610:	4608      	mov	r0, r1
 8005612:	602b      	str	r3, [r5, #0]
 8005614:	f7fb f9d2 	bl	80009bc <_sbrk>
 8005618:	1c43      	adds	r3, r0, #1
 800561a:	d102      	bne.n	8005622 <_sbrk_r+0x1a>
 800561c:	682b      	ldr	r3, [r5, #0]
 800561e:	b103      	cbz	r3, 8005622 <_sbrk_r+0x1a>
 8005620:	6023      	str	r3, [r4, #0]
 8005622:	bd38      	pop	{r3, r4, r5, pc}
 8005624:	20000230 	.word	0x20000230

08005628 <__malloc_lock>:
 8005628:	4801      	ldr	r0, [pc, #4]	; (8005630 <__malloc_lock+0x8>)
 800562a:	f000 b811 	b.w	8005650 <__retarget_lock_acquire_recursive>
 800562e:	bf00      	nop
 8005630:	20000234 	.word	0x20000234

08005634 <__malloc_unlock>:
 8005634:	4801      	ldr	r0, [pc, #4]	; (800563c <__malloc_unlock+0x8>)
 8005636:	f000 b80c 	b.w	8005652 <__retarget_lock_release_recursive>
 800563a:	bf00      	nop
 800563c:	20000234 	.word	0x20000234

08005640 <_malloc_usable_size_r>:
 8005640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005644:	1f18      	subs	r0, r3, #4
 8005646:	2b00      	cmp	r3, #0
 8005648:	bfbc      	itt	lt
 800564a:	580b      	ldrlt	r3, [r1, r0]
 800564c:	18c0      	addlt	r0, r0, r3
 800564e:	4770      	bx	lr

08005650 <__retarget_lock_acquire_recursive>:
 8005650:	4770      	bx	lr

08005652 <__retarget_lock_release_recursive>:
 8005652:	4770      	bx	lr

08005654 <_init>:
 8005654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005656:	bf00      	nop
 8005658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800565a:	bc08      	pop	{r3}
 800565c:	469e      	mov	lr, r3
 800565e:	4770      	bx	lr

08005660 <_fini>:
 8005660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005662:	bf00      	nop
 8005664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005666:	bc08      	pop	{r3}
 8005668:	469e      	mov	lr, r3
 800566a:	4770      	bx	lr
